// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using ZSGF.Client.Client;
using ZSGF.Client.Model;

namespace ZSGF.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IWechatApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        WechatApiEvents Events { get; }

        /// <summary>
        /// 确认二维码登录请求
        /// </summary>
        /// <remarks>
        /// 微信小程序用户确认二维码登录并获取访问令牌
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="qRCodeSignInRequest">登录确认请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IConfirmQRCodeLoginApiResponse"/>&gt;</returns>
        Task<IConfirmQRCodeLoginApiResponse> ConfirmQRCodeLoginAsync(string appKey, Option<QRCodeSignInRequest> qRCodeSignInRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 确认二维码登录请求
        /// </summary>
        /// <remarks>
        /// 微信小程序用户确认二维码登录并获取访问令牌
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="qRCodeSignInRequest">登录确认请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IConfirmQRCodeLoginApiResponse"/>&gt;</returns>
        Task<IConfirmQRCodeLoginApiResponse> ConfirmQRCodeLoginOrDefaultAsync(string appKey, Option<QRCodeSignInRequest> qRCodeSignInRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 确认二维码注册请求
        /// </summary>
        /// <remarks>
        /// 微信小程序用户通过二维码完成注册并获取访问令牌
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="qRCodeSignUpRequest">注册确认请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IConfirmQRCodeRegistrationApiResponse"/>&gt;</returns>
        Task<IConfirmQRCodeRegistrationApiResponse> ConfirmQRCodeRegistrationAsync(string appKey, Option<QRCodeSignUpRequest> qRCodeSignUpRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 确认二维码注册请求
        /// </summary>
        /// <remarks>
        /// 微信小程序用户通过二维码完成注册并获取访问令牌
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="qRCodeSignUpRequest">注册确认请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IConfirmQRCodeRegistrationApiResponse"/>&gt;</returns>
        Task<IConfirmQRCodeRegistrationApiResponse> ConfirmQRCodeRegistrationOrDefaultAsync(string appKey, Option<QRCodeSignUpRequest> qRCodeSignUpRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 初始化二维码认证会话
        /// </summary>
        /// <remarks>
        /// 创建用于微信小程序扫码登录/注册的认证会话
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="qRCodePreSignInRequest">认证会话初始化请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInitiateQRAuthSessionApiResponse"/>&gt;</returns>
        Task<IInitiateQRAuthSessionApiResponse> InitiateQRAuthSessionAsync(string appKey, Option<QRCodePreSignInRequest> qRCodePreSignInRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 初始化二维码认证会话
        /// </summary>
        /// <remarks>
        /// 创建用于微信小程序扫码登录/注册的认证会话
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="qRCodePreSignInRequest">认证会话初始化请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInitiateQRAuthSessionApiResponse"/>&gt;</returns>
        Task<IInitiateQRAuthSessionApiResponse> InitiateQRAuthSessionOrDefaultAsync(string appKey, Option<QRCodePreSignInRequest> qRCodePreSignInRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 验证二维码扫描结果
        /// </summary>
        /// <remarks>
        /// 微信小程序扫描二维码并获取应用授权信息
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="qRCodeScanRequest">二维码扫描请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IScanQRCodeForAuthApiResponse"/>&gt;</returns>
        Task<IScanQRCodeForAuthApiResponse> ScanQRCodeForAuthAsync(string appKey, Option<QRCodeScanRequest> qRCodeScanRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 验证二维码扫描结果
        /// </summary>
        /// <remarks>
        /// 微信小程序扫描二维码并获取应用授权信息
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="qRCodeScanRequest">二维码扫描请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IScanQRCodeForAuthApiResponse"/>&gt;</returns>
        Task<IScanQRCodeForAuthApiResponse> ScanQRCodeForAuthOrDefaultAsync(string appKey, Option<QRCodeScanRequest> qRCodeScanRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 解密小程序用户数据
        /// </summary>
        /// <remarks>
        /// 解密小程序加密数据
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="encryptedData">加密的数据 (optional)</param>
        /// <param name="iv">加密算法的初始向量 (optional)</param>
        /// <param name="sessionKey">会话密钥 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWechatDecryptApiResponse"/>&gt;</returns>
        Task<IWechatDecryptApiResponse> WechatDecryptAsync(string appKey, Option<string> encryptedData = default, Option<string> iv = default, Option<string> sessionKey = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 解密小程序用户数据
        /// </summary>
        /// <remarks>
        /// 解密小程序加密数据
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="encryptedData">加密的数据 (optional)</param>
        /// <param name="iv">加密算法的初始向量 (optional)</param>
        /// <param name="sessionKey">会话密钥 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWechatDecryptApiResponse"/>&gt;</returns>
        Task<IWechatDecryptApiResponse> WechatDecryptOrDefaultAsync(string appKey, Option<string> encryptedData = default, Option<string> iv = default, Option<string> sessionKey = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 生成小程序Scheme码
        /// </summary>
        /// <remarks>
        /// 生成小程序的scheme码
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="requestBody">scheme码数据，开发参考：https://developers.weixin.qq.com/miniprogram/dev/OpenApiDoc/qrcode-link/url-scheme/generateScheme.html (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWechatGenerateSchemeApiResponse"/>&gt;</returns>
        Task<IWechatGenerateSchemeApiResponse> WechatGenerateSchemeAsync(string appKey, Option<List<Object>> requestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 生成小程序Scheme码
        /// </summary>
        /// <remarks>
        /// 生成小程序的scheme码
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="requestBody">scheme码数据，开发参考：https://developers.weixin.qq.com/miniprogram/dev/OpenApiDoc/qrcode-link/url-scheme/generateScheme.html (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWechatGenerateSchemeApiResponse"/>&gt;</returns>
        Task<IWechatGenerateSchemeApiResponse> WechatGenerateSchemeOrDefaultAsync(string appKey, Option<List<Object>> requestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 校验小程序登录状态
        /// </summary>
        /// <remarks>
        /// 校验小程序登录凭证
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="jsCode">登录凭证，开发参考：https://dwz.cn/icNajFh7 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWechatJSCode2SessionApiResponse"/>&gt;</returns>
        Task<IWechatJSCode2SessionApiResponse> WechatJSCode2SessionAsync(string appKey, Option<string> jsCode = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 校验小程序登录状态
        /// </summary>
        /// <remarks>
        /// 校验小程序登录凭证
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="jsCode">登录凭证，开发参考：https://dwz.cn/icNajFh7 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWechatJSCode2SessionApiResponse"/>&gt;</returns>
        Task<IWechatJSCode2SessionApiResponse> WechatJSCode2SessionOrDefaultAsync(string appKey, Option<string> jsCode = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 配置公众号JS SDK
        /// </summary>
        /// <remarks>
        /// 获取公众号H5的JS SDK配置
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="url">当前网页的URL (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWechatJSConfigApiResponse"/>&gt;</returns>
        Task<IWechatJSConfigApiResponse> WechatJSConfigAsync(string appKey, Option<string> url = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 配置公众号JS SDK
        /// </summary>
        /// <remarks>
        /// 获取公众号H5的JS SDK配置
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="url">当前网页的URL (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWechatJSConfigApiResponse"/>&gt;</returns>
        Task<IWechatJSConfigApiResponse> WechatJSConfigOrDefaultAsync(string appKey, Option<string> url = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 小程序内容安全检测
        /// </summary>
        /// <remarks>
        /// 检测消息内容是否含有违法违规信息
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="requestBody">消息内容数据，开发参考：https://developers.weixin.qq.com/miniprogram/dev/OpenApiDoc/sec-center/sec-check/msgSecCheck.html (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWechatMsgSecCheckApiResponse"/>&gt;</returns>
        Task<IWechatMsgSecCheckApiResponse> WechatMsgSecCheckAsync(string appKey, Option<List<Object>> requestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 小程序内容安全检测
        /// </summary>
        /// <remarks>
        /// 检测消息内容是否含有违法违规信息
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="requestBody">消息内容数据，开发参考：https://developers.weixin.qq.com/miniprogram/dev/OpenApiDoc/sec-center/sec-check/msgSecCheck.html (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWechatMsgSecCheckApiResponse"/>&gt;</returns>
        Task<IWechatMsgSecCheckApiResponse> WechatMsgSecCheckOrDefaultAsync(string appKey, Option<List<Object>> requestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 发送公众号一次性订阅消息
        /// </summary>
        /// <remarks>
        /// 发送公众号H5一次性订阅消息
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="requestBody">订阅消息数据，开发参考：https://dwz.cn/IXptek5n (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWechatSubscribeMSGApiResponse"/>&gt;</returns>
        Task<IWechatSubscribeMSGApiResponse> WechatSubscribeMSGAsync(string appKey, Option<List<Object>> requestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 发送公众号一次性订阅消息
        /// </summary>
        /// <remarks>
        /// 发送公众号H5一次性订阅消息
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="requestBody">订阅消息数据，开发参考：https://dwz.cn/IXptek5n (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWechatSubscribeMSGApiResponse"/>&gt;</returns>
        Task<IWechatSubscribeMSGApiResponse> WechatSubscribeMSGOrDefaultAsync(string appKey, Option<List<Object>> requestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 发送小程序订阅消息
        /// </summary>
        /// <remarks>
        /// 发送小程序订阅消息
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="requestBody">订阅消息数据，开发参考：https://dwz.cn/bohXaCnp (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWechatSubscribeSendApiResponse"/>&gt;</returns>
        Task<IWechatSubscribeSendApiResponse> WechatSubscribeSendAsync(string appKey, Option<List<Object>> requestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 发送小程序订阅消息
        /// </summary>
        /// <remarks>
        /// 发送小程序订阅消息
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="requestBody">订阅消息数据，开发参考：https://dwz.cn/bohXaCnp (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWechatSubscribeSendApiResponse"/>&gt;</returns>
        Task<IWechatSubscribeSendApiResponse> WechatSubscribeSendOrDefaultAsync(string appKey, Option<List<Object>> requestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 生成小程序URL跳转链接
        /// </summary>
        /// <remarks>
        /// 生成小程序的网页跳转地址
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="requestBody">跳转地址数据，开发参考：https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/url-link/urllink.generate.html (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWechatUrlLinkGenerateApiResponse"/>&gt;</returns>
        Task<IWechatUrlLinkGenerateApiResponse> WechatUrlLinkGenerateAsync(string appKey, Option<List<Object>> requestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 生成小程序URL跳转链接
        /// </summary>
        /// <remarks>
        /// 生成小程序的网页跳转地址
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="requestBody">跳转地址数据，开发参考：https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/url-link/urllink.generate.html (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWechatUrlLinkGenerateApiResponse"/>&gt;</returns>
        Task<IWechatUrlLinkGenerateApiResponse> WechatUrlLinkGenerateOrDefaultAsync(string appKey, Option<List<Object>> requestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取公众号H5 UnionID
        /// </summary>
        /// <remarks>
        /// 获取公众号H5用户的UnionID
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="openid">用户的OpenID (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWechatUserInfoApiResponse"/>&gt;</returns>
        Task<IWechatUserInfoApiResponse> WechatUserInfoAsync(string appKey, Option<string> openid = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取公众号H5 UnionID
        /// </summary>
        /// <remarks>
        /// 获取公众号H5用户的UnionID
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="openid">用户的OpenID (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWechatUserInfoApiResponse"/>&gt;</returns>
        Task<IWechatUserInfoApiResponse> WechatUserInfoOrDefaultAsync(string appKey, Option<string> openid = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取小程序码（普通）
        /// </summary>
        /// <remarks>
        /// 获取小程序码
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="requestBody">小程序码数据，开发参考：https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/qr-code/wxacode.get.html (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWechatWXACodeGetApiResponse"/>&gt;</returns>
        Task<IWechatWXACodeGetApiResponse> WechatWXACodeGetAsync(string appKey, Option<List<Object>> requestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取小程序码（普通）
        /// </summary>
        /// <remarks>
        /// 获取小程序码
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="requestBody">小程序码数据，开发参考：https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/qr-code/wxacode.get.html (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWechatWXACodeGetApiResponse"/>&gt;</returns>
        Task<IWechatWXACodeGetApiResponse> WechatWXACodeGetOrDefaultAsync(string appKey, Option<List<Object>> requestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取小程序码（无限制）
        /// </summary>
        /// <remarks>
        /// 获取无限制的小程序码
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="requestBody">小程序码数据，开发参考：https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/qr-code/wxacode.getUnlimited.html (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWechatWXACodeGetUnlimitedApiResponse"/>&gt;</returns>
        Task<IWechatWXACodeGetUnlimitedApiResponse> WechatWXACodeGetUnlimitedAsync(string appKey, Option<List<Object>> requestBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取小程序码（无限制）
        /// </summary>
        /// <remarks>
        /// 获取无限制的小程序码
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="requestBody">小程序码数据，开发参考：https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/qr-code/wxacode.getUnlimited.html (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWechatWXACodeGetUnlimitedApiResponse"/>&gt;</returns>
        Task<IWechatWXACodeGetUnlimitedApiResponse> WechatWXACodeGetUnlimitedOrDefaultAsync(string appKey, Option<List<Object>> requestBody = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IConfirmQRCodeLoginApiResponse"/>
    /// </summary>
    public interface IConfirmQRCodeLoginApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.TokenModelApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IConfirmQRCodeRegistrationApiResponse"/>
    /// </summary>
    public interface IConfirmQRCodeRegistrationApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.TokenModelApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IInitiateQRAuthSessionApiResponse"/>
    /// </summary>
    public interface IInitiateQRAuthSessionApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.Int64ApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IScanQRCodeForAuthApiResponse"/>
    /// </summary>
    public interface IScanQRCodeForAuthApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.UserQRCodeScanResultApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IWechatDecryptApiResponse"/>
    /// </summary>
    public interface IWechatDecryptApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.StringApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IWechatGenerateSchemeApiResponse"/>
    /// </summary>
    public interface IWechatGenerateSchemeApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.StringApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IWechatJSCode2SessionApiResponse"/>
    /// </summary>
    public interface IWechatJSCode2SessionApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.StringApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IWechatJSConfigApiResponse"/>
    /// </summary>
    public interface IWechatJSConfigApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.WechatJSConfigResultApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IWechatMsgSecCheckApiResponse"/>
    /// </summary>
    public interface IWechatMsgSecCheckApiResponse : ZSGF.Client.Client.IApiResponse, IOk<Object>, IBadRequest<Object>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="IWechatSubscribeMSGApiResponse"/>
    /// </summary>
    public interface IWechatSubscribeMSGApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.StringApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IWechatSubscribeSendApiResponse"/>
    /// </summary>
    public interface IWechatSubscribeSendApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.StringApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IWechatUrlLinkGenerateApiResponse"/>
    /// </summary>
    public interface IWechatUrlLinkGenerateApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.StringApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IWechatUserInfoApiResponse"/>
    /// </summary>
    public interface IWechatUserInfoApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.StringApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IWechatWXACodeGetApiResponse"/>
    /// </summary>
    public interface IWechatWXACodeGetApiResponse : ZSGF.Client.Client.IApiResponse, IOk<System.IO.Stream>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="IWechatWXACodeGetUnlimitedApiResponse"/>
    /// </summary>
    public interface IWechatWXACodeGetUnlimitedApiResponse : ZSGF.Client.Client.IApiResponse, IOk<System.IO.Stream>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class WechatApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnConfirmQRCodeLogin;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorConfirmQRCodeLogin;

        internal void ExecuteOnConfirmQRCodeLogin(WechatApi.ConfirmQRCodeLoginApiResponse apiResponse)
        {
            OnConfirmQRCodeLogin?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorConfirmQRCodeLogin(Exception exception)
        {
            OnErrorConfirmQRCodeLogin?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnConfirmQRCodeRegistration;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorConfirmQRCodeRegistration;

        internal void ExecuteOnConfirmQRCodeRegistration(WechatApi.ConfirmQRCodeRegistrationApiResponse apiResponse)
        {
            OnConfirmQRCodeRegistration?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorConfirmQRCodeRegistration(Exception exception)
        {
            OnErrorConfirmQRCodeRegistration?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnInitiateQRAuthSession;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorInitiateQRAuthSession;

        internal void ExecuteOnInitiateQRAuthSession(WechatApi.InitiateQRAuthSessionApiResponse apiResponse)
        {
            OnInitiateQRAuthSession?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInitiateQRAuthSession(Exception exception)
        {
            OnErrorInitiateQRAuthSession?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnScanQRCodeForAuth;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorScanQRCodeForAuth;

        internal void ExecuteOnScanQRCodeForAuth(WechatApi.ScanQRCodeForAuthApiResponse apiResponse)
        {
            OnScanQRCodeForAuth?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorScanQRCodeForAuth(Exception exception)
        {
            OnErrorScanQRCodeForAuth?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnWechatDecrypt;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorWechatDecrypt;

        internal void ExecuteOnWechatDecrypt(WechatApi.WechatDecryptApiResponse apiResponse)
        {
            OnWechatDecrypt?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorWechatDecrypt(Exception exception)
        {
            OnErrorWechatDecrypt?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnWechatGenerateScheme;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorWechatGenerateScheme;

        internal void ExecuteOnWechatGenerateScheme(WechatApi.WechatGenerateSchemeApiResponse apiResponse)
        {
            OnWechatGenerateScheme?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorWechatGenerateScheme(Exception exception)
        {
            OnErrorWechatGenerateScheme?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnWechatJSCode2Session;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorWechatJSCode2Session;

        internal void ExecuteOnWechatJSCode2Session(WechatApi.WechatJSCode2SessionApiResponse apiResponse)
        {
            OnWechatJSCode2Session?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorWechatJSCode2Session(Exception exception)
        {
            OnErrorWechatJSCode2Session?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnWechatJSConfig;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorWechatJSConfig;

        internal void ExecuteOnWechatJSConfig(WechatApi.WechatJSConfigApiResponse apiResponse)
        {
            OnWechatJSConfig?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorWechatJSConfig(Exception exception)
        {
            OnErrorWechatJSConfig?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnWechatMsgSecCheck;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorWechatMsgSecCheck;

        internal void ExecuteOnWechatMsgSecCheck(WechatApi.WechatMsgSecCheckApiResponse apiResponse)
        {
            OnWechatMsgSecCheck?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorWechatMsgSecCheck(Exception exception)
        {
            OnErrorWechatMsgSecCheck?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnWechatSubscribeMSG;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorWechatSubscribeMSG;

        internal void ExecuteOnWechatSubscribeMSG(WechatApi.WechatSubscribeMSGApiResponse apiResponse)
        {
            OnWechatSubscribeMSG?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorWechatSubscribeMSG(Exception exception)
        {
            OnErrorWechatSubscribeMSG?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnWechatSubscribeSend;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorWechatSubscribeSend;

        internal void ExecuteOnWechatSubscribeSend(WechatApi.WechatSubscribeSendApiResponse apiResponse)
        {
            OnWechatSubscribeSend?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorWechatSubscribeSend(Exception exception)
        {
            OnErrorWechatSubscribeSend?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnWechatUrlLinkGenerate;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorWechatUrlLinkGenerate;

        internal void ExecuteOnWechatUrlLinkGenerate(WechatApi.WechatUrlLinkGenerateApiResponse apiResponse)
        {
            OnWechatUrlLinkGenerate?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorWechatUrlLinkGenerate(Exception exception)
        {
            OnErrorWechatUrlLinkGenerate?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnWechatUserInfo;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorWechatUserInfo;

        internal void ExecuteOnWechatUserInfo(WechatApi.WechatUserInfoApiResponse apiResponse)
        {
            OnWechatUserInfo?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorWechatUserInfo(Exception exception)
        {
            OnErrorWechatUserInfo?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnWechatWXACodeGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorWechatWXACodeGet;

        internal void ExecuteOnWechatWXACodeGet(WechatApi.WechatWXACodeGetApiResponse apiResponse)
        {
            OnWechatWXACodeGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorWechatWXACodeGet(Exception exception)
        {
            OnErrorWechatWXACodeGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnWechatWXACodeGetUnlimited;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorWechatWXACodeGetUnlimited;

        internal void ExecuteOnWechatWXACodeGetUnlimited(WechatApi.WechatWXACodeGetUnlimitedApiResponse apiResponse)
        {
            OnWechatWXACodeGetUnlimited?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorWechatWXACodeGetUnlimited(Exception exception)
        {
            OnErrorWechatWXACodeGetUnlimited?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class WechatApi : IWechatApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<WechatApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public WechatApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="WechatApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WechatApi(ILogger<WechatApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, WechatApiEvents wechatApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<WechatApi>();
            HttpClient = httpClient;
            Events = wechatApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatConfirmQRCodeLogin(ref string appKey, Option<QRCodeSignInRequest> qRCodeSignInRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="qRCodeSignInRequest"></param>
        /// <returns></returns>
        private void ValidateConfirmQRCodeLogin(string appKey, Option<QRCodeSignInRequest> qRCodeSignInRequest)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (qRCodeSignInRequest.IsSet && qRCodeSignInRequest.Value == null)
                throw new ArgumentNullException(nameof(qRCodeSignInRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="qRCodeSignInRequest"></param>
        private void AfterConfirmQRCodeLoginDefaultImplementation(IConfirmQRCodeLoginApiResponse apiResponseLocalVar, string appKey, Option<QRCodeSignInRequest> qRCodeSignInRequest)
        {
            bool suppressDefaultLog = false;
            AfterConfirmQRCodeLogin(ref suppressDefaultLog, apiResponseLocalVar, appKey, qRCodeSignInRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="qRCodeSignInRequest"></param>
        partial void AfterConfirmQRCodeLogin(ref bool suppressDefaultLog, IConfirmQRCodeLoginApiResponse apiResponseLocalVar, string appKey, Option<QRCodeSignInRequest> qRCodeSignInRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="qRCodeSignInRequest"></param>
        private void OnErrorConfirmQRCodeLoginDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<QRCodeSignInRequest> qRCodeSignInRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorConfirmQRCodeLogin(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, qRCodeSignInRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="qRCodeSignInRequest"></param>
        partial void OnErrorConfirmQRCodeLogin(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<QRCodeSignInRequest> qRCodeSignInRequest);

        /// <summary>
        /// 确认二维码登录请求 微信小程序用户确认二维码登录并获取访问令牌
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="qRCodeSignInRequest">登录确认请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IConfirmQRCodeLoginApiResponse"/>&gt;</returns>
        public async Task<IConfirmQRCodeLoginApiResponse> ConfirmQRCodeLoginOrDefaultAsync(string appKey, Option<QRCodeSignInRequest> qRCodeSignInRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ConfirmQRCodeLoginAsync(appKey, qRCodeSignInRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 确认二维码登录请求 微信小程序用户确认二维码登录并获取访问令牌
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="qRCodeSignInRequest">登录确认请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IConfirmQRCodeLoginApiResponse"/>&gt;</returns>
        public async Task<IConfirmQRCodeLoginApiResponse> ConfirmQRCodeLoginAsync(string appKey, Option<QRCodeSignInRequest> qRCodeSignInRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateConfirmQRCodeLogin(appKey, qRCodeSignInRequest);

                FormatConfirmQRCodeLogin(ref appKey, qRCodeSignInRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Wechat/{appKey}/QR-Auth/Confirm-Login";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    if (qRCodeSignInRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (qRCodeSignInRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(qRCodeSignInRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<ConfirmQRCodeLoginApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ConfirmQRCodeLoginApiResponse>();

                        ConfirmQRCodeLoginApiResponse apiResponseLocalVar = new ConfirmQRCodeLoginApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Wechat/{appKey}/QR-Auth/Confirm-Login", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterConfirmQRCodeLoginDefaultImplementation(apiResponseLocalVar, appKey, qRCodeSignInRequest);

                        Events.ExecuteOnConfirmQRCodeLogin(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorConfirmQRCodeLoginDefaultImplementation(e, "/Wechat/{appKey}/QR-Auth/Confirm-Login", uriBuilderLocalVar.Path, appKey, qRCodeSignInRequest);
                Events.ExecuteOnErrorConfirmQRCodeLogin(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ConfirmQRCodeLoginApiResponse"/>
        /// </summary>
        public partial class ConfirmQRCodeLoginApiResponse : ZSGF.Client.Client.ApiResponse, IConfirmQRCodeLoginApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ConfirmQRCodeLoginApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ConfirmQRCodeLoginApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ConfirmQRCodeLoginApiResponse(ILogger<ConfirmQRCodeLoginApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.TokenModelApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.TokenModelApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.TokenModelApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatConfirmQRCodeRegistration(ref string appKey, Option<QRCodeSignUpRequest> qRCodeSignUpRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="qRCodeSignUpRequest"></param>
        /// <returns></returns>
        private void ValidateConfirmQRCodeRegistration(string appKey, Option<QRCodeSignUpRequest> qRCodeSignUpRequest)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (qRCodeSignUpRequest.IsSet && qRCodeSignUpRequest.Value == null)
                throw new ArgumentNullException(nameof(qRCodeSignUpRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="qRCodeSignUpRequest"></param>
        private void AfterConfirmQRCodeRegistrationDefaultImplementation(IConfirmQRCodeRegistrationApiResponse apiResponseLocalVar, string appKey, Option<QRCodeSignUpRequest> qRCodeSignUpRequest)
        {
            bool suppressDefaultLog = false;
            AfterConfirmQRCodeRegistration(ref suppressDefaultLog, apiResponseLocalVar, appKey, qRCodeSignUpRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="qRCodeSignUpRequest"></param>
        partial void AfterConfirmQRCodeRegistration(ref bool suppressDefaultLog, IConfirmQRCodeRegistrationApiResponse apiResponseLocalVar, string appKey, Option<QRCodeSignUpRequest> qRCodeSignUpRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="qRCodeSignUpRequest"></param>
        private void OnErrorConfirmQRCodeRegistrationDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<QRCodeSignUpRequest> qRCodeSignUpRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorConfirmQRCodeRegistration(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, qRCodeSignUpRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="qRCodeSignUpRequest"></param>
        partial void OnErrorConfirmQRCodeRegistration(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<QRCodeSignUpRequest> qRCodeSignUpRequest);

        /// <summary>
        /// 确认二维码注册请求 微信小程序用户通过二维码完成注册并获取访问令牌
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="qRCodeSignUpRequest">注册确认请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IConfirmQRCodeRegistrationApiResponse"/>&gt;</returns>
        public async Task<IConfirmQRCodeRegistrationApiResponse> ConfirmQRCodeRegistrationOrDefaultAsync(string appKey, Option<QRCodeSignUpRequest> qRCodeSignUpRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ConfirmQRCodeRegistrationAsync(appKey, qRCodeSignUpRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 确认二维码注册请求 微信小程序用户通过二维码完成注册并获取访问令牌
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="qRCodeSignUpRequest">注册确认请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IConfirmQRCodeRegistrationApiResponse"/>&gt;</returns>
        public async Task<IConfirmQRCodeRegistrationApiResponse> ConfirmQRCodeRegistrationAsync(string appKey, Option<QRCodeSignUpRequest> qRCodeSignUpRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateConfirmQRCodeRegistration(appKey, qRCodeSignUpRequest);

                FormatConfirmQRCodeRegistration(ref appKey, qRCodeSignUpRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Wechat/{appKey}/QR-Auth/Confirm-Register";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    if (qRCodeSignUpRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (qRCodeSignUpRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(qRCodeSignUpRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<ConfirmQRCodeRegistrationApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ConfirmQRCodeRegistrationApiResponse>();

                        ConfirmQRCodeRegistrationApiResponse apiResponseLocalVar = new ConfirmQRCodeRegistrationApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Wechat/{appKey}/QR-Auth/Confirm-Register", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterConfirmQRCodeRegistrationDefaultImplementation(apiResponseLocalVar, appKey, qRCodeSignUpRequest);

                        Events.ExecuteOnConfirmQRCodeRegistration(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorConfirmQRCodeRegistrationDefaultImplementation(e, "/Wechat/{appKey}/QR-Auth/Confirm-Register", uriBuilderLocalVar.Path, appKey, qRCodeSignUpRequest);
                Events.ExecuteOnErrorConfirmQRCodeRegistration(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ConfirmQRCodeRegistrationApiResponse"/>
        /// </summary>
        public partial class ConfirmQRCodeRegistrationApiResponse : ZSGF.Client.Client.ApiResponse, IConfirmQRCodeRegistrationApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ConfirmQRCodeRegistrationApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ConfirmQRCodeRegistrationApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ConfirmQRCodeRegistrationApiResponse(ILogger<ConfirmQRCodeRegistrationApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.TokenModelApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.TokenModelApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.TokenModelApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInitiateQRAuthSession(ref string appKey, Option<QRCodePreSignInRequest> qRCodePreSignInRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="qRCodePreSignInRequest"></param>
        /// <returns></returns>
        private void ValidateInitiateQRAuthSession(string appKey, Option<QRCodePreSignInRequest> qRCodePreSignInRequest)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (qRCodePreSignInRequest.IsSet && qRCodePreSignInRequest.Value == null)
                throw new ArgumentNullException(nameof(qRCodePreSignInRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="qRCodePreSignInRequest"></param>
        private void AfterInitiateQRAuthSessionDefaultImplementation(IInitiateQRAuthSessionApiResponse apiResponseLocalVar, string appKey, Option<QRCodePreSignInRequest> qRCodePreSignInRequest)
        {
            bool suppressDefaultLog = false;
            AfterInitiateQRAuthSession(ref suppressDefaultLog, apiResponseLocalVar, appKey, qRCodePreSignInRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="qRCodePreSignInRequest"></param>
        partial void AfterInitiateQRAuthSession(ref bool suppressDefaultLog, IInitiateQRAuthSessionApiResponse apiResponseLocalVar, string appKey, Option<QRCodePreSignInRequest> qRCodePreSignInRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="qRCodePreSignInRequest"></param>
        private void OnErrorInitiateQRAuthSessionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<QRCodePreSignInRequest> qRCodePreSignInRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorInitiateQRAuthSession(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, qRCodePreSignInRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="qRCodePreSignInRequest"></param>
        partial void OnErrorInitiateQRAuthSession(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<QRCodePreSignInRequest> qRCodePreSignInRequest);

        /// <summary>
        /// 初始化二维码认证会话 创建用于微信小程序扫码登录/注册的认证会话
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="qRCodePreSignInRequest">认证会话初始化请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInitiateQRAuthSessionApiResponse"/>&gt;</returns>
        public async Task<IInitiateQRAuthSessionApiResponse> InitiateQRAuthSessionOrDefaultAsync(string appKey, Option<QRCodePreSignInRequest> qRCodePreSignInRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InitiateQRAuthSessionAsync(appKey, qRCodePreSignInRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 初始化二维码认证会话 创建用于微信小程序扫码登录/注册的认证会话
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="qRCodePreSignInRequest">认证会话初始化请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInitiateQRAuthSessionApiResponse"/>&gt;</returns>
        public async Task<IInitiateQRAuthSessionApiResponse> InitiateQRAuthSessionAsync(string appKey, Option<QRCodePreSignInRequest> qRCodePreSignInRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateInitiateQRAuthSession(appKey, qRCodePreSignInRequest);

                FormatInitiateQRAuthSession(ref appKey, qRCodePreSignInRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Wechat/{appKey}/QR-Auth/Initiate";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    if (qRCodePreSignInRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (qRCodePreSignInRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(qRCodePreSignInRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<InitiateQRAuthSessionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InitiateQRAuthSessionApiResponse>();

                        InitiateQRAuthSessionApiResponse apiResponseLocalVar = new InitiateQRAuthSessionApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Wechat/{appKey}/QR-Auth/Initiate", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInitiateQRAuthSessionDefaultImplementation(apiResponseLocalVar, appKey, qRCodePreSignInRequest);

                        Events.ExecuteOnInitiateQRAuthSession(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInitiateQRAuthSessionDefaultImplementation(e, "/Wechat/{appKey}/QR-Auth/Initiate", uriBuilderLocalVar.Path, appKey, qRCodePreSignInRequest);
                Events.ExecuteOnErrorInitiateQRAuthSession(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InitiateQRAuthSessionApiResponse"/>
        /// </summary>
        public partial class InitiateQRAuthSessionApiResponse : ZSGF.Client.Client.ApiResponse, IInitiateQRAuthSessionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InitiateQRAuthSessionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InitiateQRAuthSessionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InitiateQRAuthSessionApiResponse(ILogger<InitiateQRAuthSessionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.Int64ApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.Int64ApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.Int64ApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatScanQRCodeForAuth(ref string appKey, Option<QRCodeScanRequest> qRCodeScanRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="qRCodeScanRequest"></param>
        /// <returns></returns>
        private void ValidateScanQRCodeForAuth(string appKey, Option<QRCodeScanRequest> qRCodeScanRequest)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (qRCodeScanRequest.IsSet && qRCodeScanRequest.Value == null)
                throw new ArgumentNullException(nameof(qRCodeScanRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="qRCodeScanRequest"></param>
        private void AfterScanQRCodeForAuthDefaultImplementation(IScanQRCodeForAuthApiResponse apiResponseLocalVar, string appKey, Option<QRCodeScanRequest> qRCodeScanRequest)
        {
            bool suppressDefaultLog = false;
            AfterScanQRCodeForAuth(ref suppressDefaultLog, apiResponseLocalVar, appKey, qRCodeScanRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="qRCodeScanRequest"></param>
        partial void AfterScanQRCodeForAuth(ref bool suppressDefaultLog, IScanQRCodeForAuthApiResponse apiResponseLocalVar, string appKey, Option<QRCodeScanRequest> qRCodeScanRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="qRCodeScanRequest"></param>
        private void OnErrorScanQRCodeForAuthDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<QRCodeScanRequest> qRCodeScanRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorScanQRCodeForAuth(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, qRCodeScanRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="qRCodeScanRequest"></param>
        partial void OnErrorScanQRCodeForAuth(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<QRCodeScanRequest> qRCodeScanRequest);

        /// <summary>
        /// 验证二维码扫描结果 微信小程序扫描二维码并获取应用授权信息
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="qRCodeScanRequest">二维码扫描请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IScanQRCodeForAuthApiResponse"/>&gt;</returns>
        public async Task<IScanQRCodeForAuthApiResponse> ScanQRCodeForAuthOrDefaultAsync(string appKey, Option<QRCodeScanRequest> qRCodeScanRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ScanQRCodeForAuthAsync(appKey, qRCodeScanRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 验证二维码扫描结果 微信小程序扫描二维码并获取应用授权信息
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="qRCodeScanRequest">二维码扫描请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IScanQRCodeForAuthApiResponse"/>&gt;</returns>
        public async Task<IScanQRCodeForAuthApiResponse> ScanQRCodeForAuthAsync(string appKey, Option<QRCodeScanRequest> qRCodeScanRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateScanQRCodeForAuth(appKey, qRCodeScanRequest);

                FormatScanQRCodeForAuth(ref appKey, qRCodeScanRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Wechat/{appKey}/QR-Auth/Scan";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    if (qRCodeScanRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (qRCodeScanRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(qRCodeScanRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<ScanQRCodeForAuthApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ScanQRCodeForAuthApiResponse>();

                        ScanQRCodeForAuthApiResponse apiResponseLocalVar = new ScanQRCodeForAuthApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Wechat/{appKey}/QR-Auth/Scan", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterScanQRCodeForAuthDefaultImplementation(apiResponseLocalVar, appKey, qRCodeScanRequest);

                        Events.ExecuteOnScanQRCodeForAuth(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorScanQRCodeForAuthDefaultImplementation(e, "/Wechat/{appKey}/QR-Auth/Scan", uriBuilderLocalVar.Path, appKey, qRCodeScanRequest);
                Events.ExecuteOnErrorScanQRCodeForAuth(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ScanQRCodeForAuthApiResponse"/>
        /// </summary>
        public partial class ScanQRCodeForAuthApiResponse : ZSGF.Client.Client.ApiResponse, IScanQRCodeForAuthApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ScanQRCodeForAuthApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ScanQRCodeForAuthApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ScanQRCodeForAuthApiResponse(ILogger<ScanQRCodeForAuthApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.UserQRCodeScanResultApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.UserQRCodeScanResultApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.UserQRCodeScanResultApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatWechatDecrypt(ref string appKey, ref Option<string> encryptedData, ref Option<string> iv, ref Option<string> sessionKey);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="encryptedData"></param>
        /// <param name="iv"></param>
        /// <param name="sessionKey"></param>
        /// <returns></returns>
        private void ValidateWechatDecrypt(string appKey, Option<string> encryptedData, Option<string> iv, Option<string> sessionKey)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (encryptedData.IsSet && encryptedData.Value == null)
                throw new ArgumentNullException(nameof(encryptedData));

            if (iv.IsSet && iv.Value == null)
                throw new ArgumentNullException(nameof(iv));

            if (sessionKey.IsSet && sessionKey.Value == null)
                throw new ArgumentNullException(nameof(sessionKey));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="encryptedData"></param>
        /// <param name="iv"></param>
        /// <param name="sessionKey"></param>
        private void AfterWechatDecryptDefaultImplementation(IWechatDecryptApiResponse apiResponseLocalVar, string appKey, Option<string> encryptedData, Option<string> iv, Option<string> sessionKey)
        {
            bool suppressDefaultLog = false;
            AfterWechatDecrypt(ref suppressDefaultLog, apiResponseLocalVar, appKey, encryptedData, iv, sessionKey);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="encryptedData"></param>
        /// <param name="iv"></param>
        /// <param name="sessionKey"></param>
        partial void AfterWechatDecrypt(ref bool suppressDefaultLog, IWechatDecryptApiResponse apiResponseLocalVar, string appKey, Option<string> encryptedData, Option<string> iv, Option<string> sessionKey);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="encryptedData"></param>
        /// <param name="iv"></param>
        /// <param name="sessionKey"></param>
        private void OnErrorWechatDecryptDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<string> encryptedData, Option<string> iv, Option<string> sessionKey)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorWechatDecrypt(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, encryptedData, iv, sessionKey);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="encryptedData"></param>
        /// <param name="iv"></param>
        /// <param name="sessionKey"></param>
        partial void OnErrorWechatDecrypt(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<string> encryptedData, Option<string> iv, Option<string> sessionKey);

        /// <summary>
        /// 解密小程序用户数据 解密小程序加密数据
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="encryptedData">加密的数据 (optional)</param>
        /// <param name="iv">加密算法的初始向量 (optional)</param>
        /// <param name="sessionKey">会话密钥 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWechatDecryptApiResponse"/>&gt;</returns>
        public async Task<IWechatDecryptApiResponse> WechatDecryptOrDefaultAsync(string appKey, Option<string> encryptedData = default, Option<string> iv = default, Option<string> sessionKey = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await WechatDecryptAsync(appKey, encryptedData, iv, sessionKey, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 解密小程序用户数据 解密小程序加密数据
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="encryptedData">加密的数据 (optional)</param>
        /// <param name="iv">加密算法的初始向量 (optional)</param>
        /// <param name="sessionKey">会话密钥 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWechatDecryptApiResponse"/>&gt;</returns>
        public async Task<IWechatDecryptApiResponse> WechatDecryptAsync(string appKey, Option<string> encryptedData = default, Option<string> iv = default, Option<string> sessionKey = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateWechatDecrypt(appKey, encryptedData, iv, sessionKey);

                FormatWechatDecrypt(ref appKey, ref encryptedData, ref iv, ref sessionKey);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Wechat/{appKey}/Decrypt";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (encryptedData.IsSet)
                        parseQueryStringLocalVar["encryptedData"] = ClientUtils.ParameterToString(encryptedData.Value);

                    if (iv.IsSet)
                        parseQueryStringLocalVar["iv"] = ClientUtils.ParameterToString(iv.Value);

                    if (sessionKey.IsSet)
                        parseQueryStringLocalVar["sessionKey"] = ClientUtils.ParameterToString(sessionKey.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<WechatDecryptApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<WechatDecryptApiResponse>();

                        WechatDecryptApiResponse apiResponseLocalVar = new WechatDecryptApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Wechat/{appKey}/Decrypt", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterWechatDecryptDefaultImplementation(apiResponseLocalVar, appKey, encryptedData, iv, sessionKey);

                        Events.ExecuteOnWechatDecrypt(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorWechatDecryptDefaultImplementation(e, "/Wechat/{appKey}/Decrypt", uriBuilderLocalVar.Path, appKey, encryptedData, iv, sessionKey);
                Events.ExecuteOnErrorWechatDecrypt(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="WechatDecryptApiResponse"/>
        /// </summary>
        public partial class WechatDecryptApiResponse : ZSGF.Client.Client.ApiResponse, IWechatDecryptApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<WechatDecryptApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="WechatDecryptApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public WechatDecryptApiResponse(ILogger<WechatDecryptApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.StringApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.StringApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.StringApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatWechatGenerateScheme(ref string appKey, Option<List<Object>> requestBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="requestBody"></param>
        /// <returns></returns>
        private void ValidateWechatGenerateScheme(string appKey, Option<List<Object>> requestBody)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (requestBody.IsSet && requestBody.Value == null)
                throw new ArgumentNullException(nameof(requestBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="requestBody"></param>
        private void AfterWechatGenerateSchemeDefaultImplementation(IWechatGenerateSchemeApiResponse apiResponseLocalVar, string appKey, Option<List<Object>> requestBody)
        {
            bool suppressDefaultLog = false;
            AfterWechatGenerateScheme(ref suppressDefaultLog, apiResponseLocalVar, appKey, requestBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="requestBody"></param>
        partial void AfterWechatGenerateScheme(ref bool suppressDefaultLog, IWechatGenerateSchemeApiResponse apiResponseLocalVar, string appKey, Option<List<Object>> requestBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="requestBody"></param>
        private void OnErrorWechatGenerateSchemeDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<List<Object>> requestBody)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorWechatGenerateScheme(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, requestBody);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="requestBody"></param>
        partial void OnErrorWechatGenerateScheme(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<List<Object>> requestBody);

        /// <summary>
        /// 生成小程序Scheme码 生成小程序的scheme码
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="requestBody">scheme码数据，开发参考：https://developers.weixin.qq.com/miniprogram/dev/OpenApiDoc/qrcode-link/url-scheme/generateScheme.html (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWechatGenerateSchemeApiResponse"/>&gt;</returns>
        public async Task<IWechatGenerateSchemeApiResponse> WechatGenerateSchemeOrDefaultAsync(string appKey, Option<List<Object>> requestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await WechatGenerateSchemeAsync(appKey, requestBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 生成小程序Scheme码 生成小程序的scheme码
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="requestBody">scheme码数据，开发参考：https://developers.weixin.qq.com/miniprogram/dev/OpenApiDoc/qrcode-link/url-scheme/generateScheme.html (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWechatGenerateSchemeApiResponse"/>&gt;</returns>
        public async Task<IWechatGenerateSchemeApiResponse> WechatGenerateSchemeAsync(string appKey, Option<List<Object>> requestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateWechatGenerateScheme(appKey, requestBody);

                FormatWechatGenerateScheme(ref appKey, requestBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Wechat/{appKey}/GenerateScheme";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    if (requestBody.IsSet)
                        httpRequestMessageLocalVar.Content = (requestBody.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(requestBody.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<WechatGenerateSchemeApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<WechatGenerateSchemeApiResponse>();

                        WechatGenerateSchemeApiResponse apiResponseLocalVar = new WechatGenerateSchemeApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Wechat/{appKey}/GenerateScheme", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterWechatGenerateSchemeDefaultImplementation(apiResponseLocalVar, appKey, requestBody);

                        Events.ExecuteOnWechatGenerateScheme(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorWechatGenerateSchemeDefaultImplementation(e, "/Wechat/{appKey}/GenerateScheme", uriBuilderLocalVar.Path, appKey, requestBody);
                Events.ExecuteOnErrorWechatGenerateScheme(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="WechatGenerateSchemeApiResponse"/>
        /// </summary>
        public partial class WechatGenerateSchemeApiResponse : ZSGF.Client.Client.ApiResponse, IWechatGenerateSchemeApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<WechatGenerateSchemeApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="WechatGenerateSchemeApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public WechatGenerateSchemeApiResponse(ILogger<WechatGenerateSchemeApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.StringApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.StringApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.StringApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatWechatJSCode2Session(ref string appKey, ref Option<string> jsCode);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="jsCode"></param>
        /// <returns></returns>
        private void ValidateWechatJSCode2Session(string appKey, Option<string> jsCode)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (jsCode.IsSet && jsCode.Value == null)
                throw new ArgumentNullException(nameof(jsCode));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="jsCode"></param>
        private void AfterWechatJSCode2SessionDefaultImplementation(IWechatJSCode2SessionApiResponse apiResponseLocalVar, string appKey, Option<string> jsCode)
        {
            bool suppressDefaultLog = false;
            AfterWechatJSCode2Session(ref suppressDefaultLog, apiResponseLocalVar, appKey, jsCode);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="jsCode"></param>
        partial void AfterWechatJSCode2Session(ref bool suppressDefaultLog, IWechatJSCode2SessionApiResponse apiResponseLocalVar, string appKey, Option<string> jsCode);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="jsCode"></param>
        private void OnErrorWechatJSCode2SessionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<string> jsCode)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorWechatJSCode2Session(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, jsCode);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="jsCode"></param>
        partial void OnErrorWechatJSCode2Session(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<string> jsCode);

        /// <summary>
        /// 校验小程序登录状态 校验小程序登录凭证
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="jsCode">登录凭证，开发参考：https://dwz.cn/icNajFh7 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWechatJSCode2SessionApiResponse"/>&gt;</returns>
        public async Task<IWechatJSCode2SessionApiResponse> WechatJSCode2SessionOrDefaultAsync(string appKey, Option<string> jsCode = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await WechatJSCode2SessionAsync(appKey, jsCode, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 校验小程序登录状态 校验小程序登录凭证
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="jsCode">登录凭证，开发参考：https://dwz.cn/icNajFh7 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWechatJSCode2SessionApiResponse"/>&gt;</returns>
        public async Task<IWechatJSCode2SessionApiResponse> WechatJSCode2SessionAsync(string appKey, Option<string> jsCode = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateWechatJSCode2Session(appKey, jsCode);

                FormatWechatJSCode2Session(ref appKey, ref jsCode);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Wechat/{appKey}/JSCode2Session";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (jsCode.IsSet)
                        parseQueryStringLocalVar["js_code"] = ClientUtils.ParameterToString(jsCode.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<WechatJSCode2SessionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<WechatJSCode2SessionApiResponse>();

                        WechatJSCode2SessionApiResponse apiResponseLocalVar = new WechatJSCode2SessionApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Wechat/{appKey}/JSCode2Session", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterWechatJSCode2SessionDefaultImplementation(apiResponseLocalVar, appKey, jsCode);

                        Events.ExecuteOnWechatJSCode2Session(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorWechatJSCode2SessionDefaultImplementation(e, "/Wechat/{appKey}/JSCode2Session", uriBuilderLocalVar.Path, appKey, jsCode);
                Events.ExecuteOnErrorWechatJSCode2Session(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="WechatJSCode2SessionApiResponse"/>
        /// </summary>
        public partial class WechatJSCode2SessionApiResponse : ZSGF.Client.Client.ApiResponse, IWechatJSCode2SessionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<WechatJSCode2SessionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="WechatJSCode2SessionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public WechatJSCode2SessionApiResponse(ILogger<WechatJSCode2SessionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.StringApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.StringApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.StringApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatWechatJSConfig(ref string appKey, ref Option<string> url);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="url"></param>
        /// <returns></returns>
        private void ValidateWechatJSConfig(string appKey, Option<string> url)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="url"></param>
        private void AfterWechatJSConfigDefaultImplementation(IWechatJSConfigApiResponse apiResponseLocalVar, string appKey, Option<string> url)
        {
            bool suppressDefaultLog = false;
            AfterWechatJSConfig(ref suppressDefaultLog, apiResponseLocalVar, appKey, url);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="url"></param>
        partial void AfterWechatJSConfig(ref bool suppressDefaultLog, IWechatJSConfigApiResponse apiResponseLocalVar, string appKey, Option<string> url);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="url"></param>
        private void OnErrorWechatJSConfigDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<string> url)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorWechatJSConfig(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, url);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="url"></param>
        partial void OnErrorWechatJSConfig(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<string> url);

        /// <summary>
        /// 配置公众号JS SDK 获取公众号H5的JS SDK配置
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="url">当前网页的URL (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWechatJSConfigApiResponse"/>&gt;</returns>
        public async Task<IWechatJSConfigApiResponse> WechatJSConfigOrDefaultAsync(string appKey, Option<string> url = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await WechatJSConfigAsync(appKey, url, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 配置公众号JS SDK 获取公众号H5的JS SDK配置
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="url">当前网页的URL (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWechatJSConfigApiResponse"/>&gt;</returns>
        public async Task<IWechatJSConfigApiResponse> WechatJSConfigAsync(string appKey, Option<string> url = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateWechatJSConfig(appKey, url);

                FormatWechatJSConfig(ref appKey, ref url);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Wechat/{appKey}/JSConfig";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (url.IsSet)
                        parseQueryStringLocalVar["url"] = ClientUtils.ParameterToString(url.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<WechatJSConfigApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<WechatJSConfigApiResponse>();

                        WechatJSConfigApiResponse apiResponseLocalVar = new WechatJSConfigApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Wechat/{appKey}/JSConfig", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterWechatJSConfigDefaultImplementation(apiResponseLocalVar, appKey, url);

                        Events.ExecuteOnWechatJSConfig(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorWechatJSConfigDefaultImplementation(e, "/Wechat/{appKey}/JSConfig", uriBuilderLocalVar.Path, appKey, url);
                Events.ExecuteOnErrorWechatJSConfig(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="WechatJSConfigApiResponse"/>
        /// </summary>
        public partial class WechatJSConfigApiResponse : ZSGF.Client.Client.ApiResponse, IWechatJSConfigApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<WechatJSConfigApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="WechatJSConfigApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public WechatJSConfigApiResponse(ILogger<WechatJSConfigApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.WechatJSConfigResultApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.WechatJSConfigResultApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.WechatJSConfigResultApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatWechatMsgSecCheck(ref string appKey, Option<List<Object>> requestBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="requestBody"></param>
        /// <returns></returns>
        private void ValidateWechatMsgSecCheck(string appKey, Option<List<Object>> requestBody)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (requestBody.IsSet && requestBody.Value == null)
                throw new ArgumentNullException(nameof(requestBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="requestBody"></param>
        private void AfterWechatMsgSecCheckDefaultImplementation(IWechatMsgSecCheckApiResponse apiResponseLocalVar, string appKey, Option<List<Object>> requestBody)
        {
            bool suppressDefaultLog = false;
            AfterWechatMsgSecCheck(ref suppressDefaultLog, apiResponseLocalVar, appKey, requestBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="requestBody"></param>
        partial void AfterWechatMsgSecCheck(ref bool suppressDefaultLog, IWechatMsgSecCheckApiResponse apiResponseLocalVar, string appKey, Option<List<Object>> requestBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="requestBody"></param>
        private void OnErrorWechatMsgSecCheckDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<List<Object>> requestBody)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorWechatMsgSecCheck(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, requestBody);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="requestBody"></param>
        partial void OnErrorWechatMsgSecCheck(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<List<Object>> requestBody);

        /// <summary>
        /// 小程序内容安全检测 检测消息内容是否含有违法违规信息
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="requestBody">消息内容数据，开发参考：https://developers.weixin.qq.com/miniprogram/dev/OpenApiDoc/sec-center/sec-check/msgSecCheck.html (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWechatMsgSecCheckApiResponse"/>&gt;</returns>
        public async Task<IWechatMsgSecCheckApiResponse> WechatMsgSecCheckOrDefaultAsync(string appKey, Option<List<Object>> requestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await WechatMsgSecCheckAsync(appKey, requestBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 小程序内容安全检测 检测消息内容是否含有违法违规信息
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="requestBody">消息内容数据，开发参考：https://developers.weixin.qq.com/miniprogram/dev/OpenApiDoc/sec-center/sec-check/msgSecCheck.html (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWechatMsgSecCheckApiResponse"/>&gt;</returns>
        public async Task<IWechatMsgSecCheckApiResponse> WechatMsgSecCheckAsync(string appKey, Option<List<Object>> requestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateWechatMsgSecCheck(appKey, requestBody);

                FormatWechatMsgSecCheck(ref appKey, requestBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Wechat/{appKey}/MsgSecCheck";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    if (requestBody.IsSet)
                        httpRequestMessageLocalVar.Content = (requestBody.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(requestBody.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<WechatMsgSecCheckApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<WechatMsgSecCheckApiResponse>();

                        WechatMsgSecCheckApiResponse apiResponseLocalVar = new WechatMsgSecCheckApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Wechat/{appKey}/MsgSecCheck", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterWechatMsgSecCheckDefaultImplementation(apiResponseLocalVar, appKey, requestBody);

                        Events.ExecuteOnWechatMsgSecCheck(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorWechatMsgSecCheckDefaultImplementation(e, "/Wechat/{appKey}/MsgSecCheck", uriBuilderLocalVar.Path, appKey, requestBody);
                Events.ExecuteOnErrorWechatMsgSecCheck(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="WechatMsgSecCheckApiResponse"/>
        /// </summary>
        public partial class WechatMsgSecCheckApiResponse : ZSGF.Client.Client.ApiResponse, IWechatMsgSecCheckApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<WechatMsgSecCheckApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="WechatMsgSecCheckApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public WechatMsgSecCheckApiResponse(ILogger<WechatMsgSecCheckApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Object result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Object BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Object result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatWechatSubscribeMSG(ref string appKey, Option<List<Object>> requestBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="requestBody"></param>
        /// <returns></returns>
        private void ValidateWechatSubscribeMSG(string appKey, Option<List<Object>> requestBody)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (requestBody.IsSet && requestBody.Value == null)
                throw new ArgumentNullException(nameof(requestBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="requestBody"></param>
        private void AfterWechatSubscribeMSGDefaultImplementation(IWechatSubscribeMSGApiResponse apiResponseLocalVar, string appKey, Option<List<Object>> requestBody)
        {
            bool suppressDefaultLog = false;
            AfterWechatSubscribeMSG(ref suppressDefaultLog, apiResponseLocalVar, appKey, requestBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="requestBody"></param>
        partial void AfterWechatSubscribeMSG(ref bool suppressDefaultLog, IWechatSubscribeMSGApiResponse apiResponseLocalVar, string appKey, Option<List<Object>> requestBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="requestBody"></param>
        private void OnErrorWechatSubscribeMSGDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<List<Object>> requestBody)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorWechatSubscribeMSG(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, requestBody);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="requestBody"></param>
        partial void OnErrorWechatSubscribeMSG(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<List<Object>> requestBody);

        /// <summary>
        /// 发送公众号一次性订阅消息 发送公众号H5一次性订阅消息
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="requestBody">订阅消息数据，开发参考：https://dwz.cn/IXptek5n (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWechatSubscribeMSGApiResponse"/>&gt;</returns>
        public async Task<IWechatSubscribeMSGApiResponse> WechatSubscribeMSGOrDefaultAsync(string appKey, Option<List<Object>> requestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await WechatSubscribeMSGAsync(appKey, requestBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 发送公众号一次性订阅消息 发送公众号H5一次性订阅消息
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="requestBody">订阅消息数据，开发参考：https://dwz.cn/IXptek5n (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWechatSubscribeMSGApiResponse"/>&gt;</returns>
        public async Task<IWechatSubscribeMSGApiResponse> WechatSubscribeMSGAsync(string appKey, Option<List<Object>> requestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateWechatSubscribeMSG(appKey, requestBody);

                FormatWechatSubscribeMSG(ref appKey, requestBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Wechat/{appKey}/SubscribeMSG";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    if (requestBody.IsSet)
                        httpRequestMessageLocalVar.Content = (requestBody.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(requestBody.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<WechatSubscribeMSGApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<WechatSubscribeMSGApiResponse>();

                        WechatSubscribeMSGApiResponse apiResponseLocalVar = new WechatSubscribeMSGApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Wechat/{appKey}/SubscribeMSG", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterWechatSubscribeMSGDefaultImplementation(apiResponseLocalVar, appKey, requestBody);

                        Events.ExecuteOnWechatSubscribeMSG(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorWechatSubscribeMSGDefaultImplementation(e, "/Wechat/{appKey}/SubscribeMSG", uriBuilderLocalVar.Path, appKey, requestBody);
                Events.ExecuteOnErrorWechatSubscribeMSG(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="WechatSubscribeMSGApiResponse"/>
        /// </summary>
        public partial class WechatSubscribeMSGApiResponse : ZSGF.Client.Client.ApiResponse, IWechatSubscribeMSGApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<WechatSubscribeMSGApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="WechatSubscribeMSGApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public WechatSubscribeMSGApiResponse(ILogger<WechatSubscribeMSGApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.StringApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.StringApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.StringApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatWechatSubscribeSend(ref string appKey, Option<List<Object>> requestBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="requestBody"></param>
        /// <returns></returns>
        private void ValidateWechatSubscribeSend(string appKey, Option<List<Object>> requestBody)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (requestBody.IsSet && requestBody.Value == null)
                throw new ArgumentNullException(nameof(requestBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="requestBody"></param>
        private void AfterWechatSubscribeSendDefaultImplementation(IWechatSubscribeSendApiResponse apiResponseLocalVar, string appKey, Option<List<Object>> requestBody)
        {
            bool suppressDefaultLog = false;
            AfterWechatSubscribeSend(ref suppressDefaultLog, apiResponseLocalVar, appKey, requestBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="requestBody"></param>
        partial void AfterWechatSubscribeSend(ref bool suppressDefaultLog, IWechatSubscribeSendApiResponse apiResponseLocalVar, string appKey, Option<List<Object>> requestBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="requestBody"></param>
        private void OnErrorWechatSubscribeSendDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<List<Object>> requestBody)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorWechatSubscribeSend(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, requestBody);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="requestBody"></param>
        partial void OnErrorWechatSubscribeSend(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<List<Object>> requestBody);

        /// <summary>
        /// 发送小程序订阅消息 发送小程序订阅消息
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="requestBody">订阅消息数据，开发参考：https://dwz.cn/bohXaCnp (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWechatSubscribeSendApiResponse"/>&gt;</returns>
        public async Task<IWechatSubscribeSendApiResponse> WechatSubscribeSendOrDefaultAsync(string appKey, Option<List<Object>> requestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await WechatSubscribeSendAsync(appKey, requestBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 发送小程序订阅消息 发送小程序订阅消息
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="requestBody">订阅消息数据，开发参考：https://dwz.cn/bohXaCnp (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWechatSubscribeSendApiResponse"/>&gt;</returns>
        public async Task<IWechatSubscribeSendApiResponse> WechatSubscribeSendAsync(string appKey, Option<List<Object>> requestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateWechatSubscribeSend(appKey, requestBody);

                FormatWechatSubscribeSend(ref appKey, requestBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Wechat/{appKey}/SubscribeSend";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    if (requestBody.IsSet)
                        httpRequestMessageLocalVar.Content = (requestBody.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(requestBody.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<WechatSubscribeSendApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<WechatSubscribeSendApiResponse>();

                        WechatSubscribeSendApiResponse apiResponseLocalVar = new WechatSubscribeSendApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Wechat/{appKey}/SubscribeSend", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterWechatSubscribeSendDefaultImplementation(apiResponseLocalVar, appKey, requestBody);

                        Events.ExecuteOnWechatSubscribeSend(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorWechatSubscribeSendDefaultImplementation(e, "/Wechat/{appKey}/SubscribeSend", uriBuilderLocalVar.Path, appKey, requestBody);
                Events.ExecuteOnErrorWechatSubscribeSend(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="WechatSubscribeSendApiResponse"/>
        /// </summary>
        public partial class WechatSubscribeSendApiResponse : ZSGF.Client.Client.ApiResponse, IWechatSubscribeSendApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<WechatSubscribeSendApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="WechatSubscribeSendApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public WechatSubscribeSendApiResponse(ILogger<WechatSubscribeSendApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.StringApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.StringApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.StringApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatWechatUrlLinkGenerate(ref string appKey, Option<List<Object>> requestBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="requestBody"></param>
        /// <returns></returns>
        private void ValidateWechatUrlLinkGenerate(string appKey, Option<List<Object>> requestBody)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (requestBody.IsSet && requestBody.Value == null)
                throw new ArgumentNullException(nameof(requestBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="requestBody"></param>
        private void AfterWechatUrlLinkGenerateDefaultImplementation(IWechatUrlLinkGenerateApiResponse apiResponseLocalVar, string appKey, Option<List<Object>> requestBody)
        {
            bool suppressDefaultLog = false;
            AfterWechatUrlLinkGenerate(ref suppressDefaultLog, apiResponseLocalVar, appKey, requestBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="requestBody"></param>
        partial void AfterWechatUrlLinkGenerate(ref bool suppressDefaultLog, IWechatUrlLinkGenerateApiResponse apiResponseLocalVar, string appKey, Option<List<Object>> requestBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="requestBody"></param>
        private void OnErrorWechatUrlLinkGenerateDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<List<Object>> requestBody)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorWechatUrlLinkGenerate(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, requestBody);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="requestBody"></param>
        partial void OnErrorWechatUrlLinkGenerate(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<List<Object>> requestBody);

        /// <summary>
        /// 生成小程序URL跳转链接 生成小程序的网页跳转地址
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="requestBody">跳转地址数据，开发参考：https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/url-link/urllink.generate.html (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWechatUrlLinkGenerateApiResponse"/>&gt;</returns>
        public async Task<IWechatUrlLinkGenerateApiResponse> WechatUrlLinkGenerateOrDefaultAsync(string appKey, Option<List<Object>> requestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await WechatUrlLinkGenerateAsync(appKey, requestBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 生成小程序URL跳转链接 生成小程序的网页跳转地址
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="requestBody">跳转地址数据，开发参考：https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/url-link/urllink.generate.html (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWechatUrlLinkGenerateApiResponse"/>&gt;</returns>
        public async Task<IWechatUrlLinkGenerateApiResponse> WechatUrlLinkGenerateAsync(string appKey, Option<List<Object>> requestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateWechatUrlLinkGenerate(appKey, requestBody);

                FormatWechatUrlLinkGenerate(ref appKey, requestBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Wechat/{appKey}/UrlLinkGenerate";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    if (requestBody.IsSet)
                        httpRequestMessageLocalVar.Content = (requestBody.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(requestBody.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<WechatUrlLinkGenerateApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<WechatUrlLinkGenerateApiResponse>();

                        WechatUrlLinkGenerateApiResponse apiResponseLocalVar = new WechatUrlLinkGenerateApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Wechat/{appKey}/UrlLinkGenerate", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterWechatUrlLinkGenerateDefaultImplementation(apiResponseLocalVar, appKey, requestBody);

                        Events.ExecuteOnWechatUrlLinkGenerate(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorWechatUrlLinkGenerateDefaultImplementation(e, "/Wechat/{appKey}/UrlLinkGenerate", uriBuilderLocalVar.Path, appKey, requestBody);
                Events.ExecuteOnErrorWechatUrlLinkGenerate(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="WechatUrlLinkGenerateApiResponse"/>
        /// </summary>
        public partial class WechatUrlLinkGenerateApiResponse : ZSGF.Client.Client.ApiResponse, IWechatUrlLinkGenerateApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<WechatUrlLinkGenerateApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="WechatUrlLinkGenerateApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public WechatUrlLinkGenerateApiResponse(ILogger<WechatUrlLinkGenerateApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.StringApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.StringApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.StringApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatWechatUserInfo(ref string appKey, ref Option<string> openid);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="openid"></param>
        /// <returns></returns>
        private void ValidateWechatUserInfo(string appKey, Option<string> openid)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (openid.IsSet && openid.Value == null)
                throw new ArgumentNullException(nameof(openid));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="openid"></param>
        private void AfterWechatUserInfoDefaultImplementation(IWechatUserInfoApiResponse apiResponseLocalVar, string appKey, Option<string> openid)
        {
            bool suppressDefaultLog = false;
            AfterWechatUserInfo(ref suppressDefaultLog, apiResponseLocalVar, appKey, openid);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="openid"></param>
        partial void AfterWechatUserInfo(ref bool suppressDefaultLog, IWechatUserInfoApiResponse apiResponseLocalVar, string appKey, Option<string> openid);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="openid"></param>
        private void OnErrorWechatUserInfoDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<string> openid)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorWechatUserInfo(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, openid);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="openid"></param>
        partial void OnErrorWechatUserInfo(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<string> openid);

        /// <summary>
        /// 获取公众号H5 UnionID 获取公众号H5用户的UnionID
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="openid">用户的OpenID (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWechatUserInfoApiResponse"/>&gt;</returns>
        public async Task<IWechatUserInfoApiResponse> WechatUserInfoOrDefaultAsync(string appKey, Option<string> openid = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await WechatUserInfoAsync(appKey, openid, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取公众号H5 UnionID 获取公众号H5用户的UnionID
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="openid">用户的OpenID (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWechatUserInfoApiResponse"/>&gt;</returns>
        public async Task<IWechatUserInfoApiResponse> WechatUserInfoAsync(string appKey, Option<string> openid = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateWechatUserInfo(appKey, openid);

                FormatWechatUserInfo(ref appKey, ref openid);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Wechat/{appKey}/UserInfo";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (openid.IsSet)
                        parseQueryStringLocalVar["openid"] = ClientUtils.ParameterToString(openid.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<WechatUserInfoApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<WechatUserInfoApiResponse>();

                        WechatUserInfoApiResponse apiResponseLocalVar = new WechatUserInfoApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Wechat/{appKey}/UserInfo", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterWechatUserInfoDefaultImplementation(apiResponseLocalVar, appKey, openid);

                        Events.ExecuteOnWechatUserInfo(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorWechatUserInfoDefaultImplementation(e, "/Wechat/{appKey}/UserInfo", uriBuilderLocalVar.Path, appKey, openid);
                Events.ExecuteOnErrorWechatUserInfo(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="WechatUserInfoApiResponse"/>
        /// </summary>
        public partial class WechatUserInfoApiResponse : ZSGF.Client.Client.ApiResponse, IWechatUserInfoApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<WechatUserInfoApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="WechatUserInfoApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public WechatUserInfoApiResponse(ILogger<WechatUserInfoApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.StringApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.StringApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.StringApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatWechatWXACodeGet(ref string appKey, Option<List<Object>> requestBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="requestBody"></param>
        /// <returns></returns>
        private void ValidateWechatWXACodeGet(string appKey, Option<List<Object>> requestBody)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (requestBody.IsSet && requestBody.Value == null)
                throw new ArgumentNullException(nameof(requestBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="requestBody"></param>
        private void AfterWechatWXACodeGetDefaultImplementation(IWechatWXACodeGetApiResponse apiResponseLocalVar, string appKey, Option<List<Object>> requestBody)
        {
            bool suppressDefaultLog = false;
            AfterWechatWXACodeGet(ref suppressDefaultLog, apiResponseLocalVar, appKey, requestBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="requestBody"></param>
        partial void AfterWechatWXACodeGet(ref bool suppressDefaultLog, IWechatWXACodeGetApiResponse apiResponseLocalVar, string appKey, Option<List<Object>> requestBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="requestBody"></param>
        private void OnErrorWechatWXACodeGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<List<Object>> requestBody)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorWechatWXACodeGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, requestBody);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="requestBody"></param>
        partial void OnErrorWechatWXACodeGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<List<Object>> requestBody);

        /// <summary>
        /// 获取小程序码（普通） 获取小程序码
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="requestBody">小程序码数据，开发参考：https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/qr-code/wxacode.get.html (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWechatWXACodeGetApiResponse"/>&gt;</returns>
        public async Task<IWechatWXACodeGetApiResponse> WechatWXACodeGetOrDefaultAsync(string appKey, Option<List<Object>> requestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await WechatWXACodeGetAsync(appKey, requestBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取小程序码（普通） 获取小程序码
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="requestBody">小程序码数据，开发参考：https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/qr-code/wxacode.get.html (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWechatWXACodeGetApiResponse"/>&gt;</returns>
        public async Task<IWechatWXACodeGetApiResponse> WechatWXACodeGetAsync(string appKey, Option<List<Object>> requestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateWechatWXACodeGet(appKey, requestBody);

                FormatWechatWXACodeGet(ref appKey, requestBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Wechat/{appKey}/WXACodeGet";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    if (requestBody.IsSet)
                        httpRequestMessageLocalVar.Content = (requestBody.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(requestBody.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "image/jpeg"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<WechatWXACodeGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<WechatWXACodeGetApiResponse>();

                        WechatWXACodeGetApiResponse apiResponseLocalVar = new WechatWXACodeGetApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Wechat/{appKey}/WXACodeGet", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterWechatWXACodeGetDefaultImplementation(apiResponseLocalVar, appKey, requestBody);

                        Events.ExecuteOnWechatWXACodeGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorWechatWXACodeGetDefaultImplementation(e, "/Wechat/{appKey}/WXACodeGet", uriBuilderLocalVar.Path, appKey, requestBody);
                Events.ExecuteOnErrorWechatWXACodeGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="WechatWXACodeGetApiResponse"/>
        /// </summary>
        public partial class WechatWXACodeGetApiResponse : ZSGF.Client.Client.ApiResponse, IWechatWXACodeGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<WechatWXACodeGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="WechatWXACodeGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public WechatWXACodeGetApiResponse(ILogger<WechatWXACodeGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public System.IO.Stream Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<System.IO.Stream>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out System.IO.Stream result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatWechatWXACodeGetUnlimited(ref string appKey, Option<List<Object>> requestBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="requestBody"></param>
        /// <returns></returns>
        private void ValidateWechatWXACodeGetUnlimited(string appKey, Option<List<Object>> requestBody)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (requestBody.IsSet && requestBody.Value == null)
                throw new ArgumentNullException(nameof(requestBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="requestBody"></param>
        private void AfterWechatWXACodeGetUnlimitedDefaultImplementation(IWechatWXACodeGetUnlimitedApiResponse apiResponseLocalVar, string appKey, Option<List<Object>> requestBody)
        {
            bool suppressDefaultLog = false;
            AfterWechatWXACodeGetUnlimited(ref suppressDefaultLog, apiResponseLocalVar, appKey, requestBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="requestBody"></param>
        partial void AfterWechatWXACodeGetUnlimited(ref bool suppressDefaultLog, IWechatWXACodeGetUnlimitedApiResponse apiResponseLocalVar, string appKey, Option<List<Object>> requestBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="requestBody"></param>
        private void OnErrorWechatWXACodeGetUnlimitedDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<List<Object>> requestBody)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorWechatWXACodeGetUnlimited(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, requestBody);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="requestBody"></param>
        partial void OnErrorWechatWXACodeGetUnlimited(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<List<Object>> requestBody);

        /// <summary>
        /// 获取小程序码（无限制） 获取无限制的小程序码
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="requestBody">小程序码数据，开发参考：https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/qr-code/wxacode.getUnlimited.html (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWechatWXACodeGetUnlimitedApiResponse"/>&gt;</returns>
        public async Task<IWechatWXACodeGetUnlimitedApiResponse> WechatWXACodeGetUnlimitedOrDefaultAsync(string appKey, Option<List<Object>> requestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await WechatWXACodeGetUnlimitedAsync(appKey, requestBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取小程序码（无限制） 获取无限制的小程序码
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="requestBody">小程序码数据，开发参考：https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/qr-code/wxacode.getUnlimited.html (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWechatWXACodeGetUnlimitedApiResponse"/>&gt;</returns>
        public async Task<IWechatWXACodeGetUnlimitedApiResponse> WechatWXACodeGetUnlimitedAsync(string appKey, Option<List<Object>> requestBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateWechatWXACodeGetUnlimited(appKey, requestBody);

                FormatWechatWXACodeGetUnlimited(ref appKey, requestBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Wechat/{appKey}/WXACodeGetUnlimited";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    if (requestBody.IsSet)
                        httpRequestMessageLocalVar.Content = (requestBody.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(requestBody.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "image/jpeg"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<WechatWXACodeGetUnlimitedApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<WechatWXACodeGetUnlimitedApiResponse>();

                        WechatWXACodeGetUnlimitedApiResponse apiResponseLocalVar = new WechatWXACodeGetUnlimitedApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Wechat/{appKey}/WXACodeGetUnlimited", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterWechatWXACodeGetUnlimitedDefaultImplementation(apiResponseLocalVar, appKey, requestBody);

                        Events.ExecuteOnWechatWXACodeGetUnlimited(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorWechatWXACodeGetUnlimitedDefaultImplementation(e, "/Wechat/{appKey}/WXACodeGetUnlimited", uriBuilderLocalVar.Path, appKey, requestBody);
                Events.ExecuteOnErrorWechatWXACodeGetUnlimited(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="WechatWXACodeGetUnlimitedApiResponse"/>
        /// </summary>
        public partial class WechatWXACodeGetUnlimitedApiResponse : ZSGF.Client.Client.ApiResponse, IWechatWXACodeGetUnlimitedApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<WechatWXACodeGetUnlimitedApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="WechatWXACodeGetUnlimitedApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public WechatWXACodeGetUnlimitedApiResponse(ILogger<WechatWXACodeGetUnlimitedApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public System.IO.Stream Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<System.IO.Stream>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out System.IO.Stream result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
