// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using ZSGF.Client.Client;
using ZSGF.Client.Model;

namespace ZSGF.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IUserApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        UserApiEvents Events { get; }

        /// <summary>
        /// 注销账号
        /// </summary>
        /// <remarks>
        /// 清除用户所有附属数据，并注销账号
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserDeactivateHardApiResponse"/>&gt;</returns>
        Task<IUserDeactivateHardApiResponse> UserDeactivateHardAsync(string appKey, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 注销账号
        /// </summary>
        /// <remarks>
        /// 清除用户所有附属数据，并注销账号
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserDeactivateHardApiResponse"/>&gt;</returns>
        Task<IUserDeactivateHardApiResponse> UserDeactivateHardOrDefaultAsync(string appKey, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 邮箱登录
        /// </summary>
        /// <remarks>
        /// 使用邮箱进行登录
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="emailSignInRequest">登录请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserEmailSignInApiResponse"/>&gt;</returns>
        Task<IUserEmailSignInApiResponse> UserEmailSignInAsync(string appKey, Option<EmailSignInRequest> emailSignInRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 邮箱登录
        /// </summary>
        /// <remarks>
        /// 使用邮箱进行登录
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="emailSignInRequest">登录请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserEmailSignInApiResponse"/>&gt;</returns>
        Task<IUserEmailSignInApiResponse> UserEmailSignInOrDefaultAsync(string appKey, Option<EmailSignInRequest> emailSignInRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 邮箱注册
        /// </summary>
        /// <remarks>
        /// 使用邮箱进行注册
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="emailSignUpRequest">注册请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserEmailSignUpApiResponse"/>&gt;</returns>
        Task<IUserEmailSignUpApiResponse> UserEmailSignUpAsync(string appKey, Option<EmailSignUpRequest> emailSignUpRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 邮箱注册
        /// </summary>
        /// <remarks>
        /// 使用邮箱进行注册
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="emailSignUpRequest">注册请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserEmailSignUpApiResponse"/>&gt;</returns>
        Task<IUserEmailSignUpApiResponse> UserEmailSignUpOrDefaultAsync(string appKey, Option<EmailSignUpRequest> emailSignUpRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 手机登录
        /// </summary>
        /// <remarks>
        /// 使用手机号码进行登录
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="phoneSignInRequest">登录请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserPhoneSignInApiResponse"/>&gt;</returns>
        Task<IUserPhoneSignInApiResponse> UserPhoneSignInAsync(string appKey, Option<PhoneSignInRequest> phoneSignInRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 手机登录
        /// </summary>
        /// <remarks>
        /// 使用手机号码进行登录
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="phoneSignInRequest">登录请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserPhoneSignInApiResponse"/>&gt;</returns>
        Task<IUserPhoneSignInApiResponse> UserPhoneSignInOrDefaultAsync(string appKey, Option<PhoneSignInRequest> phoneSignInRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 手机注册
        /// </summary>
        /// <remarks>
        /// 使用手机号码进行注册
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="phoneSignUpRequest">注册请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserPhoneSignUpApiResponse"/>&gt;</returns>
        Task<IUserPhoneSignUpApiResponse> UserPhoneSignUpAsync(string appKey, Option<PhoneSignUpRequest> phoneSignUpRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 手机注册
        /// </summary>
        /// <remarks>
        /// 使用手机号码进行注册
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="phoneSignUpRequest">注册请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserPhoneSignUpApiResponse"/>&gt;</returns>
        Task<IUserPhoneSignUpApiResponse> UserPhoneSignUpOrDefaultAsync(string appKey, Option<PhoneSignUpRequest> phoneSignUpRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取个人资料
        /// </summary>
        /// <remarks>
        /// 获取当前用户的个人资料
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserProfileApiResponse"/>&gt;</returns>
        Task<IUserProfileApiResponse> UserProfileAsync(string appKey, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取个人资料
        /// </summary>
        /// <remarks>
        /// 获取当前用户的个人资料
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserProfileApiResponse"/>&gt;</returns>
        Task<IUserProfileApiResponse> UserProfileOrDefaultAsync(string appKey, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 重置邮箱
        /// </summary>
        /// <remarks>
        /// 通过邮箱验证码重置邮箱
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="appUserResetEmailRequest">重置邮箱的请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserResetEmailApiResponse"/>&gt;</returns>
        Task<IUserResetEmailApiResponse> UserResetEmailAsync(string appKey, Option<AppUserResetEmailRequest> appUserResetEmailRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 重置邮箱
        /// </summary>
        /// <remarks>
        /// 通过邮箱验证码重置邮箱
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="appUserResetEmailRequest">重置邮箱的请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserResetEmailApiResponse"/>&gt;</returns>
        Task<IUserResetEmailApiResponse> UserResetEmailOrDefaultAsync(string appKey, Option<AppUserResetEmailRequest> appUserResetEmailRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 重置手机号
        /// </summary>
        /// <remarks>
        /// 通过手机号验证码重置手机号
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="appUserResetPhoneRequest">重置手机号的请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserResetPhoneApiResponse"/>&gt;</returns>
        Task<IUserResetPhoneApiResponse> UserResetPhoneAsync(string appKey, Option<AppUserResetPhoneRequest> appUserResetPhoneRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 重置手机号
        /// </summary>
        /// <remarks>
        /// 通过手机号验证码重置手机号
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="appUserResetPhoneRequest">重置手机号的请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserResetPhoneApiResponse"/>&gt;</returns>
        Task<IUserResetPhoneApiResponse> UserResetPhoneOrDefaultAsync(string appKey, Option<AppUserResetPhoneRequest> appUserResetPhoneRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 重置密码
        /// </summary>
        /// <remarks>
        /// 通过手机号或邮箱重置密码
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="appUserResetPwdRequest">重置密码的请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserResetPwdApiResponse"/>&gt;</returns>
        Task<IUserResetPwdApiResponse> UserResetPwdAsync(string appKey, Option<AppUserResetPwdRequest> appUserResetPwdRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 重置密码
        /// </summary>
        /// <remarks>
        /// 通过手机号或邮箱重置密码
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="appUserResetPwdRequest">重置密码的请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserResetPwdApiResponse"/>&gt;</returns>
        Task<IUserResetPwdApiResponse> UserResetPwdOrDefaultAsync(string appKey, Option<AppUserResetPwdRequest> appUserResetPwdRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 发送邮箱验证码
        /// </summary>
        /// <remarks>
        /// 发送邮箱验证码用于注册或找回密码
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="sendEmailCodeRequest">发送邮箱验证码的请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserSendEmailCodeApiResponse"/>&gt;</returns>
        Task<IUserSendEmailCodeApiResponse> UserSendEmailCodeAsync(string appKey, Option<SendEmailCodeRequest> sendEmailCodeRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 发送邮箱验证码
        /// </summary>
        /// <remarks>
        /// 发送邮箱验证码用于注册或找回密码
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="sendEmailCodeRequest">发送邮箱验证码的请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserSendEmailCodeApiResponse"/>&gt;</returns>
        Task<IUserSendEmailCodeApiResponse> UserSendEmailCodeOrDefaultAsync(string appKey, Option<SendEmailCodeRequest> sendEmailCodeRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 发送手机验证码
        /// </summary>
        /// <remarks>
        /// 发送手机验证码用于注册或找回密码
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="sendSMSCodeRequest">发送手机验证码的请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserSendSMSCodeApiResponse"/>&gt;</returns>
        Task<IUserSendSMSCodeApiResponse> UserSendSMSCodeAsync(string appKey, Option<SendSMSCodeRequest> sendSMSCodeRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 发送手机验证码
        /// </summary>
        /// <remarks>
        /// 发送手机验证码用于注册或找回密码
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="sendSMSCodeRequest">发送手机验证码的请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserSendSMSCodeApiResponse"/>&gt;</returns>
        Task<IUserSendSMSCodeApiResponse> UserSendSMSCodeOrDefaultAsync(string appKey, Option<SendSMSCodeRequest> sendSMSCodeRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 密码登录
        /// </summary>
        /// <remarks>
        /// 使用账号密码进行登录
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="signInRequest">登录请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserSignInApiResponse"/>&gt;</returns>
        Task<IUserSignInApiResponse> UserSignInAsync(string appKey, Option<SignInRequest> signInRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 密码登录
        /// </summary>
        /// <remarks>
        /// 使用账号密码进行登录
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="signInRequest">登录请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserSignInApiResponse"/>&gt;</returns>
        Task<IUserSignInApiResponse> UserSignInOrDefaultAsync(string appKey, Option<SignInRequest> signInRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 账号注册
        /// </summary>
        /// <remarks>
        /// 使用账号密码进行注册
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="signUpRequest">注册请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserSignUpApiResponse"/>&gt;</returns>
        Task<IUserSignUpApiResponse> UserSignUpAsync(string appKey, Option<SignUpRequest> signUpRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 账号注册
        /// </summary>
        /// <remarks>
        /// 使用账号密码进行注册
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="signUpRequest">注册请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserSignUpApiResponse"/>&gt;</returns>
        Task<IUserSignUpApiResponse> UserSignUpOrDefaultAsync(string appKey, Option<SignUpRequest> signUpRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 二次验证
        /// </summary>
        /// <remarks>
        /// 获取当前用户在指定应用下启用二次验证（2FA）所需的设置信息，主要包括二维码链接和手动密钥，用户可以将其录入在 Google Authenticator 等 TOTP 应用中，用于后续动态验证码验证。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserTwoFactorAuthApiResponse"/>&gt;</returns>
        Task<IUserTwoFactorAuthApiResponse> UserTwoFactorAuthAsync(string appKey, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 二次验证
        /// </summary>
        /// <remarks>
        /// 获取当前用户在指定应用下启用二次验证（2FA）所需的设置信息，主要包括二维码链接和手动密钥，用户可以将其录入在 Google Authenticator 等 TOTP 应用中，用于后续动态验证码验证。
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserTwoFactorAuthApiResponse"/>&gt;</returns>
        Task<IUserTwoFactorAuthApiResponse> UserTwoFactorAuthOrDefaultAsync(string appKey, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// UnionID登录
        /// </summary>
        /// <remarks>
        /// 使用UnionID进行登录
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="unionIDSignInRequest">登录请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserUnionIDSignInApiResponse"/>&gt;</returns>
        Task<IUserUnionIDSignInApiResponse> UserUnionIDSignInAsync(string appKey, Option<UnionIDSignInRequest> unionIDSignInRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// UnionID登录
        /// </summary>
        /// <remarks>
        /// 使用UnionID进行登录
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="unionIDSignInRequest">登录请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserUnionIDSignInApiResponse"/>&gt;</returns>
        Task<IUserUnionIDSignInApiResponse> UserUnionIDSignInOrDefaultAsync(string appKey, Option<UnionIDSignInRequest> unionIDSignInRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// UnionID注册
        /// </summary>
        /// <remarks>
        /// 使用UnionID进行注册
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="unionIDSignUpRequest">注册请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserUnionIDSignUpApiResponse"/>&gt;</returns>
        Task<IUserUnionIDSignUpApiResponse> UserUnionIDSignUpAsync(string appKey, Option<UnionIDSignUpRequest> unionIDSignUpRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// UnionID注册
        /// </summary>
        /// <remarks>
        /// 使用UnionID进行注册
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="unionIDSignUpRequest">注册请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserUnionIDSignUpApiResponse"/>&gt;</returns>
        Task<IUserUnionIDSignUpApiResponse> UserUnionIDSignUpOrDefaultAsync(string appKey, Option<UnionIDSignUpRequest> unionIDSignUpRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 更新个人资料
        /// </summary>
        /// <remarks>
        /// 更新当前用户的个人资料
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="updateProfileRequest">更新个人资料的请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserUpdateProfileApiResponse"/>&gt;</returns>
        Task<IUserUpdateProfileApiResponse> UserUpdateProfileAsync(string appKey, Option<UpdateProfileRequest> updateProfileRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 更新个人资料
        /// </summary>
        /// <remarks>
        /// 更新当前用户的个人资料
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="updateProfileRequest">更新个人资料的请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserUpdateProfileApiResponse"/>&gt;</returns>
        Task<IUserUpdateProfileApiResponse> UserUpdateProfileOrDefaultAsync(string appKey, Option<UpdateProfileRequest> updateProfileRequest = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IUserDeactivateHardApiResponse"/>
    /// </summary>
    public interface IUserDeactivateHardApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.BooleanApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUserEmailSignInApiResponse"/>
    /// </summary>
    public interface IUserEmailSignInApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.TokenModelApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUserEmailSignUpApiResponse"/>
    /// </summary>
    public interface IUserEmailSignUpApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.TokenModelApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUserPhoneSignInApiResponse"/>
    /// </summary>
    public interface IUserPhoneSignInApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.TokenModelApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUserPhoneSignUpApiResponse"/>
    /// </summary>
    public interface IUserPhoneSignUpApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.TokenModelApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUserProfileApiResponse"/>
    /// </summary>
    public interface IUserProfileApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.UserProfileResultApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUserResetEmailApiResponse"/>
    /// </summary>
    public interface IUserResetEmailApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.BooleanApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUserResetPhoneApiResponse"/>
    /// </summary>
    public interface IUserResetPhoneApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.BooleanApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUserResetPwdApiResponse"/>
    /// </summary>
    public interface IUserResetPwdApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.BooleanApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUserSendEmailCodeApiResponse"/>
    /// </summary>
    public interface IUserSendEmailCodeApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.BooleanApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUserSendSMSCodeApiResponse"/>
    /// </summary>
    public interface IUserSendSMSCodeApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.BooleanApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUserSignInApiResponse"/>
    /// </summary>
    public interface IUserSignInApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.TokenModelApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUserSignUpApiResponse"/>
    /// </summary>
    public interface IUserSignUpApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.TokenModelApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUserTwoFactorAuthApiResponse"/>
    /// </summary>
    public interface IUserTwoFactorAuthApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.SetupCodeApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUserUnionIDSignInApiResponse"/>
    /// </summary>
    public interface IUserUnionIDSignInApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.TokenModelApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUserUnionIDSignUpApiResponse"/>
    /// </summary>
    public interface IUserUnionIDSignUpApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.TokenModelApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUserUpdateProfileApiResponse"/>
    /// </summary>
    public interface IUserUpdateProfileApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.BooleanApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class UserApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUserDeactivateHard;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUserDeactivateHard;

        internal void ExecuteOnUserDeactivateHard(UserApi.UserDeactivateHardApiResponse apiResponse)
        {
            OnUserDeactivateHard?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUserDeactivateHard(Exception exception)
        {
            OnErrorUserDeactivateHard?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUserEmailSignIn;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUserEmailSignIn;

        internal void ExecuteOnUserEmailSignIn(UserApi.UserEmailSignInApiResponse apiResponse)
        {
            OnUserEmailSignIn?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUserEmailSignIn(Exception exception)
        {
            OnErrorUserEmailSignIn?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUserEmailSignUp;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUserEmailSignUp;

        internal void ExecuteOnUserEmailSignUp(UserApi.UserEmailSignUpApiResponse apiResponse)
        {
            OnUserEmailSignUp?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUserEmailSignUp(Exception exception)
        {
            OnErrorUserEmailSignUp?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUserPhoneSignIn;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUserPhoneSignIn;

        internal void ExecuteOnUserPhoneSignIn(UserApi.UserPhoneSignInApiResponse apiResponse)
        {
            OnUserPhoneSignIn?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUserPhoneSignIn(Exception exception)
        {
            OnErrorUserPhoneSignIn?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUserPhoneSignUp;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUserPhoneSignUp;

        internal void ExecuteOnUserPhoneSignUp(UserApi.UserPhoneSignUpApiResponse apiResponse)
        {
            OnUserPhoneSignUp?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUserPhoneSignUp(Exception exception)
        {
            OnErrorUserPhoneSignUp?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUserProfile;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUserProfile;

        internal void ExecuteOnUserProfile(UserApi.UserProfileApiResponse apiResponse)
        {
            OnUserProfile?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUserProfile(Exception exception)
        {
            OnErrorUserProfile?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUserResetEmail;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUserResetEmail;

        internal void ExecuteOnUserResetEmail(UserApi.UserResetEmailApiResponse apiResponse)
        {
            OnUserResetEmail?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUserResetEmail(Exception exception)
        {
            OnErrorUserResetEmail?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUserResetPhone;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUserResetPhone;

        internal void ExecuteOnUserResetPhone(UserApi.UserResetPhoneApiResponse apiResponse)
        {
            OnUserResetPhone?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUserResetPhone(Exception exception)
        {
            OnErrorUserResetPhone?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUserResetPwd;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUserResetPwd;

        internal void ExecuteOnUserResetPwd(UserApi.UserResetPwdApiResponse apiResponse)
        {
            OnUserResetPwd?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUserResetPwd(Exception exception)
        {
            OnErrorUserResetPwd?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUserSendEmailCode;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUserSendEmailCode;

        internal void ExecuteOnUserSendEmailCode(UserApi.UserSendEmailCodeApiResponse apiResponse)
        {
            OnUserSendEmailCode?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUserSendEmailCode(Exception exception)
        {
            OnErrorUserSendEmailCode?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUserSendSMSCode;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUserSendSMSCode;

        internal void ExecuteOnUserSendSMSCode(UserApi.UserSendSMSCodeApiResponse apiResponse)
        {
            OnUserSendSMSCode?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUserSendSMSCode(Exception exception)
        {
            OnErrorUserSendSMSCode?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUserSignIn;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUserSignIn;

        internal void ExecuteOnUserSignIn(UserApi.UserSignInApiResponse apiResponse)
        {
            OnUserSignIn?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUserSignIn(Exception exception)
        {
            OnErrorUserSignIn?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUserSignUp;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUserSignUp;

        internal void ExecuteOnUserSignUp(UserApi.UserSignUpApiResponse apiResponse)
        {
            OnUserSignUp?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUserSignUp(Exception exception)
        {
            OnErrorUserSignUp?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUserTwoFactorAuth;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUserTwoFactorAuth;

        internal void ExecuteOnUserTwoFactorAuth(UserApi.UserTwoFactorAuthApiResponse apiResponse)
        {
            OnUserTwoFactorAuth?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUserTwoFactorAuth(Exception exception)
        {
            OnErrorUserTwoFactorAuth?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUserUnionIDSignIn;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUserUnionIDSignIn;

        internal void ExecuteOnUserUnionIDSignIn(UserApi.UserUnionIDSignInApiResponse apiResponse)
        {
            OnUserUnionIDSignIn?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUserUnionIDSignIn(Exception exception)
        {
            OnErrorUserUnionIDSignIn?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUserUnionIDSignUp;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUserUnionIDSignUp;

        internal void ExecuteOnUserUnionIDSignUp(UserApi.UserUnionIDSignUpApiResponse apiResponse)
        {
            OnUserUnionIDSignUp?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUserUnionIDSignUp(Exception exception)
        {
            OnErrorUserUnionIDSignUp?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUserUpdateProfile;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUserUpdateProfile;

        internal void ExecuteOnUserUpdateProfile(UserApi.UserUpdateProfileApiResponse apiResponse)
        {
            OnUserUpdateProfile?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUserUpdateProfile(Exception exception)
        {
            OnErrorUserUpdateProfile?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class UserApi : IUserApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<UserApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public UserApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserApi(ILogger<UserApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, UserApiEvents userApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<UserApi>();
            HttpClient = httpClient;
            Events = userApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatUserDeactivateHard(ref string appKey);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <returns></returns>
        private void ValidateUserDeactivateHard(string appKey)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        private void AfterUserDeactivateHardDefaultImplementation(IUserDeactivateHardApiResponse apiResponseLocalVar, string appKey)
        {
            bool suppressDefaultLog = false;
            AfterUserDeactivateHard(ref suppressDefaultLog, apiResponseLocalVar, appKey);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        partial void AfterUserDeactivateHard(ref bool suppressDefaultLog, IUserDeactivateHardApiResponse apiResponseLocalVar, string appKey);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        private void OnErrorUserDeactivateHardDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUserDeactivateHard(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        partial void OnErrorUserDeactivateHard(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey);

        /// <summary>
        /// 注销账号 清除用户所有附属数据，并注销账号
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserDeactivateHardApiResponse"/>&gt;</returns>
        public async Task<IUserDeactivateHardApiResponse> UserDeactivateHardOrDefaultAsync(string appKey, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UserDeactivateHardAsync(appKey, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 注销账号 清除用户所有附属数据，并注销账号
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserDeactivateHardApiResponse"/>&gt;</returns>
        public async Task<IUserDeactivateHardApiResponse> UserDeactivateHardAsync(string appKey, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUserDeactivateHard(appKey);

                FormatUserDeactivateHard(ref appKey);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/User/{appKey}/DeactivateHard";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UserDeactivateHardApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UserDeactivateHardApiResponse>();

                        UserDeactivateHardApiResponse apiResponseLocalVar = new UserDeactivateHardApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/User/{appKey}/DeactivateHard", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUserDeactivateHardDefaultImplementation(apiResponseLocalVar, appKey);

                        Events.ExecuteOnUserDeactivateHard(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUserDeactivateHardDefaultImplementation(e, "/User/{appKey}/DeactivateHard", uriBuilderLocalVar.Path, appKey);
                Events.ExecuteOnErrorUserDeactivateHard(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UserDeactivateHardApiResponse"/>
        /// </summary>
        public partial class UserDeactivateHardApiResponse : ZSGF.Client.Client.ApiResponse, IUserDeactivateHardApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UserDeactivateHardApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UserDeactivateHardApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UserDeactivateHardApiResponse(ILogger<UserDeactivateHardApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.BooleanApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.BooleanApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.BooleanApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUserEmailSignIn(ref string appKey, Option<EmailSignInRequest> emailSignInRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="emailSignInRequest"></param>
        /// <returns></returns>
        private void ValidateUserEmailSignIn(string appKey, Option<EmailSignInRequest> emailSignInRequest)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (emailSignInRequest.IsSet && emailSignInRequest.Value == null)
                throw new ArgumentNullException(nameof(emailSignInRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="emailSignInRequest"></param>
        private void AfterUserEmailSignInDefaultImplementation(IUserEmailSignInApiResponse apiResponseLocalVar, string appKey, Option<EmailSignInRequest> emailSignInRequest)
        {
            bool suppressDefaultLog = false;
            AfterUserEmailSignIn(ref suppressDefaultLog, apiResponseLocalVar, appKey, emailSignInRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="emailSignInRequest"></param>
        partial void AfterUserEmailSignIn(ref bool suppressDefaultLog, IUserEmailSignInApiResponse apiResponseLocalVar, string appKey, Option<EmailSignInRequest> emailSignInRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="emailSignInRequest"></param>
        private void OnErrorUserEmailSignInDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<EmailSignInRequest> emailSignInRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUserEmailSignIn(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, emailSignInRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="emailSignInRequest"></param>
        partial void OnErrorUserEmailSignIn(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<EmailSignInRequest> emailSignInRequest);

        /// <summary>
        /// 邮箱登录 使用邮箱进行登录
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="emailSignInRequest">登录请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserEmailSignInApiResponse"/>&gt;</returns>
        public async Task<IUserEmailSignInApiResponse> UserEmailSignInOrDefaultAsync(string appKey, Option<EmailSignInRequest> emailSignInRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UserEmailSignInAsync(appKey, emailSignInRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 邮箱登录 使用邮箱进行登录
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="emailSignInRequest">登录请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserEmailSignInApiResponse"/>&gt;</returns>
        public async Task<IUserEmailSignInApiResponse> UserEmailSignInAsync(string appKey, Option<EmailSignInRequest> emailSignInRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUserEmailSignIn(appKey, emailSignInRequest);

                FormatUserEmailSignIn(ref appKey, emailSignInRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/User/{appKey}/EmailSignIn";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    if (emailSignInRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (emailSignInRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(emailSignInRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UserEmailSignInApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UserEmailSignInApiResponse>();

                        UserEmailSignInApiResponse apiResponseLocalVar = new UserEmailSignInApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/User/{appKey}/EmailSignIn", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUserEmailSignInDefaultImplementation(apiResponseLocalVar, appKey, emailSignInRequest);

                        Events.ExecuteOnUserEmailSignIn(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUserEmailSignInDefaultImplementation(e, "/User/{appKey}/EmailSignIn", uriBuilderLocalVar.Path, appKey, emailSignInRequest);
                Events.ExecuteOnErrorUserEmailSignIn(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UserEmailSignInApiResponse"/>
        /// </summary>
        public partial class UserEmailSignInApiResponse : ZSGF.Client.Client.ApiResponse, IUserEmailSignInApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UserEmailSignInApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UserEmailSignInApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UserEmailSignInApiResponse(ILogger<UserEmailSignInApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.TokenModelApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.TokenModelApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.TokenModelApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUserEmailSignUp(ref string appKey, Option<EmailSignUpRequest> emailSignUpRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="emailSignUpRequest"></param>
        /// <returns></returns>
        private void ValidateUserEmailSignUp(string appKey, Option<EmailSignUpRequest> emailSignUpRequest)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (emailSignUpRequest.IsSet && emailSignUpRequest.Value == null)
                throw new ArgumentNullException(nameof(emailSignUpRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="emailSignUpRequest"></param>
        private void AfterUserEmailSignUpDefaultImplementation(IUserEmailSignUpApiResponse apiResponseLocalVar, string appKey, Option<EmailSignUpRequest> emailSignUpRequest)
        {
            bool suppressDefaultLog = false;
            AfterUserEmailSignUp(ref suppressDefaultLog, apiResponseLocalVar, appKey, emailSignUpRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="emailSignUpRequest"></param>
        partial void AfterUserEmailSignUp(ref bool suppressDefaultLog, IUserEmailSignUpApiResponse apiResponseLocalVar, string appKey, Option<EmailSignUpRequest> emailSignUpRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="emailSignUpRequest"></param>
        private void OnErrorUserEmailSignUpDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<EmailSignUpRequest> emailSignUpRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUserEmailSignUp(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, emailSignUpRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="emailSignUpRequest"></param>
        partial void OnErrorUserEmailSignUp(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<EmailSignUpRequest> emailSignUpRequest);

        /// <summary>
        /// 邮箱注册 使用邮箱进行注册
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="emailSignUpRequest">注册请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserEmailSignUpApiResponse"/>&gt;</returns>
        public async Task<IUserEmailSignUpApiResponse> UserEmailSignUpOrDefaultAsync(string appKey, Option<EmailSignUpRequest> emailSignUpRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UserEmailSignUpAsync(appKey, emailSignUpRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 邮箱注册 使用邮箱进行注册
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="emailSignUpRequest">注册请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserEmailSignUpApiResponse"/>&gt;</returns>
        public async Task<IUserEmailSignUpApiResponse> UserEmailSignUpAsync(string appKey, Option<EmailSignUpRequest> emailSignUpRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUserEmailSignUp(appKey, emailSignUpRequest);

                FormatUserEmailSignUp(ref appKey, emailSignUpRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/User/{appKey}/EmailSignUp";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    if (emailSignUpRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (emailSignUpRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(emailSignUpRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UserEmailSignUpApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UserEmailSignUpApiResponse>();

                        UserEmailSignUpApiResponse apiResponseLocalVar = new UserEmailSignUpApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/User/{appKey}/EmailSignUp", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUserEmailSignUpDefaultImplementation(apiResponseLocalVar, appKey, emailSignUpRequest);

                        Events.ExecuteOnUserEmailSignUp(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUserEmailSignUpDefaultImplementation(e, "/User/{appKey}/EmailSignUp", uriBuilderLocalVar.Path, appKey, emailSignUpRequest);
                Events.ExecuteOnErrorUserEmailSignUp(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UserEmailSignUpApiResponse"/>
        /// </summary>
        public partial class UserEmailSignUpApiResponse : ZSGF.Client.Client.ApiResponse, IUserEmailSignUpApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UserEmailSignUpApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UserEmailSignUpApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UserEmailSignUpApiResponse(ILogger<UserEmailSignUpApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.TokenModelApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.TokenModelApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.TokenModelApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUserPhoneSignIn(ref string appKey, Option<PhoneSignInRequest> phoneSignInRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="phoneSignInRequest"></param>
        /// <returns></returns>
        private void ValidateUserPhoneSignIn(string appKey, Option<PhoneSignInRequest> phoneSignInRequest)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (phoneSignInRequest.IsSet && phoneSignInRequest.Value == null)
                throw new ArgumentNullException(nameof(phoneSignInRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="phoneSignInRequest"></param>
        private void AfterUserPhoneSignInDefaultImplementation(IUserPhoneSignInApiResponse apiResponseLocalVar, string appKey, Option<PhoneSignInRequest> phoneSignInRequest)
        {
            bool suppressDefaultLog = false;
            AfterUserPhoneSignIn(ref suppressDefaultLog, apiResponseLocalVar, appKey, phoneSignInRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="phoneSignInRequest"></param>
        partial void AfterUserPhoneSignIn(ref bool suppressDefaultLog, IUserPhoneSignInApiResponse apiResponseLocalVar, string appKey, Option<PhoneSignInRequest> phoneSignInRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="phoneSignInRequest"></param>
        private void OnErrorUserPhoneSignInDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<PhoneSignInRequest> phoneSignInRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUserPhoneSignIn(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, phoneSignInRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="phoneSignInRequest"></param>
        partial void OnErrorUserPhoneSignIn(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<PhoneSignInRequest> phoneSignInRequest);

        /// <summary>
        /// 手机登录 使用手机号码进行登录
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="phoneSignInRequest">登录请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserPhoneSignInApiResponse"/>&gt;</returns>
        public async Task<IUserPhoneSignInApiResponse> UserPhoneSignInOrDefaultAsync(string appKey, Option<PhoneSignInRequest> phoneSignInRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UserPhoneSignInAsync(appKey, phoneSignInRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 手机登录 使用手机号码进行登录
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="phoneSignInRequest">登录请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserPhoneSignInApiResponse"/>&gt;</returns>
        public async Task<IUserPhoneSignInApiResponse> UserPhoneSignInAsync(string appKey, Option<PhoneSignInRequest> phoneSignInRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUserPhoneSignIn(appKey, phoneSignInRequest);

                FormatUserPhoneSignIn(ref appKey, phoneSignInRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/User/{appKey}/PhoneSignIn";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    if (phoneSignInRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (phoneSignInRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(phoneSignInRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UserPhoneSignInApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UserPhoneSignInApiResponse>();

                        UserPhoneSignInApiResponse apiResponseLocalVar = new UserPhoneSignInApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/User/{appKey}/PhoneSignIn", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUserPhoneSignInDefaultImplementation(apiResponseLocalVar, appKey, phoneSignInRequest);

                        Events.ExecuteOnUserPhoneSignIn(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUserPhoneSignInDefaultImplementation(e, "/User/{appKey}/PhoneSignIn", uriBuilderLocalVar.Path, appKey, phoneSignInRequest);
                Events.ExecuteOnErrorUserPhoneSignIn(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UserPhoneSignInApiResponse"/>
        /// </summary>
        public partial class UserPhoneSignInApiResponse : ZSGF.Client.Client.ApiResponse, IUserPhoneSignInApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UserPhoneSignInApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UserPhoneSignInApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UserPhoneSignInApiResponse(ILogger<UserPhoneSignInApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.TokenModelApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.TokenModelApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.TokenModelApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUserPhoneSignUp(ref string appKey, Option<PhoneSignUpRequest> phoneSignUpRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="phoneSignUpRequest"></param>
        /// <returns></returns>
        private void ValidateUserPhoneSignUp(string appKey, Option<PhoneSignUpRequest> phoneSignUpRequest)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (phoneSignUpRequest.IsSet && phoneSignUpRequest.Value == null)
                throw new ArgumentNullException(nameof(phoneSignUpRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="phoneSignUpRequest"></param>
        private void AfterUserPhoneSignUpDefaultImplementation(IUserPhoneSignUpApiResponse apiResponseLocalVar, string appKey, Option<PhoneSignUpRequest> phoneSignUpRequest)
        {
            bool suppressDefaultLog = false;
            AfterUserPhoneSignUp(ref suppressDefaultLog, apiResponseLocalVar, appKey, phoneSignUpRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="phoneSignUpRequest"></param>
        partial void AfterUserPhoneSignUp(ref bool suppressDefaultLog, IUserPhoneSignUpApiResponse apiResponseLocalVar, string appKey, Option<PhoneSignUpRequest> phoneSignUpRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="phoneSignUpRequest"></param>
        private void OnErrorUserPhoneSignUpDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<PhoneSignUpRequest> phoneSignUpRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUserPhoneSignUp(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, phoneSignUpRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="phoneSignUpRequest"></param>
        partial void OnErrorUserPhoneSignUp(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<PhoneSignUpRequest> phoneSignUpRequest);

        /// <summary>
        /// 手机注册 使用手机号码进行注册
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="phoneSignUpRequest">注册请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserPhoneSignUpApiResponse"/>&gt;</returns>
        public async Task<IUserPhoneSignUpApiResponse> UserPhoneSignUpOrDefaultAsync(string appKey, Option<PhoneSignUpRequest> phoneSignUpRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UserPhoneSignUpAsync(appKey, phoneSignUpRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 手机注册 使用手机号码进行注册
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="phoneSignUpRequest">注册请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserPhoneSignUpApiResponse"/>&gt;</returns>
        public async Task<IUserPhoneSignUpApiResponse> UserPhoneSignUpAsync(string appKey, Option<PhoneSignUpRequest> phoneSignUpRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUserPhoneSignUp(appKey, phoneSignUpRequest);

                FormatUserPhoneSignUp(ref appKey, phoneSignUpRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/User/{appKey}/PhoneSignUp";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    if (phoneSignUpRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (phoneSignUpRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(phoneSignUpRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UserPhoneSignUpApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UserPhoneSignUpApiResponse>();

                        UserPhoneSignUpApiResponse apiResponseLocalVar = new UserPhoneSignUpApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/User/{appKey}/PhoneSignUp", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUserPhoneSignUpDefaultImplementation(apiResponseLocalVar, appKey, phoneSignUpRequest);

                        Events.ExecuteOnUserPhoneSignUp(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUserPhoneSignUpDefaultImplementation(e, "/User/{appKey}/PhoneSignUp", uriBuilderLocalVar.Path, appKey, phoneSignUpRequest);
                Events.ExecuteOnErrorUserPhoneSignUp(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UserPhoneSignUpApiResponse"/>
        /// </summary>
        public partial class UserPhoneSignUpApiResponse : ZSGF.Client.Client.ApiResponse, IUserPhoneSignUpApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UserPhoneSignUpApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UserPhoneSignUpApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UserPhoneSignUpApiResponse(ILogger<UserPhoneSignUpApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.TokenModelApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.TokenModelApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.TokenModelApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUserProfile(ref string appKey);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <returns></returns>
        private void ValidateUserProfile(string appKey)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        private void AfterUserProfileDefaultImplementation(IUserProfileApiResponse apiResponseLocalVar, string appKey)
        {
            bool suppressDefaultLog = false;
            AfterUserProfile(ref suppressDefaultLog, apiResponseLocalVar, appKey);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        partial void AfterUserProfile(ref bool suppressDefaultLog, IUserProfileApiResponse apiResponseLocalVar, string appKey);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        private void OnErrorUserProfileDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUserProfile(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        partial void OnErrorUserProfile(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey);

        /// <summary>
        /// 获取个人资料 获取当前用户的个人资料
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserProfileApiResponse"/>&gt;</returns>
        public async Task<IUserProfileApiResponse> UserProfileOrDefaultAsync(string appKey, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UserProfileAsync(appKey, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取个人资料 获取当前用户的个人资料
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserProfileApiResponse"/>&gt;</returns>
        public async Task<IUserProfileApiResponse> UserProfileAsync(string appKey, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUserProfile(appKey);

                FormatUserProfile(ref appKey);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/User/{appKey}/Profile";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UserProfileApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UserProfileApiResponse>();

                        UserProfileApiResponse apiResponseLocalVar = new UserProfileApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/User/{appKey}/Profile", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUserProfileDefaultImplementation(apiResponseLocalVar, appKey);

                        Events.ExecuteOnUserProfile(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUserProfileDefaultImplementation(e, "/User/{appKey}/Profile", uriBuilderLocalVar.Path, appKey);
                Events.ExecuteOnErrorUserProfile(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UserProfileApiResponse"/>
        /// </summary>
        public partial class UserProfileApiResponse : ZSGF.Client.Client.ApiResponse, IUserProfileApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UserProfileApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UserProfileApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UserProfileApiResponse(ILogger<UserProfileApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.UserProfileResultApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.UserProfileResultApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.UserProfileResultApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUserResetEmail(ref string appKey, Option<AppUserResetEmailRequest> appUserResetEmailRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="appUserResetEmailRequest"></param>
        /// <returns></returns>
        private void ValidateUserResetEmail(string appKey, Option<AppUserResetEmailRequest> appUserResetEmailRequest)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (appUserResetEmailRequest.IsSet && appUserResetEmailRequest.Value == null)
                throw new ArgumentNullException(nameof(appUserResetEmailRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="appUserResetEmailRequest"></param>
        private void AfterUserResetEmailDefaultImplementation(IUserResetEmailApiResponse apiResponseLocalVar, string appKey, Option<AppUserResetEmailRequest> appUserResetEmailRequest)
        {
            bool suppressDefaultLog = false;
            AfterUserResetEmail(ref suppressDefaultLog, apiResponseLocalVar, appKey, appUserResetEmailRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="appUserResetEmailRequest"></param>
        partial void AfterUserResetEmail(ref bool suppressDefaultLog, IUserResetEmailApiResponse apiResponseLocalVar, string appKey, Option<AppUserResetEmailRequest> appUserResetEmailRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="appUserResetEmailRequest"></param>
        private void OnErrorUserResetEmailDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<AppUserResetEmailRequest> appUserResetEmailRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUserResetEmail(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, appUserResetEmailRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="appUserResetEmailRequest"></param>
        partial void OnErrorUserResetEmail(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<AppUserResetEmailRequest> appUserResetEmailRequest);

        /// <summary>
        /// 重置邮箱 通过邮箱验证码重置邮箱
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="appUserResetEmailRequest">重置邮箱的请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserResetEmailApiResponse"/>&gt;</returns>
        public async Task<IUserResetEmailApiResponse> UserResetEmailOrDefaultAsync(string appKey, Option<AppUserResetEmailRequest> appUserResetEmailRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UserResetEmailAsync(appKey, appUserResetEmailRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 重置邮箱 通过邮箱验证码重置邮箱
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="appUserResetEmailRequest">重置邮箱的请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserResetEmailApiResponse"/>&gt;</returns>
        public async Task<IUserResetEmailApiResponse> UserResetEmailAsync(string appKey, Option<AppUserResetEmailRequest> appUserResetEmailRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUserResetEmail(appKey, appUserResetEmailRequest);

                FormatUserResetEmail(ref appKey, appUserResetEmailRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/User/{appKey}/ResetEmail";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    if (appUserResetEmailRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (appUserResetEmailRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(appUserResetEmailRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PUT");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UserResetEmailApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UserResetEmailApiResponse>();

                        UserResetEmailApiResponse apiResponseLocalVar = new UserResetEmailApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/User/{appKey}/ResetEmail", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUserResetEmailDefaultImplementation(apiResponseLocalVar, appKey, appUserResetEmailRequest);

                        Events.ExecuteOnUserResetEmail(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUserResetEmailDefaultImplementation(e, "/User/{appKey}/ResetEmail", uriBuilderLocalVar.Path, appKey, appUserResetEmailRequest);
                Events.ExecuteOnErrorUserResetEmail(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UserResetEmailApiResponse"/>
        /// </summary>
        public partial class UserResetEmailApiResponse : ZSGF.Client.Client.ApiResponse, IUserResetEmailApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UserResetEmailApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UserResetEmailApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UserResetEmailApiResponse(ILogger<UserResetEmailApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.BooleanApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.BooleanApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.BooleanApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUserResetPhone(ref string appKey, Option<AppUserResetPhoneRequest> appUserResetPhoneRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="appUserResetPhoneRequest"></param>
        /// <returns></returns>
        private void ValidateUserResetPhone(string appKey, Option<AppUserResetPhoneRequest> appUserResetPhoneRequest)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (appUserResetPhoneRequest.IsSet && appUserResetPhoneRequest.Value == null)
                throw new ArgumentNullException(nameof(appUserResetPhoneRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="appUserResetPhoneRequest"></param>
        private void AfterUserResetPhoneDefaultImplementation(IUserResetPhoneApiResponse apiResponseLocalVar, string appKey, Option<AppUserResetPhoneRequest> appUserResetPhoneRequest)
        {
            bool suppressDefaultLog = false;
            AfterUserResetPhone(ref suppressDefaultLog, apiResponseLocalVar, appKey, appUserResetPhoneRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="appUserResetPhoneRequest"></param>
        partial void AfterUserResetPhone(ref bool suppressDefaultLog, IUserResetPhoneApiResponse apiResponseLocalVar, string appKey, Option<AppUserResetPhoneRequest> appUserResetPhoneRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="appUserResetPhoneRequest"></param>
        private void OnErrorUserResetPhoneDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<AppUserResetPhoneRequest> appUserResetPhoneRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUserResetPhone(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, appUserResetPhoneRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="appUserResetPhoneRequest"></param>
        partial void OnErrorUserResetPhone(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<AppUserResetPhoneRequest> appUserResetPhoneRequest);

        /// <summary>
        /// 重置手机号 通过手机号验证码重置手机号
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="appUserResetPhoneRequest">重置手机号的请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserResetPhoneApiResponse"/>&gt;</returns>
        public async Task<IUserResetPhoneApiResponse> UserResetPhoneOrDefaultAsync(string appKey, Option<AppUserResetPhoneRequest> appUserResetPhoneRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UserResetPhoneAsync(appKey, appUserResetPhoneRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 重置手机号 通过手机号验证码重置手机号
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="appUserResetPhoneRequest">重置手机号的请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserResetPhoneApiResponse"/>&gt;</returns>
        public async Task<IUserResetPhoneApiResponse> UserResetPhoneAsync(string appKey, Option<AppUserResetPhoneRequest> appUserResetPhoneRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUserResetPhone(appKey, appUserResetPhoneRequest);

                FormatUserResetPhone(ref appKey, appUserResetPhoneRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/User/{appKey}/ResetPhone";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    if (appUserResetPhoneRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (appUserResetPhoneRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(appUserResetPhoneRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PUT");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UserResetPhoneApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UserResetPhoneApiResponse>();

                        UserResetPhoneApiResponse apiResponseLocalVar = new UserResetPhoneApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/User/{appKey}/ResetPhone", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUserResetPhoneDefaultImplementation(apiResponseLocalVar, appKey, appUserResetPhoneRequest);

                        Events.ExecuteOnUserResetPhone(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUserResetPhoneDefaultImplementation(e, "/User/{appKey}/ResetPhone", uriBuilderLocalVar.Path, appKey, appUserResetPhoneRequest);
                Events.ExecuteOnErrorUserResetPhone(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UserResetPhoneApiResponse"/>
        /// </summary>
        public partial class UserResetPhoneApiResponse : ZSGF.Client.Client.ApiResponse, IUserResetPhoneApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UserResetPhoneApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UserResetPhoneApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UserResetPhoneApiResponse(ILogger<UserResetPhoneApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.BooleanApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.BooleanApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.BooleanApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUserResetPwd(ref string appKey, Option<AppUserResetPwdRequest> appUserResetPwdRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="appUserResetPwdRequest"></param>
        /// <returns></returns>
        private void ValidateUserResetPwd(string appKey, Option<AppUserResetPwdRequest> appUserResetPwdRequest)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (appUserResetPwdRequest.IsSet && appUserResetPwdRequest.Value == null)
                throw new ArgumentNullException(nameof(appUserResetPwdRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="appUserResetPwdRequest"></param>
        private void AfterUserResetPwdDefaultImplementation(IUserResetPwdApiResponse apiResponseLocalVar, string appKey, Option<AppUserResetPwdRequest> appUserResetPwdRequest)
        {
            bool suppressDefaultLog = false;
            AfterUserResetPwd(ref suppressDefaultLog, apiResponseLocalVar, appKey, appUserResetPwdRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="appUserResetPwdRequest"></param>
        partial void AfterUserResetPwd(ref bool suppressDefaultLog, IUserResetPwdApiResponse apiResponseLocalVar, string appKey, Option<AppUserResetPwdRequest> appUserResetPwdRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="appUserResetPwdRequest"></param>
        private void OnErrorUserResetPwdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<AppUserResetPwdRequest> appUserResetPwdRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUserResetPwd(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, appUserResetPwdRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="appUserResetPwdRequest"></param>
        partial void OnErrorUserResetPwd(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<AppUserResetPwdRequest> appUserResetPwdRequest);

        /// <summary>
        /// 重置密码 通过手机号或邮箱重置密码
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="appUserResetPwdRequest">重置密码的请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserResetPwdApiResponse"/>&gt;</returns>
        public async Task<IUserResetPwdApiResponse> UserResetPwdOrDefaultAsync(string appKey, Option<AppUserResetPwdRequest> appUserResetPwdRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UserResetPwdAsync(appKey, appUserResetPwdRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 重置密码 通过手机号或邮箱重置密码
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="appUserResetPwdRequest">重置密码的请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserResetPwdApiResponse"/>&gt;</returns>
        public async Task<IUserResetPwdApiResponse> UserResetPwdAsync(string appKey, Option<AppUserResetPwdRequest> appUserResetPwdRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUserResetPwd(appKey, appUserResetPwdRequest);

                FormatUserResetPwd(ref appKey, appUserResetPwdRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/User/{appKey}/ResetPwd";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    if (appUserResetPwdRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (appUserResetPwdRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(appUserResetPwdRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UserResetPwdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UserResetPwdApiResponse>();

                        UserResetPwdApiResponse apiResponseLocalVar = new UserResetPwdApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/User/{appKey}/ResetPwd", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUserResetPwdDefaultImplementation(apiResponseLocalVar, appKey, appUserResetPwdRequest);

                        Events.ExecuteOnUserResetPwd(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUserResetPwdDefaultImplementation(e, "/User/{appKey}/ResetPwd", uriBuilderLocalVar.Path, appKey, appUserResetPwdRequest);
                Events.ExecuteOnErrorUserResetPwd(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UserResetPwdApiResponse"/>
        /// </summary>
        public partial class UserResetPwdApiResponse : ZSGF.Client.Client.ApiResponse, IUserResetPwdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UserResetPwdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UserResetPwdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UserResetPwdApiResponse(ILogger<UserResetPwdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.BooleanApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.BooleanApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.BooleanApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUserSendEmailCode(ref string appKey, Option<SendEmailCodeRequest> sendEmailCodeRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="sendEmailCodeRequest"></param>
        /// <returns></returns>
        private void ValidateUserSendEmailCode(string appKey, Option<SendEmailCodeRequest> sendEmailCodeRequest)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (sendEmailCodeRequest.IsSet && sendEmailCodeRequest.Value == null)
                throw new ArgumentNullException(nameof(sendEmailCodeRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="sendEmailCodeRequest"></param>
        private void AfterUserSendEmailCodeDefaultImplementation(IUserSendEmailCodeApiResponse apiResponseLocalVar, string appKey, Option<SendEmailCodeRequest> sendEmailCodeRequest)
        {
            bool suppressDefaultLog = false;
            AfterUserSendEmailCode(ref suppressDefaultLog, apiResponseLocalVar, appKey, sendEmailCodeRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="sendEmailCodeRequest"></param>
        partial void AfterUserSendEmailCode(ref bool suppressDefaultLog, IUserSendEmailCodeApiResponse apiResponseLocalVar, string appKey, Option<SendEmailCodeRequest> sendEmailCodeRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="sendEmailCodeRequest"></param>
        private void OnErrorUserSendEmailCodeDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<SendEmailCodeRequest> sendEmailCodeRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUserSendEmailCode(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, sendEmailCodeRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="sendEmailCodeRequest"></param>
        partial void OnErrorUserSendEmailCode(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<SendEmailCodeRequest> sendEmailCodeRequest);

        /// <summary>
        /// 发送邮箱验证码 发送邮箱验证码用于注册或找回密码
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="sendEmailCodeRequest">发送邮箱验证码的请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserSendEmailCodeApiResponse"/>&gt;</returns>
        public async Task<IUserSendEmailCodeApiResponse> UserSendEmailCodeOrDefaultAsync(string appKey, Option<SendEmailCodeRequest> sendEmailCodeRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UserSendEmailCodeAsync(appKey, sendEmailCodeRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 发送邮箱验证码 发送邮箱验证码用于注册或找回密码
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="sendEmailCodeRequest">发送邮箱验证码的请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserSendEmailCodeApiResponse"/>&gt;</returns>
        public async Task<IUserSendEmailCodeApiResponse> UserSendEmailCodeAsync(string appKey, Option<SendEmailCodeRequest> sendEmailCodeRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUserSendEmailCode(appKey, sendEmailCodeRequest);

                FormatUserSendEmailCode(ref appKey, sendEmailCodeRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/User/{appKey}/SendEmailCode";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    if (sendEmailCodeRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (sendEmailCodeRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(sendEmailCodeRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UserSendEmailCodeApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UserSendEmailCodeApiResponse>();

                        UserSendEmailCodeApiResponse apiResponseLocalVar = new UserSendEmailCodeApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/User/{appKey}/SendEmailCode", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUserSendEmailCodeDefaultImplementation(apiResponseLocalVar, appKey, sendEmailCodeRequest);

                        Events.ExecuteOnUserSendEmailCode(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUserSendEmailCodeDefaultImplementation(e, "/User/{appKey}/SendEmailCode", uriBuilderLocalVar.Path, appKey, sendEmailCodeRequest);
                Events.ExecuteOnErrorUserSendEmailCode(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UserSendEmailCodeApiResponse"/>
        /// </summary>
        public partial class UserSendEmailCodeApiResponse : ZSGF.Client.Client.ApiResponse, IUserSendEmailCodeApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UserSendEmailCodeApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UserSendEmailCodeApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UserSendEmailCodeApiResponse(ILogger<UserSendEmailCodeApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.BooleanApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.BooleanApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.BooleanApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUserSendSMSCode(ref string appKey, Option<SendSMSCodeRequest> sendSMSCodeRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="sendSMSCodeRequest"></param>
        /// <returns></returns>
        private void ValidateUserSendSMSCode(string appKey, Option<SendSMSCodeRequest> sendSMSCodeRequest)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (sendSMSCodeRequest.IsSet && sendSMSCodeRequest.Value == null)
                throw new ArgumentNullException(nameof(sendSMSCodeRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="sendSMSCodeRequest"></param>
        private void AfterUserSendSMSCodeDefaultImplementation(IUserSendSMSCodeApiResponse apiResponseLocalVar, string appKey, Option<SendSMSCodeRequest> sendSMSCodeRequest)
        {
            bool suppressDefaultLog = false;
            AfterUserSendSMSCode(ref suppressDefaultLog, apiResponseLocalVar, appKey, sendSMSCodeRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="sendSMSCodeRequest"></param>
        partial void AfterUserSendSMSCode(ref bool suppressDefaultLog, IUserSendSMSCodeApiResponse apiResponseLocalVar, string appKey, Option<SendSMSCodeRequest> sendSMSCodeRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="sendSMSCodeRequest"></param>
        private void OnErrorUserSendSMSCodeDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<SendSMSCodeRequest> sendSMSCodeRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUserSendSMSCode(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, sendSMSCodeRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="sendSMSCodeRequest"></param>
        partial void OnErrorUserSendSMSCode(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<SendSMSCodeRequest> sendSMSCodeRequest);

        /// <summary>
        /// 发送手机验证码 发送手机验证码用于注册或找回密码
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="sendSMSCodeRequest">发送手机验证码的请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserSendSMSCodeApiResponse"/>&gt;</returns>
        public async Task<IUserSendSMSCodeApiResponse> UserSendSMSCodeOrDefaultAsync(string appKey, Option<SendSMSCodeRequest> sendSMSCodeRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UserSendSMSCodeAsync(appKey, sendSMSCodeRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 发送手机验证码 发送手机验证码用于注册或找回密码
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="sendSMSCodeRequest">发送手机验证码的请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserSendSMSCodeApiResponse"/>&gt;</returns>
        public async Task<IUserSendSMSCodeApiResponse> UserSendSMSCodeAsync(string appKey, Option<SendSMSCodeRequest> sendSMSCodeRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUserSendSMSCode(appKey, sendSMSCodeRequest);

                FormatUserSendSMSCode(ref appKey, sendSMSCodeRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/User/{appKey}/SendSMSCode";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    if (sendSMSCodeRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (sendSMSCodeRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(sendSMSCodeRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UserSendSMSCodeApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UserSendSMSCodeApiResponse>();

                        UserSendSMSCodeApiResponse apiResponseLocalVar = new UserSendSMSCodeApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/User/{appKey}/SendSMSCode", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUserSendSMSCodeDefaultImplementation(apiResponseLocalVar, appKey, sendSMSCodeRequest);

                        Events.ExecuteOnUserSendSMSCode(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUserSendSMSCodeDefaultImplementation(e, "/User/{appKey}/SendSMSCode", uriBuilderLocalVar.Path, appKey, sendSMSCodeRequest);
                Events.ExecuteOnErrorUserSendSMSCode(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UserSendSMSCodeApiResponse"/>
        /// </summary>
        public partial class UserSendSMSCodeApiResponse : ZSGF.Client.Client.ApiResponse, IUserSendSMSCodeApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UserSendSMSCodeApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UserSendSMSCodeApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UserSendSMSCodeApiResponse(ILogger<UserSendSMSCodeApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.BooleanApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.BooleanApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.BooleanApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUserSignIn(ref string appKey, Option<SignInRequest> signInRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="signInRequest"></param>
        /// <returns></returns>
        private void ValidateUserSignIn(string appKey, Option<SignInRequest> signInRequest)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (signInRequest.IsSet && signInRequest.Value == null)
                throw new ArgumentNullException(nameof(signInRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="signInRequest"></param>
        private void AfterUserSignInDefaultImplementation(IUserSignInApiResponse apiResponseLocalVar, string appKey, Option<SignInRequest> signInRequest)
        {
            bool suppressDefaultLog = false;
            AfterUserSignIn(ref suppressDefaultLog, apiResponseLocalVar, appKey, signInRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="signInRequest"></param>
        partial void AfterUserSignIn(ref bool suppressDefaultLog, IUserSignInApiResponse apiResponseLocalVar, string appKey, Option<SignInRequest> signInRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="signInRequest"></param>
        private void OnErrorUserSignInDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<SignInRequest> signInRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUserSignIn(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, signInRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="signInRequest"></param>
        partial void OnErrorUserSignIn(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<SignInRequest> signInRequest);

        /// <summary>
        /// 密码登录 使用账号密码进行登录
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="signInRequest">登录请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserSignInApiResponse"/>&gt;</returns>
        public async Task<IUserSignInApiResponse> UserSignInOrDefaultAsync(string appKey, Option<SignInRequest> signInRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UserSignInAsync(appKey, signInRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 密码登录 使用账号密码进行登录
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="signInRequest">登录请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserSignInApiResponse"/>&gt;</returns>
        public async Task<IUserSignInApiResponse> UserSignInAsync(string appKey, Option<SignInRequest> signInRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUserSignIn(appKey, signInRequest);

                FormatUserSignIn(ref appKey, signInRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/User/{appKey}/SignIn";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    if (signInRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (signInRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(signInRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UserSignInApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UserSignInApiResponse>();

                        UserSignInApiResponse apiResponseLocalVar = new UserSignInApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/User/{appKey}/SignIn", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUserSignInDefaultImplementation(apiResponseLocalVar, appKey, signInRequest);

                        Events.ExecuteOnUserSignIn(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUserSignInDefaultImplementation(e, "/User/{appKey}/SignIn", uriBuilderLocalVar.Path, appKey, signInRequest);
                Events.ExecuteOnErrorUserSignIn(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UserSignInApiResponse"/>
        /// </summary>
        public partial class UserSignInApiResponse : ZSGF.Client.Client.ApiResponse, IUserSignInApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UserSignInApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UserSignInApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UserSignInApiResponse(ILogger<UserSignInApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.TokenModelApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.TokenModelApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.TokenModelApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUserSignUp(ref string appKey, Option<SignUpRequest> signUpRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="signUpRequest"></param>
        /// <returns></returns>
        private void ValidateUserSignUp(string appKey, Option<SignUpRequest> signUpRequest)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (signUpRequest.IsSet && signUpRequest.Value == null)
                throw new ArgumentNullException(nameof(signUpRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="signUpRequest"></param>
        private void AfterUserSignUpDefaultImplementation(IUserSignUpApiResponse apiResponseLocalVar, string appKey, Option<SignUpRequest> signUpRequest)
        {
            bool suppressDefaultLog = false;
            AfterUserSignUp(ref suppressDefaultLog, apiResponseLocalVar, appKey, signUpRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="signUpRequest"></param>
        partial void AfterUserSignUp(ref bool suppressDefaultLog, IUserSignUpApiResponse apiResponseLocalVar, string appKey, Option<SignUpRequest> signUpRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="signUpRequest"></param>
        private void OnErrorUserSignUpDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<SignUpRequest> signUpRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUserSignUp(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, signUpRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="signUpRequest"></param>
        partial void OnErrorUserSignUp(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<SignUpRequest> signUpRequest);

        /// <summary>
        /// 账号注册 使用账号密码进行注册
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="signUpRequest">注册请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserSignUpApiResponse"/>&gt;</returns>
        public async Task<IUserSignUpApiResponse> UserSignUpOrDefaultAsync(string appKey, Option<SignUpRequest> signUpRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UserSignUpAsync(appKey, signUpRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 账号注册 使用账号密码进行注册
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="signUpRequest">注册请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserSignUpApiResponse"/>&gt;</returns>
        public async Task<IUserSignUpApiResponse> UserSignUpAsync(string appKey, Option<SignUpRequest> signUpRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUserSignUp(appKey, signUpRequest);

                FormatUserSignUp(ref appKey, signUpRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/User/{appKey}/SignUp";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    if (signUpRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (signUpRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(signUpRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UserSignUpApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UserSignUpApiResponse>();

                        UserSignUpApiResponse apiResponseLocalVar = new UserSignUpApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/User/{appKey}/SignUp", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUserSignUpDefaultImplementation(apiResponseLocalVar, appKey, signUpRequest);

                        Events.ExecuteOnUserSignUp(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUserSignUpDefaultImplementation(e, "/User/{appKey}/SignUp", uriBuilderLocalVar.Path, appKey, signUpRequest);
                Events.ExecuteOnErrorUserSignUp(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UserSignUpApiResponse"/>
        /// </summary>
        public partial class UserSignUpApiResponse : ZSGF.Client.Client.ApiResponse, IUserSignUpApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UserSignUpApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UserSignUpApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UserSignUpApiResponse(ILogger<UserSignUpApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.TokenModelApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.TokenModelApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.TokenModelApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUserTwoFactorAuth(ref string appKey);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <returns></returns>
        private void ValidateUserTwoFactorAuth(string appKey)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        private void AfterUserTwoFactorAuthDefaultImplementation(IUserTwoFactorAuthApiResponse apiResponseLocalVar, string appKey)
        {
            bool suppressDefaultLog = false;
            AfterUserTwoFactorAuth(ref suppressDefaultLog, apiResponseLocalVar, appKey);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        partial void AfterUserTwoFactorAuth(ref bool suppressDefaultLog, IUserTwoFactorAuthApiResponse apiResponseLocalVar, string appKey);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        private void OnErrorUserTwoFactorAuthDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUserTwoFactorAuth(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        partial void OnErrorUserTwoFactorAuth(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey);

        /// <summary>
        /// 二次验证 获取当前用户在指定应用下启用二次验证（2FA）所需的设置信息，主要包括二维码链接和手动密钥，用户可以将其录入在 Google Authenticator 等 TOTP 应用中，用于后续动态验证码验证。
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserTwoFactorAuthApiResponse"/>&gt;</returns>
        public async Task<IUserTwoFactorAuthApiResponse> UserTwoFactorAuthOrDefaultAsync(string appKey, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UserTwoFactorAuthAsync(appKey, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 二次验证 获取当前用户在指定应用下启用二次验证（2FA）所需的设置信息，主要包括二维码链接和手动密钥，用户可以将其录入在 Google Authenticator 等 TOTP 应用中，用于后续动态验证码验证。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserTwoFactorAuthApiResponse"/>&gt;</returns>
        public async Task<IUserTwoFactorAuthApiResponse> UserTwoFactorAuthAsync(string appKey, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUserTwoFactorAuth(appKey);

                FormatUserTwoFactorAuth(ref appKey);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/User/{appKey}/TwoFactorAuth";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UserTwoFactorAuthApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UserTwoFactorAuthApiResponse>();

                        UserTwoFactorAuthApiResponse apiResponseLocalVar = new UserTwoFactorAuthApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/User/{appKey}/TwoFactorAuth", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUserTwoFactorAuthDefaultImplementation(apiResponseLocalVar, appKey);

                        Events.ExecuteOnUserTwoFactorAuth(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUserTwoFactorAuthDefaultImplementation(e, "/User/{appKey}/TwoFactorAuth", uriBuilderLocalVar.Path, appKey);
                Events.ExecuteOnErrorUserTwoFactorAuth(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UserTwoFactorAuthApiResponse"/>
        /// </summary>
        public partial class UserTwoFactorAuthApiResponse : ZSGF.Client.Client.ApiResponse, IUserTwoFactorAuthApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UserTwoFactorAuthApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UserTwoFactorAuthApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UserTwoFactorAuthApiResponse(ILogger<UserTwoFactorAuthApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.SetupCodeApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.SetupCodeApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.SetupCodeApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUserUnionIDSignIn(ref string appKey, Option<UnionIDSignInRequest> unionIDSignInRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="unionIDSignInRequest"></param>
        /// <returns></returns>
        private void ValidateUserUnionIDSignIn(string appKey, Option<UnionIDSignInRequest> unionIDSignInRequest)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (unionIDSignInRequest.IsSet && unionIDSignInRequest.Value == null)
                throw new ArgumentNullException(nameof(unionIDSignInRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="unionIDSignInRequest"></param>
        private void AfterUserUnionIDSignInDefaultImplementation(IUserUnionIDSignInApiResponse apiResponseLocalVar, string appKey, Option<UnionIDSignInRequest> unionIDSignInRequest)
        {
            bool suppressDefaultLog = false;
            AfterUserUnionIDSignIn(ref suppressDefaultLog, apiResponseLocalVar, appKey, unionIDSignInRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="unionIDSignInRequest"></param>
        partial void AfterUserUnionIDSignIn(ref bool suppressDefaultLog, IUserUnionIDSignInApiResponse apiResponseLocalVar, string appKey, Option<UnionIDSignInRequest> unionIDSignInRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="unionIDSignInRequest"></param>
        private void OnErrorUserUnionIDSignInDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<UnionIDSignInRequest> unionIDSignInRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUserUnionIDSignIn(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, unionIDSignInRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="unionIDSignInRequest"></param>
        partial void OnErrorUserUnionIDSignIn(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<UnionIDSignInRequest> unionIDSignInRequest);

        /// <summary>
        /// UnionID登录 使用UnionID进行登录
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="unionIDSignInRequest">登录请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserUnionIDSignInApiResponse"/>&gt;</returns>
        public async Task<IUserUnionIDSignInApiResponse> UserUnionIDSignInOrDefaultAsync(string appKey, Option<UnionIDSignInRequest> unionIDSignInRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UserUnionIDSignInAsync(appKey, unionIDSignInRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// UnionID登录 使用UnionID进行登录
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="unionIDSignInRequest">登录请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserUnionIDSignInApiResponse"/>&gt;</returns>
        public async Task<IUserUnionIDSignInApiResponse> UserUnionIDSignInAsync(string appKey, Option<UnionIDSignInRequest> unionIDSignInRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUserUnionIDSignIn(appKey, unionIDSignInRequest);

                FormatUserUnionIDSignIn(ref appKey, unionIDSignInRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/User/{appKey}/UnionIDSignIn";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    if (unionIDSignInRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (unionIDSignInRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(unionIDSignInRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UserUnionIDSignInApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UserUnionIDSignInApiResponse>();

                        UserUnionIDSignInApiResponse apiResponseLocalVar = new UserUnionIDSignInApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/User/{appKey}/UnionIDSignIn", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUserUnionIDSignInDefaultImplementation(apiResponseLocalVar, appKey, unionIDSignInRequest);

                        Events.ExecuteOnUserUnionIDSignIn(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUserUnionIDSignInDefaultImplementation(e, "/User/{appKey}/UnionIDSignIn", uriBuilderLocalVar.Path, appKey, unionIDSignInRequest);
                Events.ExecuteOnErrorUserUnionIDSignIn(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UserUnionIDSignInApiResponse"/>
        /// </summary>
        public partial class UserUnionIDSignInApiResponse : ZSGF.Client.Client.ApiResponse, IUserUnionIDSignInApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UserUnionIDSignInApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UserUnionIDSignInApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UserUnionIDSignInApiResponse(ILogger<UserUnionIDSignInApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.TokenModelApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.TokenModelApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.TokenModelApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUserUnionIDSignUp(ref string appKey, Option<UnionIDSignUpRequest> unionIDSignUpRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="unionIDSignUpRequest"></param>
        /// <returns></returns>
        private void ValidateUserUnionIDSignUp(string appKey, Option<UnionIDSignUpRequest> unionIDSignUpRequest)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (unionIDSignUpRequest.IsSet && unionIDSignUpRequest.Value == null)
                throw new ArgumentNullException(nameof(unionIDSignUpRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="unionIDSignUpRequest"></param>
        private void AfterUserUnionIDSignUpDefaultImplementation(IUserUnionIDSignUpApiResponse apiResponseLocalVar, string appKey, Option<UnionIDSignUpRequest> unionIDSignUpRequest)
        {
            bool suppressDefaultLog = false;
            AfterUserUnionIDSignUp(ref suppressDefaultLog, apiResponseLocalVar, appKey, unionIDSignUpRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="unionIDSignUpRequest"></param>
        partial void AfterUserUnionIDSignUp(ref bool suppressDefaultLog, IUserUnionIDSignUpApiResponse apiResponseLocalVar, string appKey, Option<UnionIDSignUpRequest> unionIDSignUpRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="unionIDSignUpRequest"></param>
        private void OnErrorUserUnionIDSignUpDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<UnionIDSignUpRequest> unionIDSignUpRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUserUnionIDSignUp(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, unionIDSignUpRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="unionIDSignUpRequest"></param>
        partial void OnErrorUserUnionIDSignUp(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<UnionIDSignUpRequest> unionIDSignUpRequest);

        /// <summary>
        /// UnionID注册 使用UnionID进行注册
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="unionIDSignUpRequest">注册请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserUnionIDSignUpApiResponse"/>&gt;</returns>
        public async Task<IUserUnionIDSignUpApiResponse> UserUnionIDSignUpOrDefaultAsync(string appKey, Option<UnionIDSignUpRequest> unionIDSignUpRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UserUnionIDSignUpAsync(appKey, unionIDSignUpRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// UnionID注册 使用UnionID进行注册
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="unionIDSignUpRequest">注册请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserUnionIDSignUpApiResponse"/>&gt;</returns>
        public async Task<IUserUnionIDSignUpApiResponse> UserUnionIDSignUpAsync(string appKey, Option<UnionIDSignUpRequest> unionIDSignUpRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUserUnionIDSignUp(appKey, unionIDSignUpRequest);

                FormatUserUnionIDSignUp(ref appKey, unionIDSignUpRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/User/{appKey}/UnionIDSignUp";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    if (unionIDSignUpRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (unionIDSignUpRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(unionIDSignUpRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UserUnionIDSignUpApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UserUnionIDSignUpApiResponse>();

                        UserUnionIDSignUpApiResponse apiResponseLocalVar = new UserUnionIDSignUpApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/User/{appKey}/UnionIDSignUp", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUserUnionIDSignUpDefaultImplementation(apiResponseLocalVar, appKey, unionIDSignUpRequest);

                        Events.ExecuteOnUserUnionIDSignUp(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUserUnionIDSignUpDefaultImplementation(e, "/User/{appKey}/UnionIDSignUp", uriBuilderLocalVar.Path, appKey, unionIDSignUpRequest);
                Events.ExecuteOnErrorUserUnionIDSignUp(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UserUnionIDSignUpApiResponse"/>
        /// </summary>
        public partial class UserUnionIDSignUpApiResponse : ZSGF.Client.Client.ApiResponse, IUserUnionIDSignUpApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UserUnionIDSignUpApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UserUnionIDSignUpApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UserUnionIDSignUpApiResponse(ILogger<UserUnionIDSignUpApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.TokenModelApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.TokenModelApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.TokenModelApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUserUpdateProfile(ref string appKey, Option<UpdateProfileRequest> updateProfileRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="updateProfileRequest"></param>
        /// <returns></returns>
        private void ValidateUserUpdateProfile(string appKey, Option<UpdateProfileRequest> updateProfileRequest)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (updateProfileRequest.IsSet && updateProfileRequest.Value == null)
                throw new ArgumentNullException(nameof(updateProfileRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="updateProfileRequest"></param>
        private void AfterUserUpdateProfileDefaultImplementation(IUserUpdateProfileApiResponse apiResponseLocalVar, string appKey, Option<UpdateProfileRequest> updateProfileRequest)
        {
            bool suppressDefaultLog = false;
            AfterUserUpdateProfile(ref suppressDefaultLog, apiResponseLocalVar, appKey, updateProfileRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="updateProfileRequest"></param>
        partial void AfterUserUpdateProfile(ref bool suppressDefaultLog, IUserUpdateProfileApiResponse apiResponseLocalVar, string appKey, Option<UpdateProfileRequest> updateProfileRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="updateProfileRequest"></param>
        private void OnErrorUserUpdateProfileDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<UpdateProfileRequest> updateProfileRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUserUpdateProfile(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, updateProfileRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="updateProfileRequest"></param>
        partial void OnErrorUserUpdateProfile(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<UpdateProfileRequest> updateProfileRequest);

        /// <summary>
        /// 更新个人资料 更新当前用户的个人资料
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="updateProfileRequest">更新个人资料的请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserUpdateProfileApiResponse"/>&gt;</returns>
        public async Task<IUserUpdateProfileApiResponse> UserUpdateProfileOrDefaultAsync(string appKey, Option<UpdateProfileRequest> updateProfileRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UserUpdateProfileAsync(appKey, updateProfileRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 更新个人资料 更新当前用户的个人资料
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="updateProfileRequest">更新个人资料的请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserUpdateProfileApiResponse"/>&gt;</returns>
        public async Task<IUserUpdateProfileApiResponse> UserUpdateProfileAsync(string appKey, Option<UpdateProfileRequest> updateProfileRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUserUpdateProfile(appKey, updateProfileRequest);

                FormatUserUpdateProfile(ref appKey, updateProfileRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/User/{appKey}/Profile";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    if (updateProfileRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (updateProfileRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(updateProfileRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PUT");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UserUpdateProfileApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UserUpdateProfileApiResponse>();

                        UserUpdateProfileApiResponse apiResponseLocalVar = new UserUpdateProfileApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/User/{appKey}/Profile", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUserUpdateProfileDefaultImplementation(apiResponseLocalVar, appKey, updateProfileRequest);

                        Events.ExecuteOnUserUpdateProfile(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUserUpdateProfileDefaultImplementation(e, "/User/{appKey}/Profile", uriBuilderLocalVar.Path, appKey, updateProfileRequest);
                Events.ExecuteOnErrorUserUpdateProfile(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UserUpdateProfileApiResponse"/>
        /// </summary>
        public partial class UserUpdateProfileApiResponse : ZSGF.Client.Client.ApiResponse, IUserUpdateProfileApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UserUpdateProfileApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UserUpdateProfileApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UserUpdateProfileApiResponse(ILogger<UserUpdateProfileApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.BooleanApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.BooleanApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.BooleanApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
