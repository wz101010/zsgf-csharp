// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using ZSGF.Client.Client;
using ZSGF.Client.Model;

namespace ZSGF.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IOAuthApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        OAuthApiEvents Events { get; }

        /// <summary>
        /// 获取访问令牌
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="scheme">身份源 (optional)</param>
        /// <param name="code">授权码 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOAuthAuthorizeApiResponse"/>&gt;</returns>
        Task<IOAuthAuthorizeApiResponse> OAuthAuthorizeAsync(string appKey, Option<string> scheme = default, Option<string> code = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取访问令牌
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="scheme">身份源 (optional)</param>
        /// <param name="code">授权码 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOAuthAuthorizeApiResponse"/>&gt;</returns>
        Task<IOAuthAuthorizeApiResponse> OAuthAuthorizeOrDefaultAsync(string appKey, Option<string> scheme = default, Option<string> code = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取授权记录
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOAuthConsentsApiResponse"/>&gt;</returns>
        Task<IOAuthConsentsApiResponse> OAuthConsentsAsync(string appKey, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取授权记录
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOAuthConsentsApiResponse"/>&gt;</returns>
        Task<IOAuthConsentsApiResponse> OAuthConsentsOrDefaultAsync(string appKey, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 删除授权记录
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOAuthDeleteConsentApiResponse"/>&gt;</returns>
        Task<IOAuthDeleteConsentApiResponse> OAuthDeleteConsentAsync(long id, string appKey, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 删除授权记录
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOAuthDeleteConsentApiResponse"/>&gt;</returns>
        Task<IOAuthDeleteConsentApiResponse> OAuthDeleteConsentOrDefaultAsync(long id, string appKey, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取授权码
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="scheme">身份源，固定填：app (optional)</param>
        /// <param name="grantRequest">授权详情 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOAuthGrantCodeApiResponse"/>&gt;</returns>
        Task<IOAuthGrantCodeApiResponse> OAuthGrantCodeAsync(string appKey, Option<string> scheme = default, Option<GrantRequest> grantRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取授权码
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="scheme">身份源，固定填：app (optional)</param>
        /// <param name="grantRequest">授权详情 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOAuthGrantCodeApiResponse"/>&gt;</returns>
        Task<IOAuthGrantCodeApiResponse> OAuthGrantCodeOrDefaultAsync(string appKey, Option<string> scheme = default, Option<GrantRequest> grantRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取用户资料
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOAuthProfileApiResponse"/>&gt;</returns>
        Task<IOAuthProfileApiResponse> OAuthProfileAsync(string appKey, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取用户资料
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOAuthProfileApiResponse"/>&gt;</returns>
        Task<IOAuthProfileApiResponse> OAuthProfileOrDefaultAsync(string appKey, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IOAuthAuthorizeApiResponse"/>
    /// </summary>
    public interface IOAuthAuthorizeApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.AuthorizeResultApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IOAuthConsentsApiResponse"/>
    /// </summary>
    public interface IOAuthConsentsApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.AppUserConsentModelListApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IOAuthDeleteConsentApiResponse"/>
    /// </summary>
    public interface IOAuthDeleteConsentApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.BooleanApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IOAuthGrantCodeApiResponse"/>
    /// </summary>
    public interface IOAuthGrantCodeApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.GrantResultApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IOAuthProfileApiResponse"/>
    /// </summary>
    public interface IOAuthProfileApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.ProfileResultApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class OAuthApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnOAuthAuthorize;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorOAuthAuthorize;

        internal void ExecuteOnOAuthAuthorize(OAuthApi.OAuthAuthorizeApiResponse apiResponse)
        {
            OnOAuthAuthorize?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorOAuthAuthorize(Exception exception)
        {
            OnErrorOAuthAuthorize?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnOAuthConsents;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorOAuthConsents;

        internal void ExecuteOnOAuthConsents(OAuthApi.OAuthConsentsApiResponse apiResponse)
        {
            OnOAuthConsents?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorOAuthConsents(Exception exception)
        {
            OnErrorOAuthConsents?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnOAuthDeleteConsent;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorOAuthDeleteConsent;

        internal void ExecuteOnOAuthDeleteConsent(OAuthApi.OAuthDeleteConsentApiResponse apiResponse)
        {
            OnOAuthDeleteConsent?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorOAuthDeleteConsent(Exception exception)
        {
            OnErrorOAuthDeleteConsent?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnOAuthGrantCode;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorOAuthGrantCode;

        internal void ExecuteOnOAuthGrantCode(OAuthApi.OAuthGrantCodeApiResponse apiResponse)
        {
            OnOAuthGrantCode?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorOAuthGrantCode(Exception exception)
        {
            OnErrorOAuthGrantCode?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnOAuthProfile;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorOAuthProfile;

        internal void ExecuteOnOAuthProfile(OAuthApi.OAuthProfileApiResponse apiResponse)
        {
            OnOAuthProfile?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorOAuthProfile(Exception exception)
        {
            OnErrorOAuthProfile?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class OAuthApi : IOAuthApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<OAuthApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public OAuthApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="OAuthApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OAuthApi(ILogger<OAuthApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, OAuthApiEvents oAuthApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<OAuthApi>();
            HttpClient = httpClient;
            Events = oAuthApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatOAuthAuthorize(ref string appKey, ref Option<string> scheme, ref Option<string> code);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="scheme"></param>
        /// <param name="code"></param>
        /// <returns></returns>
        private void ValidateOAuthAuthorize(string appKey, Option<string> scheme, Option<string> code)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (scheme.IsSet && scheme.Value == null)
                throw new ArgumentNullException(nameof(scheme));

            if (code.IsSet && code.Value == null)
                throw new ArgumentNullException(nameof(code));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="scheme"></param>
        /// <param name="code"></param>
        private void AfterOAuthAuthorizeDefaultImplementation(IOAuthAuthorizeApiResponse apiResponseLocalVar, string appKey, Option<string> scheme, Option<string> code)
        {
            bool suppressDefaultLog = false;
            AfterOAuthAuthorize(ref suppressDefaultLog, apiResponseLocalVar, appKey, scheme, code);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="scheme"></param>
        /// <param name="code"></param>
        partial void AfterOAuthAuthorize(ref bool suppressDefaultLog, IOAuthAuthorizeApiResponse apiResponseLocalVar, string appKey, Option<string> scheme, Option<string> code);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="scheme"></param>
        /// <param name="code"></param>
        private void OnErrorOAuthAuthorizeDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<string> scheme, Option<string> code)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorOAuthAuthorize(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, scheme, code);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="scheme"></param>
        /// <param name="code"></param>
        partial void OnErrorOAuthAuthorize(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<string> scheme, Option<string> code);

        /// <summary>
        /// 获取访问令牌 
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="scheme">身份源 (optional)</param>
        /// <param name="code">授权码 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOAuthAuthorizeApiResponse"/>&gt;</returns>
        public async Task<IOAuthAuthorizeApiResponse> OAuthAuthorizeOrDefaultAsync(string appKey, Option<string> scheme = default, Option<string> code = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await OAuthAuthorizeAsync(appKey, scheme, code, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取访问令牌 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="scheme">身份源 (optional)</param>
        /// <param name="code">授权码 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOAuthAuthorizeApiResponse"/>&gt;</returns>
        public async Task<IOAuthAuthorizeApiResponse> OAuthAuthorizeAsync(string appKey, Option<string> scheme = default, Option<string> code = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateOAuthAuthorize(appKey, scheme, code);

                FormatOAuthAuthorize(ref appKey, ref scheme, ref code);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/OAuth/{appKey}/Authorize";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (scheme.IsSet)
                        parseQueryStringLocalVar["scheme"] = ClientUtils.ParameterToString(scheme.Value);

                    if (code.IsSet)
                        parseQueryStringLocalVar["code"] = ClientUtils.ParameterToString(code.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<OAuthAuthorizeApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<OAuthAuthorizeApiResponse>();

                        OAuthAuthorizeApiResponse apiResponseLocalVar = new OAuthAuthorizeApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/OAuth/{appKey}/Authorize", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterOAuthAuthorizeDefaultImplementation(apiResponseLocalVar, appKey, scheme, code);

                        Events.ExecuteOnOAuthAuthorize(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorOAuthAuthorizeDefaultImplementation(e, "/OAuth/{appKey}/Authorize", uriBuilderLocalVar.Path, appKey, scheme, code);
                Events.ExecuteOnErrorOAuthAuthorize(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="OAuthAuthorizeApiResponse"/>
        /// </summary>
        public partial class OAuthAuthorizeApiResponse : ZSGF.Client.Client.ApiResponse, IOAuthAuthorizeApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<OAuthAuthorizeApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="OAuthAuthorizeApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public OAuthAuthorizeApiResponse(ILogger<OAuthAuthorizeApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.AuthorizeResultApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.AuthorizeResultApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.AuthorizeResultApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatOAuthConsents(ref string appKey);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <returns></returns>
        private void ValidateOAuthConsents(string appKey)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        private void AfterOAuthConsentsDefaultImplementation(IOAuthConsentsApiResponse apiResponseLocalVar, string appKey)
        {
            bool suppressDefaultLog = false;
            AfterOAuthConsents(ref suppressDefaultLog, apiResponseLocalVar, appKey);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        partial void AfterOAuthConsents(ref bool suppressDefaultLog, IOAuthConsentsApiResponse apiResponseLocalVar, string appKey);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        private void OnErrorOAuthConsentsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorOAuthConsents(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        partial void OnErrorOAuthConsents(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey);

        /// <summary>
        /// 获取授权记录 
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOAuthConsentsApiResponse"/>&gt;</returns>
        public async Task<IOAuthConsentsApiResponse> OAuthConsentsOrDefaultAsync(string appKey, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await OAuthConsentsAsync(appKey, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取授权记录 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOAuthConsentsApiResponse"/>&gt;</returns>
        public async Task<IOAuthConsentsApiResponse> OAuthConsentsAsync(string appKey, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateOAuthConsents(appKey);

                FormatOAuthConsents(ref appKey);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/OAuth/{appKey}/Consents";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<OAuthConsentsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<OAuthConsentsApiResponse>();

                        OAuthConsentsApiResponse apiResponseLocalVar = new OAuthConsentsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/OAuth/{appKey}/Consents", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterOAuthConsentsDefaultImplementation(apiResponseLocalVar, appKey);

                        Events.ExecuteOnOAuthConsents(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorOAuthConsentsDefaultImplementation(e, "/OAuth/{appKey}/Consents", uriBuilderLocalVar.Path, appKey);
                Events.ExecuteOnErrorOAuthConsents(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="OAuthConsentsApiResponse"/>
        /// </summary>
        public partial class OAuthConsentsApiResponse : ZSGF.Client.Client.ApiResponse, IOAuthConsentsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<OAuthConsentsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="OAuthConsentsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public OAuthConsentsApiResponse(ILogger<OAuthConsentsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.AppUserConsentModelListApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.AppUserConsentModelListApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.AppUserConsentModelListApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatOAuthDeleteConsent(ref long id, ref string appKey);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <returns></returns>
        private void ValidateOAuthDeleteConsent(string appKey)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        private void AfterOAuthDeleteConsentDefaultImplementation(IOAuthDeleteConsentApiResponse apiResponseLocalVar, long id, string appKey)
        {
            bool suppressDefaultLog = false;
            AfterOAuthDeleteConsent(ref suppressDefaultLog, apiResponseLocalVar, id, appKey);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        partial void AfterOAuthDeleteConsent(ref bool suppressDefaultLog, IOAuthDeleteConsentApiResponse apiResponseLocalVar, long id, string appKey);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        private void OnErrorOAuthDeleteConsentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id, string appKey)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorOAuthDeleteConsent(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, appKey);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        partial void OnErrorOAuthDeleteConsent(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id, string appKey);

        /// <summary>
        /// 删除授权记录 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOAuthDeleteConsentApiResponse"/>&gt;</returns>
        public async Task<IOAuthDeleteConsentApiResponse> OAuthDeleteConsentOrDefaultAsync(long id, string appKey, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await OAuthDeleteConsentAsync(id, appKey, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 删除授权记录 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOAuthDeleteConsentApiResponse"/>&gt;</returns>
        public async Task<IOAuthDeleteConsentApiResponse> OAuthDeleteConsentAsync(long id, string appKey, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateOAuthDeleteConsent(appKey);

                FormatOAuthDeleteConsent(ref id, ref appKey);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/OAuth/{appKey}/Consents/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<OAuthDeleteConsentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<OAuthDeleteConsentApiResponse>();

                        OAuthDeleteConsentApiResponse apiResponseLocalVar = new OAuthDeleteConsentApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/OAuth/{appKey}/Consents/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterOAuthDeleteConsentDefaultImplementation(apiResponseLocalVar, id, appKey);

                        Events.ExecuteOnOAuthDeleteConsent(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorOAuthDeleteConsentDefaultImplementation(e, "/OAuth/{appKey}/Consents/{id}", uriBuilderLocalVar.Path, id, appKey);
                Events.ExecuteOnErrorOAuthDeleteConsent(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="OAuthDeleteConsentApiResponse"/>
        /// </summary>
        public partial class OAuthDeleteConsentApiResponse : ZSGF.Client.Client.ApiResponse, IOAuthDeleteConsentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<OAuthDeleteConsentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="OAuthDeleteConsentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public OAuthDeleteConsentApiResponse(ILogger<OAuthDeleteConsentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.BooleanApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.BooleanApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.BooleanApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatOAuthGrantCode(ref string appKey, ref Option<string> scheme, Option<GrantRequest> grantRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="scheme"></param>
        /// <param name="grantRequest"></param>
        /// <returns></returns>
        private void ValidateOAuthGrantCode(string appKey, Option<string> scheme, Option<GrantRequest> grantRequest)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (scheme.IsSet && scheme.Value == null)
                throw new ArgumentNullException(nameof(scheme));

            if (grantRequest.IsSet && grantRequest.Value == null)
                throw new ArgumentNullException(nameof(grantRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="scheme"></param>
        /// <param name="grantRequest"></param>
        private void AfterOAuthGrantCodeDefaultImplementation(IOAuthGrantCodeApiResponse apiResponseLocalVar, string appKey, Option<string> scheme, Option<GrantRequest> grantRequest)
        {
            bool suppressDefaultLog = false;
            AfterOAuthGrantCode(ref suppressDefaultLog, apiResponseLocalVar, appKey, scheme, grantRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="scheme"></param>
        /// <param name="grantRequest"></param>
        partial void AfterOAuthGrantCode(ref bool suppressDefaultLog, IOAuthGrantCodeApiResponse apiResponseLocalVar, string appKey, Option<string> scheme, Option<GrantRequest> grantRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="scheme"></param>
        /// <param name="grantRequest"></param>
        private void OnErrorOAuthGrantCodeDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<string> scheme, Option<GrantRequest> grantRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorOAuthGrantCode(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, scheme, grantRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="scheme"></param>
        /// <param name="grantRequest"></param>
        partial void OnErrorOAuthGrantCode(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<string> scheme, Option<GrantRequest> grantRequest);

        /// <summary>
        /// 获取授权码 
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="scheme">身份源，固定填：app (optional)</param>
        /// <param name="grantRequest">授权详情 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOAuthGrantCodeApiResponse"/>&gt;</returns>
        public async Task<IOAuthGrantCodeApiResponse> OAuthGrantCodeOrDefaultAsync(string appKey, Option<string> scheme = default, Option<GrantRequest> grantRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await OAuthGrantCodeAsync(appKey, scheme, grantRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取授权码 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="scheme">身份源，固定填：app (optional)</param>
        /// <param name="grantRequest">授权详情 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOAuthGrantCodeApiResponse"/>&gt;</returns>
        public async Task<IOAuthGrantCodeApiResponse> OAuthGrantCodeAsync(string appKey, Option<string> scheme = default, Option<GrantRequest> grantRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateOAuthGrantCode(appKey, scheme, grantRequest);

                FormatOAuthGrantCode(ref appKey, ref scheme, grantRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/OAuth/{appKey}/GrantCode";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (scheme.IsSet)
                        parseQueryStringLocalVar["scheme"] = ClientUtils.ParameterToString(scheme.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (grantRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (grantRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(grantRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<OAuthGrantCodeApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<OAuthGrantCodeApiResponse>();

                        OAuthGrantCodeApiResponse apiResponseLocalVar = new OAuthGrantCodeApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/OAuth/{appKey}/GrantCode", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterOAuthGrantCodeDefaultImplementation(apiResponseLocalVar, appKey, scheme, grantRequest);

                        Events.ExecuteOnOAuthGrantCode(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorOAuthGrantCodeDefaultImplementation(e, "/OAuth/{appKey}/GrantCode", uriBuilderLocalVar.Path, appKey, scheme, grantRequest);
                Events.ExecuteOnErrorOAuthGrantCode(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="OAuthGrantCodeApiResponse"/>
        /// </summary>
        public partial class OAuthGrantCodeApiResponse : ZSGF.Client.Client.ApiResponse, IOAuthGrantCodeApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<OAuthGrantCodeApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="OAuthGrantCodeApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public OAuthGrantCodeApiResponse(ILogger<OAuthGrantCodeApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.GrantResultApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.GrantResultApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.GrantResultApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatOAuthProfile(ref string appKey);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <returns></returns>
        private void ValidateOAuthProfile(string appKey)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        private void AfterOAuthProfileDefaultImplementation(IOAuthProfileApiResponse apiResponseLocalVar, string appKey)
        {
            bool suppressDefaultLog = false;
            AfterOAuthProfile(ref suppressDefaultLog, apiResponseLocalVar, appKey);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        partial void AfterOAuthProfile(ref bool suppressDefaultLog, IOAuthProfileApiResponse apiResponseLocalVar, string appKey);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        private void OnErrorOAuthProfileDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorOAuthProfile(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        partial void OnErrorOAuthProfile(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey);

        /// <summary>
        /// 获取用户资料 
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOAuthProfileApiResponse"/>&gt;</returns>
        public async Task<IOAuthProfileApiResponse> OAuthProfileOrDefaultAsync(string appKey, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await OAuthProfileAsync(appKey, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取用户资料 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOAuthProfileApiResponse"/>&gt;</returns>
        public async Task<IOAuthProfileApiResponse> OAuthProfileAsync(string appKey, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateOAuthProfile(appKey);

                FormatOAuthProfile(ref appKey);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/OAuth/{appKey}/Profile";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<OAuthProfileApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<OAuthProfileApiResponse>();

                        OAuthProfileApiResponse apiResponseLocalVar = new OAuthProfileApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/OAuth/{appKey}/Profile", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterOAuthProfileDefaultImplementation(apiResponseLocalVar, appKey);

                        Events.ExecuteOnOAuthProfile(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorOAuthProfileDefaultImplementation(e, "/OAuth/{appKey}/Profile", uriBuilderLocalVar.Path, appKey);
                Events.ExecuteOnErrorOAuthProfile(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="OAuthProfileApiResponse"/>
        /// </summary>
        public partial class OAuthProfileApiResponse : ZSGF.Client.Client.ApiResponse, IOAuthProfileApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<OAuthProfileApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="OAuthProfileApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public OAuthProfileApiResponse(ILogger<OAuthProfileApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.ProfileResultApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.ProfileResultApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.ProfileResultApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
