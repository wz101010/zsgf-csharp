// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using ZSGF.Client.Client;
using ZSGF.Client.Model;

namespace ZSGF.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IStorageApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        StorageApiEvents Events { get; }

        /// <summary>
        /// 聚合查询
        /// </summary>
        /// <remarks>
        /// 根据聚合管道查询指定表中的数据
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="table">表名称</param>
        /// <param name="appKey"></param>
        /// <param name="pipeline">构建聚合查询 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStorageAggregateApiResponse"/>&gt;</returns>
        Task<IStorageAggregateApiResponse> StorageAggregateAsync(string table, string appKey, Option<string> pipeline = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 聚合查询
        /// </summary>
        /// <remarks>
        /// 根据聚合管道查询指定表中的数据
        /// </remarks>
        /// <param name="table">表名称</param>
        /// <param name="appKey"></param>
        /// <param name="pipeline">构建聚合查询 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStorageAggregateApiResponse"/>&gt;</returns>
        Task<IStorageAggregateApiResponse> StorageAggregateOrDefaultAsync(string table, string appKey, Option<string> pipeline = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 删除数据
        /// </summary>
        /// <remarks>
        /// 删除指定表中指定ID的数据
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="table">表名称</param>
        /// <param name="id">数据ID</param>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStorageDeleteApiResponse"/>&gt;</returns>
        Task<IStorageDeleteApiResponse> StorageDeleteAsync(string table, string id, string appKey, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 删除数据
        /// </summary>
        /// <remarks>
        /// 删除指定表中指定ID的数据
        /// </remarks>
        /// <param name="table">表名称</param>
        /// <param name="id">数据ID</param>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStorageDeleteApiResponse"/>&gt;</returns>
        Task<IStorageDeleteApiResponse> StorageDeleteOrDefaultAsync(string table, string id, string appKey, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 数据详情
        /// </summary>
        /// <remarks>
        /// 获取指定表中指定ID的数据详情
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="table">表名称</param>
        /// <param name="id">数据ID</param>
        /// <param name="appKey"></param>
        /// <param name="project">json格式 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStorageDetailApiResponse"/>&gt;</returns>
        Task<IStorageDetailApiResponse> StorageDetailAsync(string table, string id, string appKey, Option<string> project = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 数据详情
        /// </summary>
        /// <remarks>
        /// 获取指定表中指定ID的数据详情
        /// </remarks>
        /// <param name="table">表名称</param>
        /// <param name="id">数据ID</param>
        /// <param name="appKey"></param>
        /// <param name="project">json格式 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStorageDetailApiResponse"/>&gt;</returns>
        Task<IStorageDetailApiResponse> StorageDetailOrDefaultAsync(string table, string id, string appKey, Option<string> project = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 查询数据
        /// </summary>
        /// <remarks>
        /// 根据条件查询指定表中的数据
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="table">表名称</param>
        /// <param name="appKey"></param>
        /// <param name="filter">过滤，json格式 (optional)</param>
        /// <param name="project">字段映射，json格式 (optional)</param>
        /// <param name="sort">排序，json格式 (optional)</param>
        /// <param name="startTime">开始时间 (optional)</param>
        /// <param name="endTime">结束时间 (optional)</param>
        /// <param name="explain">查看执行计划 (optional, default to false)</param>
        /// <param name="take">默认为10 (optional, default to 10)</param>
        /// <param name="skip">默认为0 (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStorageListApiResponse"/>&gt;</returns>
        Task<IStorageListApiResponse> StorageListAsync(string table, string appKey, Option<string> filter = default, Option<string> project = default, Option<string> sort = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<bool> explain = default, Option<int> take = default, Option<int> skip = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 查询数据
        /// </summary>
        /// <remarks>
        /// 根据条件查询指定表中的数据
        /// </remarks>
        /// <param name="table">表名称</param>
        /// <param name="appKey"></param>
        /// <param name="filter">过滤，json格式 (optional)</param>
        /// <param name="project">字段映射，json格式 (optional)</param>
        /// <param name="sort">排序，json格式 (optional)</param>
        /// <param name="startTime">开始时间 (optional)</param>
        /// <param name="endTime">结束时间 (optional)</param>
        /// <param name="explain">查看执行计划 (optional, default to false)</param>
        /// <param name="take">默认为10 (optional, default to 10)</param>
        /// <param name="skip">默认为0 (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStorageListApiResponse"/>&gt;</returns>
        Task<IStorageListApiResponse> StorageListOrDefaultAsync(string table, string appKey, Option<string> filter = default, Option<string> project = default, Option<string> sort = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<bool> explain = default, Option<int> take = default, Option<int> skip = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 添加数据
        /// </summary>
        /// <remarks>
        /// 向指定表中添加数据，可以是单个json对象或json数组
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="table">表名称（小写字母加数字,1-50位）</param>
        /// <param name="appKey"></param>
        /// <param name="requestBody">json对象 / json数组</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStoragePostApiResponse"/>&gt;</returns>
        Task<IStoragePostApiResponse> StoragePostAsync(string table, string appKey, List<Object> requestBody, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 添加数据
        /// </summary>
        /// <remarks>
        /// 向指定表中添加数据，可以是单个json对象或json数组
        /// </remarks>
        /// <param name="table">表名称（小写字母加数字,1-50位）</param>
        /// <param name="appKey"></param>
        /// <param name="requestBody">json对象 / json数组</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStoragePostApiResponse"/>&gt;</returns>
        Task<IStoragePostApiResponse> StoragePostOrDefaultAsync(string table, string appKey, List<Object> requestBody, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 更新数据
        /// </summary>
        /// <remarks>
        /// 更新指定表中指定ID的数据，可以选择全量更新或部分更新
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="table">表名称</param>
        /// <param name="id">数据ID</param>
        /// <param name="appKey"></param>
        /// <param name="requestBody">json格式</param>
        /// <param name="replace">是否为全量更新，默认为false (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStoragePutApiResponse"/>&gt;</returns>
        Task<IStoragePutApiResponse> StoragePutAsync(string table, string id, string appKey, List<Object> requestBody, Option<bool> replace = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 更新数据
        /// </summary>
        /// <remarks>
        /// 更新指定表中指定ID的数据，可以选择全量更新或部分更新
        /// </remarks>
        /// <param name="table">表名称</param>
        /// <param name="id">数据ID</param>
        /// <param name="appKey"></param>
        /// <param name="requestBody">json格式</param>
        /// <param name="replace">是否为全量更新，默认为false (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStoragePutApiResponse"/>&gt;</returns>
        Task<IStoragePutApiResponse> StoragePutOrDefaultAsync(string table, string id, string appKey, List<Object> requestBody, Option<bool> replace = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IStorageAggregateApiResponse"/>
    /// </summary>
    public interface IStorageAggregateApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.ObjectListApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IStorageDeleteApiResponse"/>
    /// </summary>
    public interface IStorageDeleteApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.BooleanApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IStorageDetailApiResponse"/>
    /// </summary>
    public interface IStorageDetailApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.ObjectApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IStorageListApiResponse"/>
    /// </summary>
    public interface IStorageListApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.StorageListResultApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IStoragePostApiResponse"/>
    /// </summary>
    public interface IStoragePostApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.StringApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IStoragePutApiResponse"/>
    /// </summary>
    public interface IStoragePutApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.BooleanApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class StorageApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnStorageAggregate;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorStorageAggregate;

        internal void ExecuteOnStorageAggregate(StorageApi.StorageAggregateApiResponse apiResponse)
        {
            OnStorageAggregate?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorStorageAggregate(Exception exception)
        {
            OnErrorStorageAggregate?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnStorageDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorStorageDelete;

        internal void ExecuteOnStorageDelete(StorageApi.StorageDeleteApiResponse apiResponse)
        {
            OnStorageDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorStorageDelete(Exception exception)
        {
            OnErrorStorageDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnStorageDetail;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorStorageDetail;

        internal void ExecuteOnStorageDetail(StorageApi.StorageDetailApiResponse apiResponse)
        {
            OnStorageDetail?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorStorageDetail(Exception exception)
        {
            OnErrorStorageDetail?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnStorageList;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorStorageList;

        internal void ExecuteOnStorageList(StorageApi.StorageListApiResponse apiResponse)
        {
            OnStorageList?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorStorageList(Exception exception)
        {
            OnErrorStorageList?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnStoragePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorStoragePost;

        internal void ExecuteOnStoragePost(StorageApi.StoragePostApiResponse apiResponse)
        {
            OnStoragePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorStoragePost(Exception exception)
        {
            OnErrorStoragePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnStoragePut;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorStoragePut;

        internal void ExecuteOnStoragePut(StorageApi.StoragePutApiResponse apiResponse)
        {
            OnStoragePut?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorStoragePut(Exception exception)
        {
            OnErrorStoragePut?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class StorageApi : IStorageApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<StorageApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public StorageApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="StorageApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StorageApi(ILogger<StorageApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, StorageApiEvents storageApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<StorageApi>();
            HttpClient = httpClient;
            Events = storageApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatStorageAggregate(ref string table, ref string appKey, ref Option<string> pipeline);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="table"></param>
        /// <param name="appKey"></param>
        /// <param name="pipeline"></param>
        /// <returns></returns>
        private void ValidateStorageAggregate(string table, string appKey, Option<string> pipeline)
        {
            if (table == null)
                throw new ArgumentNullException(nameof(table));

            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (pipeline.IsSet && pipeline.Value == null)
                throw new ArgumentNullException(nameof(pipeline));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="table"></param>
        /// <param name="appKey"></param>
        /// <param name="pipeline"></param>
        private void AfterStorageAggregateDefaultImplementation(IStorageAggregateApiResponse apiResponseLocalVar, string table, string appKey, Option<string> pipeline)
        {
            bool suppressDefaultLog = false;
            AfterStorageAggregate(ref suppressDefaultLog, apiResponseLocalVar, table, appKey, pipeline);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="table"></param>
        /// <param name="appKey"></param>
        /// <param name="pipeline"></param>
        partial void AfterStorageAggregate(ref bool suppressDefaultLog, IStorageAggregateApiResponse apiResponseLocalVar, string table, string appKey, Option<string> pipeline);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="table"></param>
        /// <param name="appKey"></param>
        /// <param name="pipeline"></param>
        private void OnErrorStorageAggregateDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string table, string appKey, Option<string> pipeline)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorStorageAggregate(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, table, appKey, pipeline);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="table"></param>
        /// <param name="appKey"></param>
        /// <param name="pipeline"></param>
        partial void OnErrorStorageAggregate(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string table, string appKey, Option<string> pipeline);

        /// <summary>
        /// 聚合查询 根据聚合管道查询指定表中的数据
        /// </summary>
        /// <param name="table">表名称</param>
        /// <param name="appKey"></param>
        /// <param name="pipeline">构建聚合查询 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStorageAggregateApiResponse"/>&gt;</returns>
        public async Task<IStorageAggregateApiResponse> StorageAggregateOrDefaultAsync(string table, string appKey, Option<string> pipeline = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await StorageAggregateAsync(table, appKey, pipeline, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 聚合查询 根据聚合管道查询指定表中的数据
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="table">表名称</param>
        /// <param name="appKey"></param>
        /// <param name="pipeline">构建聚合查询 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStorageAggregateApiResponse"/>&gt;</returns>
        public async Task<IStorageAggregateApiResponse> StorageAggregateAsync(string table, string appKey, Option<string> pipeline = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateStorageAggregate(table, appKey, pipeline);

                FormatStorageAggregate(ref table, ref appKey, ref pipeline);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Storage/{appKey}/{table}/Aggregate";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Btable%7D", Uri.EscapeDataString(table.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (pipeline.IsSet)
                        parseQueryStringLocalVar["pipeline"] = ClientUtils.ParameterToString(pipeline.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<StorageAggregateApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<StorageAggregateApiResponse>();

                        StorageAggregateApiResponse apiResponseLocalVar = new StorageAggregateApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Storage/{appKey}/{table}/Aggregate", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterStorageAggregateDefaultImplementation(apiResponseLocalVar, table, appKey, pipeline);

                        Events.ExecuteOnStorageAggregate(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorStorageAggregateDefaultImplementation(e, "/Storage/{appKey}/{table}/Aggregate", uriBuilderLocalVar.Path, table, appKey, pipeline);
                Events.ExecuteOnErrorStorageAggregate(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="StorageAggregateApiResponse"/>
        /// </summary>
        public partial class StorageAggregateApiResponse : ZSGF.Client.Client.ApiResponse, IStorageAggregateApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<StorageAggregateApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="StorageAggregateApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public StorageAggregateApiResponse(ILogger<StorageAggregateApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.ObjectListApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.ObjectListApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.ObjectListApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatStorageDelete(ref string table, ref string id, ref string appKey);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="table"></param>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        /// <returns></returns>
        private void ValidateStorageDelete(string table, string id, string appKey)
        {
            if (table == null)
                throw new ArgumentNullException(nameof(table));

            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="table"></param>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        private void AfterStorageDeleteDefaultImplementation(IStorageDeleteApiResponse apiResponseLocalVar, string table, string id, string appKey)
        {
            bool suppressDefaultLog = false;
            AfterStorageDelete(ref suppressDefaultLog, apiResponseLocalVar, table, id, appKey);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="table"></param>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        partial void AfterStorageDelete(ref bool suppressDefaultLog, IStorageDeleteApiResponse apiResponseLocalVar, string table, string id, string appKey);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="table"></param>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        private void OnErrorStorageDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string table, string id, string appKey)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorStorageDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, table, id, appKey);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="table"></param>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        partial void OnErrorStorageDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string table, string id, string appKey);

        /// <summary>
        /// 删除数据 删除指定表中指定ID的数据
        /// </summary>
        /// <param name="table">表名称</param>
        /// <param name="id">数据ID</param>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStorageDeleteApiResponse"/>&gt;</returns>
        public async Task<IStorageDeleteApiResponse> StorageDeleteOrDefaultAsync(string table, string id, string appKey, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await StorageDeleteAsync(table, id, appKey, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 删除数据 删除指定表中指定ID的数据
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="table">表名称</param>
        /// <param name="id">数据ID</param>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStorageDeleteApiResponse"/>&gt;</returns>
        public async Task<IStorageDeleteApiResponse> StorageDeleteAsync(string table, string id, string appKey, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateStorageDelete(table, id, appKey);

                FormatStorageDelete(ref table, ref id, ref appKey);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Storage/{appKey}/{table}/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Btable%7D", Uri.EscapeDataString(table.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<StorageDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<StorageDeleteApiResponse>();

                        StorageDeleteApiResponse apiResponseLocalVar = new StorageDeleteApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Storage/{appKey}/{table}/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterStorageDeleteDefaultImplementation(apiResponseLocalVar, table, id, appKey);

                        Events.ExecuteOnStorageDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorStorageDeleteDefaultImplementation(e, "/Storage/{appKey}/{table}/{id}", uriBuilderLocalVar.Path, table, id, appKey);
                Events.ExecuteOnErrorStorageDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="StorageDeleteApiResponse"/>
        /// </summary>
        public partial class StorageDeleteApiResponse : ZSGF.Client.Client.ApiResponse, IStorageDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<StorageDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="StorageDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public StorageDeleteApiResponse(ILogger<StorageDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.BooleanApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.BooleanApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.BooleanApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatStorageDetail(ref string table, ref string id, ref string appKey, ref Option<string> project);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="table"></param>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        /// <param name="project"></param>
        /// <returns></returns>
        private void ValidateStorageDetail(string table, string id, string appKey, Option<string> project)
        {
            if (table == null)
                throw new ArgumentNullException(nameof(table));

            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (project.IsSet && project.Value == null)
                throw new ArgumentNullException(nameof(project));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="table"></param>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        /// <param name="project"></param>
        private void AfterStorageDetailDefaultImplementation(IStorageDetailApiResponse apiResponseLocalVar, string table, string id, string appKey, Option<string> project)
        {
            bool suppressDefaultLog = false;
            AfterStorageDetail(ref suppressDefaultLog, apiResponseLocalVar, table, id, appKey, project);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="table"></param>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        /// <param name="project"></param>
        partial void AfterStorageDetail(ref bool suppressDefaultLog, IStorageDetailApiResponse apiResponseLocalVar, string table, string id, string appKey, Option<string> project);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="table"></param>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        /// <param name="project"></param>
        private void OnErrorStorageDetailDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string table, string id, string appKey, Option<string> project)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorStorageDetail(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, table, id, appKey, project);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="table"></param>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        /// <param name="project"></param>
        partial void OnErrorStorageDetail(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string table, string id, string appKey, Option<string> project);

        /// <summary>
        /// 数据详情 获取指定表中指定ID的数据详情
        /// </summary>
        /// <param name="table">表名称</param>
        /// <param name="id">数据ID</param>
        /// <param name="appKey"></param>
        /// <param name="project">json格式 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStorageDetailApiResponse"/>&gt;</returns>
        public async Task<IStorageDetailApiResponse> StorageDetailOrDefaultAsync(string table, string id, string appKey, Option<string> project = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await StorageDetailAsync(table, id, appKey, project, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 数据详情 获取指定表中指定ID的数据详情
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="table">表名称</param>
        /// <param name="id">数据ID</param>
        /// <param name="appKey"></param>
        /// <param name="project">json格式 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStorageDetailApiResponse"/>&gt;</returns>
        public async Task<IStorageDetailApiResponse> StorageDetailAsync(string table, string id, string appKey, Option<string> project = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateStorageDetail(table, id, appKey, project);

                FormatStorageDetail(ref table, ref id, ref appKey, ref project);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Storage/{appKey}/{table}/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Btable%7D", Uri.EscapeDataString(table.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (project.IsSet)
                        parseQueryStringLocalVar["project"] = ClientUtils.ParameterToString(project.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<StorageDetailApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<StorageDetailApiResponse>();

                        StorageDetailApiResponse apiResponseLocalVar = new StorageDetailApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Storage/{appKey}/{table}/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterStorageDetailDefaultImplementation(apiResponseLocalVar, table, id, appKey, project);

                        Events.ExecuteOnStorageDetail(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorStorageDetailDefaultImplementation(e, "/Storage/{appKey}/{table}/{id}", uriBuilderLocalVar.Path, table, id, appKey, project);
                Events.ExecuteOnErrorStorageDetail(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="StorageDetailApiResponse"/>
        /// </summary>
        public partial class StorageDetailApiResponse : ZSGF.Client.Client.ApiResponse, IStorageDetailApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<StorageDetailApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="StorageDetailApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public StorageDetailApiResponse(ILogger<StorageDetailApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.ObjectApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.ObjectApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.ObjectApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatStorageList(ref string table, ref string appKey, ref Option<string> filter, ref Option<string> project, ref Option<string> sort, ref Option<DateTime> startTime, ref Option<DateTime> endTime, ref Option<bool> explain, ref Option<int> take, ref Option<int> skip);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="table"></param>
        /// <param name="appKey"></param>
        /// <param name="filter"></param>
        /// <param name="project"></param>
        /// <param name="sort"></param>
        /// <returns></returns>
        private void ValidateStorageList(string table, string appKey, Option<string> filter, Option<string> project, Option<string> sort)
        {
            if (table == null)
                throw new ArgumentNullException(nameof(table));

            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (filter.IsSet && filter.Value == null)
                throw new ArgumentNullException(nameof(filter));

            if (project.IsSet && project.Value == null)
                throw new ArgumentNullException(nameof(project));

            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="table"></param>
        /// <param name="appKey"></param>
        /// <param name="filter"></param>
        /// <param name="project"></param>
        /// <param name="sort"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="explain"></param>
        /// <param name="take"></param>
        /// <param name="skip"></param>
        private void AfterStorageListDefaultImplementation(IStorageListApiResponse apiResponseLocalVar, string table, string appKey, Option<string> filter, Option<string> project, Option<string> sort, Option<DateTime> startTime, Option<DateTime> endTime, Option<bool> explain, Option<int> take, Option<int> skip)
        {
            bool suppressDefaultLog = false;
            AfterStorageList(ref suppressDefaultLog, apiResponseLocalVar, table, appKey, filter, project, sort, startTime, endTime, explain, take, skip);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="table"></param>
        /// <param name="appKey"></param>
        /// <param name="filter"></param>
        /// <param name="project"></param>
        /// <param name="sort"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="explain"></param>
        /// <param name="take"></param>
        /// <param name="skip"></param>
        partial void AfterStorageList(ref bool suppressDefaultLog, IStorageListApiResponse apiResponseLocalVar, string table, string appKey, Option<string> filter, Option<string> project, Option<string> sort, Option<DateTime> startTime, Option<DateTime> endTime, Option<bool> explain, Option<int> take, Option<int> skip);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="table"></param>
        /// <param name="appKey"></param>
        /// <param name="filter"></param>
        /// <param name="project"></param>
        /// <param name="sort"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="explain"></param>
        /// <param name="take"></param>
        /// <param name="skip"></param>
        private void OnErrorStorageListDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string table, string appKey, Option<string> filter, Option<string> project, Option<string> sort, Option<DateTime> startTime, Option<DateTime> endTime, Option<bool> explain, Option<int> take, Option<int> skip)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorStorageList(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, table, appKey, filter, project, sort, startTime, endTime, explain, take, skip);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="table"></param>
        /// <param name="appKey"></param>
        /// <param name="filter"></param>
        /// <param name="project"></param>
        /// <param name="sort"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="explain"></param>
        /// <param name="take"></param>
        /// <param name="skip"></param>
        partial void OnErrorStorageList(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string table, string appKey, Option<string> filter, Option<string> project, Option<string> sort, Option<DateTime> startTime, Option<DateTime> endTime, Option<bool> explain, Option<int> take, Option<int> skip);

        /// <summary>
        /// 查询数据 根据条件查询指定表中的数据
        /// </summary>
        /// <param name="table">表名称</param>
        /// <param name="appKey"></param>
        /// <param name="filter">过滤，json格式 (optional)</param>
        /// <param name="project">字段映射，json格式 (optional)</param>
        /// <param name="sort">排序，json格式 (optional)</param>
        /// <param name="startTime">开始时间 (optional)</param>
        /// <param name="endTime">结束时间 (optional)</param>
        /// <param name="explain">查看执行计划 (optional, default to false)</param>
        /// <param name="take">默认为10 (optional, default to 10)</param>
        /// <param name="skip">默认为0 (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStorageListApiResponse"/>&gt;</returns>
        public async Task<IStorageListApiResponse> StorageListOrDefaultAsync(string table, string appKey, Option<string> filter = default, Option<string> project = default, Option<string> sort = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<bool> explain = default, Option<int> take = default, Option<int> skip = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await StorageListAsync(table, appKey, filter, project, sort, startTime, endTime, explain, take, skip, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 查询数据 根据条件查询指定表中的数据
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="table">表名称</param>
        /// <param name="appKey"></param>
        /// <param name="filter">过滤，json格式 (optional)</param>
        /// <param name="project">字段映射，json格式 (optional)</param>
        /// <param name="sort">排序，json格式 (optional)</param>
        /// <param name="startTime">开始时间 (optional)</param>
        /// <param name="endTime">结束时间 (optional)</param>
        /// <param name="explain">查看执行计划 (optional, default to false)</param>
        /// <param name="take">默认为10 (optional, default to 10)</param>
        /// <param name="skip">默认为0 (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStorageListApiResponse"/>&gt;</returns>
        public async Task<IStorageListApiResponse> StorageListAsync(string table, string appKey, Option<string> filter = default, Option<string> project = default, Option<string> sort = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<bool> explain = default, Option<int> take = default, Option<int> skip = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateStorageList(table, appKey, filter, project, sort);

                FormatStorageList(ref table, ref appKey, ref filter, ref project, ref sort, ref startTime, ref endTime, ref explain, ref take, ref skip);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Storage/{appKey}/{table}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Btable%7D", Uri.EscapeDataString(table.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (filter.IsSet)
                        parseQueryStringLocalVar["filter"] = ClientUtils.ParameterToString(filter.Value);

                    if (project.IsSet)
                        parseQueryStringLocalVar["project"] = ClientUtils.ParameterToString(project.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    if (startTime.IsSet)
                        parseQueryStringLocalVar["startTime"] = ClientUtils.ParameterToString(startTime.Value);

                    if (endTime.IsSet)
                        parseQueryStringLocalVar["endTime"] = ClientUtils.ParameterToString(endTime.Value);

                    if (explain.IsSet)
                        parseQueryStringLocalVar["explain"] = ClientUtils.ParameterToString(explain.Value);

                    if (take.IsSet)
                        parseQueryStringLocalVar["take"] = ClientUtils.ParameterToString(take.Value);

                    if (skip.IsSet)
                        parseQueryStringLocalVar["skip"] = ClientUtils.ParameterToString(skip.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<StorageListApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<StorageListApiResponse>();

                        StorageListApiResponse apiResponseLocalVar = new StorageListApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Storage/{appKey}/{table}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterStorageListDefaultImplementation(apiResponseLocalVar, table, appKey, filter, project, sort, startTime, endTime, explain, take, skip);

                        Events.ExecuteOnStorageList(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorStorageListDefaultImplementation(e, "/Storage/{appKey}/{table}", uriBuilderLocalVar.Path, table, appKey, filter, project, sort, startTime, endTime, explain, take, skip);
                Events.ExecuteOnErrorStorageList(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="StorageListApiResponse"/>
        /// </summary>
        public partial class StorageListApiResponse : ZSGF.Client.Client.ApiResponse, IStorageListApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<StorageListApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="StorageListApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public StorageListApiResponse(ILogger<StorageListApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.StorageListResultApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.StorageListResultApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.StorageListResultApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatStoragePost(ref string table, ref string appKey, List<Object> requestBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="table"></param>
        /// <param name="appKey"></param>
        /// <param name="requestBody"></param>
        /// <returns></returns>
        private void ValidateStoragePost(string table, string appKey, List<Object> requestBody)
        {
            if (table == null)
                throw new ArgumentNullException(nameof(table));

            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (requestBody == null)
                throw new ArgumentNullException(nameof(requestBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="table"></param>
        /// <param name="appKey"></param>
        /// <param name="requestBody"></param>
        private void AfterStoragePostDefaultImplementation(IStoragePostApiResponse apiResponseLocalVar, string table, string appKey, List<Object> requestBody)
        {
            bool suppressDefaultLog = false;
            AfterStoragePost(ref suppressDefaultLog, apiResponseLocalVar, table, appKey, requestBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="table"></param>
        /// <param name="appKey"></param>
        /// <param name="requestBody"></param>
        partial void AfterStoragePost(ref bool suppressDefaultLog, IStoragePostApiResponse apiResponseLocalVar, string table, string appKey, List<Object> requestBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="table"></param>
        /// <param name="appKey"></param>
        /// <param name="requestBody"></param>
        private void OnErrorStoragePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string table, string appKey, List<Object> requestBody)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorStoragePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, table, appKey, requestBody);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="table"></param>
        /// <param name="appKey"></param>
        /// <param name="requestBody"></param>
        partial void OnErrorStoragePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string table, string appKey, List<Object> requestBody);

        /// <summary>
        /// 添加数据 向指定表中添加数据，可以是单个json对象或json数组
        /// </summary>
        /// <param name="table">表名称（小写字母加数字,1-50位）</param>
        /// <param name="appKey"></param>
        /// <param name="requestBody">json对象 / json数组</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStoragePostApiResponse"/>&gt;</returns>
        public async Task<IStoragePostApiResponse> StoragePostOrDefaultAsync(string table, string appKey, List<Object> requestBody, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await StoragePostAsync(table, appKey, requestBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 添加数据 向指定表中添加数据，可以是单个json对象或json数组
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="table">表名称（小写字母加数字,1-50位）</param>
        /// <param name="appKey"></param>
        /// <param name="requestBody">json对象 / json数组</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStoragePostApiResponse"/>&gt;</returns>
        public async Task<IStoragePostApiResponse> StoragePostAsync(string table, string appKey, List<Object> requestBody, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateStoragePost(table, appKey, requestBody);

                FormatStoragePost(ref table, ref appKey, requestBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Storage/{appKey}/{table}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Btable%7D", Uri.EscapeDataString(table.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    httpRequestMessageLocalVar.Content = (requestBody as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(requestBody, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<StoragePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<StoragePostApiResponse>();

                        StoragePostApiResponse apiResponseLocalVar = new StoragePostApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Storage/{appKey}/{table}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterStoragePostDefaultImplementation(apiResponseLocalVar, table, appKey, requestBody);

                        Events.ExecuteOnStoragePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorStoragePostDefaultImplementation(e, "/Storage/{appKey}/{table}", uriBuilderLocalVar.Path, table, appKey, requestBody);
                Events.ExecuteOnErrorStoragePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="StoragePostApiResponse"/>
        /// </summary>
        public partial class StoragePostApiResponse : ZSGF.Client.Client.ApiResponse, IStoragePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<StoragePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="StoragePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public StoragePostApiResponse(ILogger<StoragePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.StringApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.StringApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.StringApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatStoragePut(ref string table, ref string id, ref string appKey, List<Object> requestBody, ref Option<bool> replace);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="table"></param>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        /// <param name="requestBody"></param>
        /// <returns></returns>
        private void ValidateStoragePut(string table, string id, string appKey, List<Object> requestBody)
        {
            if (table == null)
                throw new ArgumentNullException(nameof(table));

            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (requestBody == null)
                throw new ArgumentNullException(nameof(requestBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="table"></param>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        /// <param name="requestBody"></param>
        /// <param name="replace"></param>
        private void AfterStoragePutDefaultImplementation(IStoragePutApiResponse apiResponseLocalVar, string table, string id, string appKey, List<Object> requestBody, Option<bool> replace)
        {
            bool suppressDefaultLog = false;
            AfterStoragePut(ref suppressDefaultLog, apiResponseLocalVar, table, id, appKey, requestBody, replace);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="table"></param>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        /// <param name="requestBody"></param>
        /// <param name="replace"></param>
        partial void AfterStoragePut(ref bool suppressDefaultLog, IStoragePutApiResponse apiResponseLocalVar, string table, string id, string appKey, List<Object> requestBody, Option<bool> replace);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="table"></param>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        /// <param name="requestBody"></param>
        /// <param name="replace"></param>
        private void OnErrorStoragePutDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string table, string id, string appKey, List<Object> requestBody, Option<bool> replace)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorStoragePut(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, table, id, appKey, requestBody, replace);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="table"></param>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        /// <param name="requestBody"></param>
        /// <param name="replace"></param>
        partial void OnErrorStoragePut(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string table, string id, string appKey, List<Object> requestBody, Option<bool> replace);

        /// <summary>
        /// 更新数据 更新指定表中指定ID的数据，可以选择全量更新或部分更新
        /// </summary>
        /// <param name="table">表名称</param>
        /// <param name="id">数据ID</param>
        /// <param name="appKey"></param>
        /// <param name="requestBody">json格式</param>
        /// <param name="replace">是否为全量更新，默认为false (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStoragePutApiResponse"/>&gt;</returns>
        public async Task<IStoragePutApiResponse> StoragePutOrDefaultAsync(string table, string id, string appKey, List<Object> requestBody, Option<bool> replace = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await StoragePutAsync(table, id, appKey, requestBody, replace, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 更新数据 更新指定表中指定ID的数据，可以选择全量更新或部分更新
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="table">表名称</param>
        /// <param name="id">数据ID</param>
        /// <param name="appKey"></param>
        /// <param name="requestBody">json格式</param>
        /// <param name="replace">是否为全量更新，默认为false (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStoragePutApiResponse"/>&gt;</returns>
        public async Task<IStoragePutApiResponse> StoragePutAsync(string table, string id, string appKey, List<Object> requestBody, Option<bool> replace = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateStoragePut(table, id, appKey, requestBody);

                FormatStoragePut(ref table, ref id, ref appKey, requestBody, ref replace);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Storage/{appKey}/{table}/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Btable%7D", Uri.EscapeDataString(table.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (replace.IsSet)
                        parseQueryStringLocalVar["replace"] = ClientUtils.ParameterToString(replace.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Content = (requestBody as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(requestBody, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PUT");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<StoragePutApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<StoragePutApiResponse>();

                        StoragePutApiResponse apiResponseLocalVar = new StoragePutApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Storage/{appKey}/{table}/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterStoragePutDefaultImplementation(apiResponseLocalVar, table, id, appKey, requestBody, replace);

                        Events.ExecuteOnStoragePut(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorStoragePutDefaultImplementation(e, "/Storage/{appKey}/{table}/{id}", uriBuilderLocalVar.Path, table, id, appKey, requestBody, replace);
                Events.ExecuteOnErrorStoragePut(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="StoragePutApiResponse"/>
        /// </summary>
        public partial class StoragePutApiResponse : ZSGF.Client.Client.ApiResponse, IStoragePutApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<StoragePutApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="StoragePutApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public StoragePutApiResponse(ILogger<StoragePutApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.BooleanApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.BooleanApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.BooleanApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
