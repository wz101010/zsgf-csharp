// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using ZSGF.Client.Client;
using ZSGF.Client.Model;

namespace ZSGF.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IUserFriendsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        UserFriendsApiEvents Events { get; }

        /// <summary>
        /// 推荐相似兴趣用户
        /// </summary>
        /// <remarks>
        /// 推荐有共同爱好的用户
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="tag">兴趣标签 (optional)</param>
        /// <param name="skip">跳过的记录数 (optional, default to 0)</param>
        /// <param name="take">获取的记录数 (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserCommonInterestsApiResponse"/>&gt;</returns>
        Task<IUserCommonInterestsApiResponse> UserCommonInterestsAsync(string appKey, Option<string> tag = default, Option<int> skip = default, Option<int> take = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 推荐相似兴趣用户
        /// </summary>
        /// <remarks>
        /// 推荐有共同爱好的用户
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="tag">兴趣标签 (optional)</param>
        /// <param name="skip">跳过的记录数 (optional, default to 0)</param>
        /// <param name="take">获取的记录数 (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserCommonInterestsApiResponse"/>&gt;</returns>
        Task<IUserCommonInterestsApiResponse> UserCommonInterestsOrDefaultAsync(string appKey, Option<string> tag = default, Option<int> skip = default, Option<int> take = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 添加关注
        /// </summary>
        /// <remarks>
        /// 关注指定用户
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">要关注的用户ID</param>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserFollowUserApiResponse"/>&gt;</returns>
        Task<IUserFollowUserApiResponse> UserFollowUserAsync(long userId, string appKey, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 添加关注
        /// </summary>
        /// <remarks>
        /// 关注指定用户
        /// </remarks>
        /// <param name="userId">要关注的用户ID</param>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserFollowUserApiResponse"/>&gt;</returns>
        Task<IUserFollowUserApiResponse> UserFollowUserOrDefaultAsync(long userId, string appKey, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 刷新粉丝数据
        /// </summary>
        /// <remarks>
        /// 根据粉丝ID更新粉丝信息
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">粉丝ID</param>
        /// <param name="appKey"></param>
        /// <param name="followerPutModel">更新粉丝的请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserFollowerPutApiResponse"/>&gt;</returns>
        Task<IUserFollowerPutApiResponse> UserFollowerPutAsync(long id, string appKey, Option<FollowerPutModel> followerPutModel = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 刷新粉丝数据
        /// </summary>
        /// <remarks>
        /// 根据粉丝ID更新粉丝信息
        /// </remarks>
        /// <param name="id">粉丝ID</param>
        /// <param name="appKey"></param>
        /// <param name="followerPutModel">更新粉丝的请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserFollowerPutApiResponse"/>&gt;</returns>
        Task<IUserFollowerPutApiResponse> UserFollowerPutOrDefaultAsync(long id, string appKey, Option<FollowerPutModel> followerPutModel = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取粉丝列表
        /// </summary>
        /// <remarks>
        /// 根据条件获取我的粉丝列表
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="tag">标签 (optional)</param>
        /// <param name="status">状态 (optional)</param>
        /// <param name="targetUserId">指定用户的粉丝 (optional, default to 0)</param>
        /// <param name="skip">跳过的记录数 (optional, default to 0)</param>
        /// <param name="take">获取的记录数 (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserFollowersApiResponse"/>&gt;</returns>
        Task<IUserFollowersApiResponse> UserFollowersAsync(string appKey, Option<string> tag = default, Option<string> status = default, Option<long> targetUserId = default, Option<int> skip = default, Option<int> take = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取粉丝列表
        /// </summary>
        /// <remarks>
        /// 根据条件获取我的粉丝列表
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="tag">标签 (optional)</param>
        /// <param name="status">状态 (optional)</param>
        /// <param name="targetUserId">指定用户的粉丝 (optional, default to 0)</param>
        /// <param name="skip">跳过的记录数 (optional, default to 0)</param>
        /// <param name="take">获取的记录数 (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserFollowersApiResponse"/>&gt;</returns>
        Task<IUserFollowersApiResponse> UserFollowersOrDefaultAsync(string appKey, Option<string> tag = default, Option<string> status = default, Option<long> targetUserId = default, Option<int> skip = default, Option<int> take = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取关注列表 / 判断是否关注
        /// </summary>
        /// <remarks>
        /// 根据条件获取我的关注列表，或判断是否关注某个用户
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="tag">用于过滤关注列表的标签（可选）。 (optional)</param>
        /// <param name="status">用于过滤关注列表的状态（可选）。 (optional)</param>
        /// <param name="targetUserId">指定用户的关注记录，如果不提供则默认为当前用户的关注。 (optional, default to 0)</param>
        /// <param name="skip">跳过的记录数，用于分页（默认0）。 (optional, default to 0)</param>
        /// <param name="take">获取的记录数，用于分页（默认10）。 (optional, default to 10)</param>
        /// <param name="checkUserId">要判断是否关注的目标用户ID。如果提供此参数，方法将返回一个布尔值，表示当前用户是否关注该目标用户。 (optional)</param>
        /// <param name="onlyIDs">是否只返回关注用户的ID集合，默认为false（即返回完整的关注用户信息）。 (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserFollowingApiResponse"/>&gt;</returns>
        Task<IUserFollowingApiResponse> UserFollowingAsync(string appKey, Option<string> tag = default, Option<string> status = default, Option<long> targetUserId = default, Option<int> skip = default, Option<int> take = default, Option<long> checkUserId = default, Option<bool> onlyIDs = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取关注列表 / 判断是否关注
        /// </summary>
        /// <remarks>
        /// 根据条件获取我的关注列表，或判断是否关注某个用户
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="tag">用于过滤关注列表的标签（可选）。 (optional)</param>
        /// <param name="status">用于过滤关注列表的状态（可选）。 (optional)</param>
        /// <param name="targetUserId">指定用户的关注记录，如果不提供则默认为当前用户的关注。 (optional, default to 0)</param>
        /// <param name="skip">跳过的记录数，用于分页（默认0）。 (optional, default to 0)</param>
        /// <param name="take">获取的记录数，用于分页（默认10）。 (optional, default to 10)</param>
        /// <param name="checkUserId">要判断是否关注的目标用户ID。如果提供此参数，方法将返回一个布尔值，表示当前用户是否关注该目标用户。 (optional)</param>
        /// <param name="onlyIDs">是否只返回关注用户的ID集合，默认为false（即返回完整的关注用户信息）。 (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserFollowingApiResponse"/>&gt;</returns>
        Task<IUserFollowingApiResponse> UserFollowingOrDefaultAsync(string appKey, Option<string> tag = default, Option<string> status = default, Option<long> targetUserId = default, Option<int> skip = default, Option<int> take = default, Option<long> checkUserId = default, Option<bool> onlyIDs = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 推荐附近用户
        /// </summary>
        /// <remarks>
        /// 根据地理位置坐标和多种筛选条件，查询附近满足条件的用户列表，支持分页和按距离排序。 地理位置查询使用MySQL的ST_Distance_Sphere函数计算球面距离。 注意：longitude为经度(X轴)，latitude为纬度(Y轴)，参数顺序与常规坐标系一致
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">当前用户经度坐标(WGS84坐标系)</param>
        /// <param name="latitude">当前用户纬度坐标(WGS84坐标系)</param>
        /// <param name="appKey"></param>
        /// <param name="country">国家过滤条件（精确匹配） (optional)</param>
        /// <param name="state">省份过滤条件（精确匹配） (optional)</param>
        /// <param name="city">城市过滤条件（精确匹配） (optional)</param>
        /// <param name="district">区县过滤条件（精确匹配） (optional)</param>
        /// <param name="gender">性别过滤条件（可选值示例：Male/Female/Other） (optional)</param>
        /// <param name="ageS">年龄起始范围（包含，0表示不限制） (optional)</param>
        /// <param name="ageE">年龄结束范围（包含，0表示不限制） (optional)</param>
        /// <param name="tag">兴趣标签过滤（支持模糊匹配，如：\&quot;运动\&quot;） (optional)</param>
        /// <param name="distance">搜索半径（单位：米，0表示不限制距离） (optional, default to 0)</param>
        /// <param name="skip">跳过的记录数（分页起始位置，默认0） (optional, default to 0)</param>
        /// <param name="take">获取的记录数（分页大小，默认10，最大100） (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserFriendsNearByApiResponse"/>&gt;</returns>
        Task<IUserFriendsNearByApiResponse> UserFriendsNearByAsync(double longitude, double latitude, string appKey, Option<string> country = default, Option<string> state = default, Option<string> city = default, Option<string> district = default, Option<string> gender = default, Option<int> ageS = default, Option<int> ageE = default, Option<string> tag = default, Option<long> distance = default, Option<int> skip = default, Option<int> take = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 推荐附近用户
        /// </summary>
        /// <remarks>
        /// 根据地理位置坐标和多种筛选条件，查询附近满足条件的用户列表，支持分页和按距离排序。 地理位置查询使用MySQL的ST_Distance_Sphere函数计算球面距离。 注意：longitude为经度(X轴)，latitude为纬度(Y轴)，参数顺序与常规坐标系一致
        /// </remarks>
        /// <param name="longitude">当前用户经度坐标(WGS84坐标系)</param>
        /// <param name="latitude">当前用户纬度坐标(WGS84坐标系)</param>
        /// <param name="appKey"></param>
        /// <param name="country">国家过滤条件（精确匹配） (optional)</param>
        /// <param name="state">省份过滤条件（精确匹配） (optional)</param>
        /// <param name="city">城市过滤条件（精确匹配） (optional)</param>
        /// <param name="district">区县过滤条件（精确匹配） (optional)</param>
        /// <param name="gender">性别过滤条件（可选值示例：Male/Female/Other） (optional)</param>
        /// <param name="ageS">年龄起始范围（包含，0表示不限制） (optional)</param>
        /// <param name="ageE">年龄结束范围（包含，0表示不限制） (optional)</param>
        /// <param name="tag">兴趣标签过滤（支持模糊匹配，如：\&quot;运动\&quot;） (optional)</param>
        /// <param name="distance">搜索半径（单位：米，0表示不限制距离） (optional, default to 0)</param>
        /// <param name="skip">跳过的记录数（分页起始位置，默认0） (optional, default to 0)</param>
        /// <param name="take">获取的记录数（分页大小，默认10，最大100） (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserFriendsNearByApiResponse"/>&gt;</returns>
        Task<IUserFriendsNearByApiResponse> UserFriendsNearByOrDefaultAsync(double longitude, double latitude, string appKey, Option<string> country = default, Option<string> state = default, Option<string> city = default, Option<string> district = default, Option<string> gender = default, Option<int> ageS = default, Option<int> ageE = default, Option<string> tag = default, Option<long> distance = default, Option<int> skip = default, Option<int> take = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 推荐共同粉丝用户
        /// </summary>
        /// <remarks>
        /// 推荐有共同粉丝的用户
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="skip">跳过的记录数 (optional, default to 0)</param>
        /// <param name="take">获取的记录数 (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserMutualFollowersApiResponse"/>&gt;</returns>
        Task<IUserMutualFollowersApiResponse> UserMutualFollowersAsync(string appKey, Option<int> skip = default, Option<int> take = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 推荐共同粉丝用户
        /// </summary>
        /// <remarks>
        /// 推荐有共同粉丝的用户
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="skip">跳过的记录数 (optional, default to 0)</param>
        /// <param name="take">获取的记录数 (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserMutualFollowersApiResponse"/>&gt;</returns>
        Task<IUserMutualFollowersApiResponse> UserMutualFollowersOrDefaultAsync(string appKey, Option<int> skip = default, Option<int> take = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 推荐共同关注用户
        /// </summary>
        /// <remarks>
        /// 推荐有共同关注的用户
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="skip">跳过的记录数 (optional, default to 0)</param>
        /// <param name="take">获取的记录数 (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserMutualFollowingsApiResponse"/>&gt;</returns>
        Task<IUserMutualFollowingsApiResponse> UserMutualFollowingsAsync(string appKey, Option<int> skip = default, Option<int> take = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 推荐共同关注用户
        /// </summary>
        /// <remarks>
        /// 推荐有共同关注的用户
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="skip">跳过的记录数 (optional, default to 0)</param>
        /// <param name="take">获取的记录数 (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserMutualFollowingsApiResponse"/>&gt;</returns>
        Task<IUserMutualFollowingsApiResponse> UserMutualFollowingsOrDefaultAsync(string appKey, Option<int> skip = default, Option<int> take = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取用户资料
        /// </summary>
        /// <remarks>
        /// 用于他人主页展示
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">用户ID</param>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserProfileByIdApiResponse"/>&gt;</returns>
        Task<IUserProfileByIdApiResponse> UserProfileByIdAsync(long userId, string appKey, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取用户资料
        /// </summary>
        /// <remarks>
        /// 用于他人主页展示
        /// </remarks>
        /// <param name="userId">用户ID</param>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserProfileByIdApiResponse"/>&gt;</returns>
        Task<IUserProfileByIdApiResponse> UserProfileByIdOrDefaultAsync(long userId, string appKey, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 取消关注
        /// </summary>
        /// <remarks>
        /// 取消关注指定用户
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">要取消关注的用户ID</param>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserUnfollowUserApiResponse"/>&gt;</returns>
        Task<IUserUnfollowUserApiResponse> UserUnfollowUserAsync(long userId, string appKey, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 取消关注
        /// </summary>
        /// <remarks>
        /// 取消关注指定用户
        /// </remarks>
        /// <param name="userId">要取消关注的用户ID</param>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserUnfollowUserApiResponse"/>&gt;</returns>
        Task<IUserUnfollowUserApiResponse> UserUnfollowUserOrDefaultAsync(long userId, string appKey, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IUserCommonInterestsApiResponse"/>
    /// </summary>
    public interface IUserCommonInterestsApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.UserCommonInterestsResultApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUserFollowUserApiResponse"/>
    /// </summary>
    public interface IUserFollowUserApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.BooleanApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUserFollowerPutApiResponse"/>
    /// </summary>
    public interface IUserFollowerPutApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.BooleanApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUserFollowersApiResponse"/>
    /// </summary>
    public interface IUserFollowersApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.UserFollowersResultApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUserFollowingApiResponse"/>
    /// </summary>
    public interface IUserFollowingApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.BooleanApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUserFriendsNearByApiResponse"/>
    /// </summary>
    public interface IUserFriendsNearByApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.UserFriendsNearByResultApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUserMutualFollowersApiResponse"/>
    /// </summary>
    public interface IUserMutualFollowersApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.UserMutualFollowersResultApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUserMutualFollowingsApiResponse"/>
    /// </summary>
    public interface IUserMutualFollowingsApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.UserMutualFollowingsResultApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUserProfileByIdApiResponse"/>
    /// </summary>
    public interface IUserProfileByIdApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.GetUserProfileResultApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUserUnfollowUserApiResponse"/>
    /// </summary>
    public interface IUserUnfollowUserApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.BooleanApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class UserFriendsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUserCommonInterests;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUserCommonInterests;

        internal void ExecuteOnUserCommonInterests(UserFriendsApi.UserCommonInterestsApiResponse apiResponse)
        {
            OnUserCommonInterests?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUserCommonInterests(Exception exception)
        {
            OnErrorUserCommonInterests?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUserFollowUser;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUserFollowUser;

        internal void ExecuteOnUserFollowUser(UserFriendsApi.UserFollowUserApiResponse apiResponse)
        {
            OnUserFollowUser?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUserFollowUser(Exception exception)
        {
            OnErrorUserFollowUser?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUserFollowerPut;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUserFollowerPut;

        internal void ExecuteOnUserFollowerPut(UserFriendsApi.UserFollowerPutApiResponse apiResponse)
        {
            OnUserFollowerPut?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUserFollowerPut(Exception exception)
        {
            OnErrorUserFollowerPut?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUserFollowers;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUserFollowers;

        internal void ExecuteOnUserFollowers(UserFriendsApi.UserFollowersApiResponse apiResponse)
        {
            OnUserFollowers?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUserFollowers(Exception exception)
        {
            OnErrorUserFollowers?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUserFollowing;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUserFollowing;

        internal void ExecuteOnUserFollowing(UserFriendsApi.UserFollowingApiResponse apiResponse)
        {
            OnUserFollowing?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUserFollowing(Exception exception)
        {
            OnErrorUserFollowing?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUserFriendsNearBy;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUserFriendsNearBy;

        internal void ExecuteOnUserFriendsNearBy(UserFriendsApi.UserFriendsNearByApiResponse apiResponse)
        {
            OnUserFriendsNearBy?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUserFriendsNearBy(Exception exception)
        {
            OnErrorUserFriendsNearBy?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUserMutualFollowers;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUserMutualFollowers;

        internal void ExecuteOnUserMutualFollowers(UserFriendsApi.UserMutualFollowersApiResponse apiResponse)
        {
            OnUserMutualFollowers?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUserMutualFollowers(Exception exception)
        {
            OnErrorUserMutualFollowers?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUserMutualFollowings;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUserMutualFollowings;

        internal void ExecuteOnUserMutualFollowings(UserFriendsApi.UserMutualFollowingsApiResponse apiResponse)
        {
            OnUserMutualFollowings?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUserMutualFollowings(Exception exception)
        {
            OnErrorUserMutualFollowings?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUserProfileById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUserProfileById;

        internal void ExecuteOnUserProfileById(UserFriendsApi.UserProfileByIdApiResponse apiResponse)
        {
            OnUserProfileById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUserProfileById(Exception exception)
        {
            OnErrorUserProfileById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUserUnfollowUser;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUserUnfollowUser;

        internal void ExecuteOnUserUnfollowUser(UserFriendsApi.UserUnfollowUserApiResponse apiResponse)
        {
            OnUserUnfollowUser?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUserUnfollowUser(Exception exception)
        {
            OnErrorUserUnfollowUser?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class UserFriendsApi : IUserFriendsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<UserFriendsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public UserFriendsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserFriendsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserFriendsApi(ILogger<UserFriendsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, UserFriendsApiEvents userFriendsApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<UserFriendsApi>();
            HttpClient = httpClient;
            Events = userFriendsApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatUserCommonInterests(ref string appKey, ref Option<string> tag, ref Option<int> skip, ref Option<int> take);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="tag"></param>
        /// <returns></returns>
        private void ValidateUserCommonInterests(string appKey, Option<string> tag)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (tag.IsSet && tag.Value == null)
                throw new ArgumentNullException(nameof(tag));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="tag"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        private void AfterUserCommonInterestsDefaultImplementation(IUserCommonInterestsApiResponse apiResponseLocalVar, string appKey, Option<string> tag, Option<int> skip, Option<int> take)
        {
            bool suppressDefaultLog = false;
            AfterUserCommonInterests(ref suppressDefaultLog, apiResponseLocalVar, appKey, tag, skip, take);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="tag"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        partial void AfterUserCommonInterests(ref bool suppressDefaultLog, IUserCommonInterestsApiResponse apiResponseLocalVar, string appKey, Option<string> tag, Option<int> skip, Option<int> take);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="tag"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        private void OnErrorUserCommonInterestsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<string> tag, Option<int> skip, Option<int> take)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUserCommonInterests(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, tag, skip, take);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="tag"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        partial void OnErrorUserCommonInterests(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<string> tag, Option<int> skip, Option<int> take);

        /// <summary>
        /// 推荐相似兴趣用户 推荐有共同爱好的用户
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="tag">兴趣标签 (optional)</param>
        /// <param name="skip">跳过的记录数 (optional, default to 0)</param>
        /// <param name="take">获取的记录数 (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserCommonInterestsApiResponse"/>&gt;</returns>
        public async Task<IUserCommonInterestsApiResponse> UserCommonInterestsOrDefaultAsync(string appKey, Option<string> tag = default, Option<int> skip = default, Option<int> take = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UserCommonInterestsAsync(appKey, tag, skip, take, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 推荐相似兴趣用户 推荐有共同爱好的用户
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="tag">兴趣标签 (optional)</param>
        /// <param name="skip">跳过的记录数 (optional, default to 0)</param>
        /// <param name="take">获取的记录数 (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserCommonInterestsApiResponse"/>&gt;</returns>
        public async Task<IUserCommonInterestsApiResponse> UserCommonInterestsAsync(string appKey, Option<string> tag = default, Option<int> skip = default, Option<int> take = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUserCommonInterests(appKey, tag);

                FormatUserCommonInterests(ref appKey, ref tag, ref skip, ref take);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/UserFriends/{appKey}/CommonInterests";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (tag.IsSet)
                        parseQueryStringLocalVar["tag"] = ClientUtils.ParameterToString(tag.Value);

                    if (skip.IsSet)
                        parseQueryStringLocalVar["skip"] = ClientUtils.ParameterToString(skip.Value);

                    if (take.IsSet)
                        parseQueryStringLocalVar["take"] = ClientUtils.ParameterToString(take.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UserCommonInterestsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UserCommonInterestsApiResponse>();

                        UserCommonInterestsApiResponse apiResponseLocalVar = new UserCommonInterestsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/UserFriends/{appKey}/CommonInterests", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUserCommonInterestsDefaultImplementation(apiResponseLocalVar, appKey, tag, skip, take);

                        Events.ExecuteOnUserCommonInterests(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUserCommonInterestsDefaultImplementation(e, "/UserFriends/{appKey}/CommonInterests", uriBuilderLocalVar.Path, appKey, tag, skip, take);
                Events.ExecuteOnErrorUserCommonInterests(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UserCommonInterestsApiResponse"/>
        /// </summary>
        public partial class UserCommonInterestsApiResponse : ZSGF.Client.Client.ApiResponse, IUserCommonInterestsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UserCommonInterestsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UserCommonInterestsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UserCommonInterestsApiResponse(ILogger<UserCommonInterestsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.UserCommonInterestsResultApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.UserCommonInterestsResultApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.UserCommonInterestsResultApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUserFollowUser(ref long userId, ref string appKey);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <returns></returns>
        private void ValidateUserFollowUser(string appKey)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="userId"></param>
        /// <param name="appKey"></param>
        private void AfterUserFollowUserDefaultImplementation(IUserFollowUserApiResponse apiResponseLocalVar, long userId, string appKey)
        {
            bool suppressDefaultLog = false;
            AfterUserFollowUser(ref suppressDefaultLog, apiResponseLocalVar, userId, appKey);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="userId"></param>
        /// <param name="appKey"></param>
        partial void AfterUserFollowUser(ref bool suppressDefaultLog, IUserFollowUserApiResponse apiResponseLocalVar, long userId, string appKey);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="userId"></param>
        /// <param name="appKey"></param>
        private void OnErrorUserFollowUserDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long userId, string appKey)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUserFollowUser(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, userId, appKey);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="userId"></param>
        /// <param name="appKey"></param>
        partial void OnErrorUserFollowUser(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long userId, string appKey);

        /// <summary>
        /// 添加关注 关注指定用户
        /// </summary>
        /// <param name="userId">要关注的用户ID</param>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserFollowUserApiResponse"/>&gt;</returns>
        public async Task<IUserFollowUserApiResponse> UserFollowUserOrDefaultAsync(long userId, string appKey, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UserFollowUserAsync(userId, appKey, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 添加关注 关注指定用户
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">要关注的用户ID</param>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserFollowUserApiResponse"/>&gt;</returns>
        public async Task<IUserFollowUserApiResponse> UserFollowUserAsync(long userId, string appKey, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUserFollowUser(appKey);

                FormatUserFollowUser(ref userId, ref appKey);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/UserFriends/{appKey}/Follower/{userId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BuserId%7D", Uri.EscapeDataString(userId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UserFollowUserApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UserFollowUserApiResponse>();

                        UserFollowUserApiResponse apiResponseLocalVar = new UserFollowUserApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/UserFriends/{appKey}/Follower/{userId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUserFollowUserDefaultImplementation(apiResponseLocalVar, userId, appKey);

                        Events.ExecuteOnUserFollowUser(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUserFollowUserDefaultImplementation(e, "/UserFriends/{appKey}/Follower/{userId}", uriBuilderLocalVar.Path, userId, appKey);
                Events.ExecuteOnErrorUserFollowUser(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UserFollowUserApiResponse"/>
        /// </summary>
        public partial class UserFollowUserApiResponse : ZSGF.Client.Client.ApiResponse, IUserFollowUserApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UserFollowUserApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UserFollowUserApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UserFollowUserApiResponse(ILogger<UserFollowUserApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.BooleanApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.BooleanApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.BooleanApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUserFollowerPut(ref long id, ref string appKey, Option<FollowerPutModel> followerPutModel);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="followerPutModel"></param>
        /// <returns></returns>
        private void ValidateUserFollowerPut(string appKey, Option<FollowerPutModel> followerPutModel)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (followerPutModel.IsSet && followerPutModel.Value == null)
                throw new ArgumentNullException(nameof(followerPutModel));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        /// <param name="followerPutModel"></param>
        private void AfterUserFollowerPutDefaultImplementation(IUserFollowerPutApiResponse apiResponseLocalVar, long id, string appKey, Option<FollowerPutModel> followerPutModel)
        {
            bool suppressDefaultLog = false;
            AfterUserFollowerPut(ref suppressDefaultLog, apiResponseLocalVar, id, appKey, followerPutModel);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        /// <param name="followerPutModel"></param>
        partial void AfterUserFollowerPut(ref bool suppressDefaultLog, IUserFollowerPutApiResponse apiResponseLocalVar, long id, string appKey, Option<FollowerPutModel> followerPutModel);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        /// <param name="followerPutModel"></param>
        private void OnErrorUserFollowerPutDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id, string appKey, Option<FollowerPutModel> followerPutModel)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUserFollowerPut(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, appKey, followerPutModel);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        /// <param name="followerPutModel"></param>
        partial void OnErrorUserFollowerPut(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id, string appKey, Option<FollowerPutModel> followerPutModel);

        /// <summary>
        /// 刷新粉丝数据 根据粉丝ID更新粉丝信息
        /// </summary>
        /// <param name="id">粉丝ID</param>
        /// <param name="appKey"></param>
        /// <param name="followerPutModel">更新粉丝的请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserFollowerPutApiResponse"/>&gt;</returns>
        public async Task<IUserFollowerPutApiResponse> UserFollowerPutOrDefaultAsync(long id, string appKey, Option<FollowerPutModel> followerPutModel = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UserFollowerPutAsync(id, appKey, followerPutModel, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 刷新粉丝数据 根据粉丝ID更新粉丝信息
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">粉丝ID</param>
        /// <param name="appKey"></param>
        /// <param name="followerPutModel">更新粉丝的请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserFollowerPutApiResponse"/>&gt;</returns>
        public async Task<IUserFollowerPutApiResponse> UserFollowerPutAsync(long id, string appKey, Option<FollowerPutModel> followerPutModel = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUserFollowerPut(appKey, followerPutModel);

                FormatUserFollowerPut(ref id, ref appKey, followerPutModel);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/UserFriends/{appKey}/Follower/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    if (followerPutModel.IsSet)
                        httpRequestMessageLocalVar.Content = (followerPutModel.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(followerPutModel.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PUT");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UserFollowerPutApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UserFollowerPutApiResponse>();

                        UserFollowerPutApiResponse apiResponseLocalVar = new UserFollowerPutApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/UserFriends/{appKey}/Follower/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUserFollowerPutDefaultImplementation(apiResponseLocalVar, id, appKey, followerPutModel);

                        Events.ExecuteOnUserFollowerPut(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUserFollowerPutDefaultImplementation(e, "/UserFriends/{appKey}/Follower/{id}", uriBuilderLocalVar.Path, id, appKey, followerPutModel);
                Events.ExecuteOnErrorUserFollowerPut(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UserFollowerPutApiResponse"/>
        /// </summary>
        public partial class UserFollowerPutApiResponse : ZSGF.Client.Client.ApiResponse, IUserFollowerPutApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UserFollowerPutApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UserFollowerPutApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UserFollowerPutApiResponse(ILogger<UserFollowerPutApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.BooleanApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.BooleanApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.BooleanApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUserFollowers(ref string appKey, ref Option<string> tag, ref Option<string> status, ref Option<long> targetUserId, ref Option<int> skip, ref Option<int> take);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="tag"></param>
        /// <param name="status"></param>
        /// <returns></returns>
        private void ValidateUserFollowers(string appKey, Option<string> tag, Option<string> status)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (tag.IsSet && tag.Value == null)
                throw new ArgumentNullException(nameof(tag));

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="tag"></param>
        /// <param name="status"></param>
        /// <param name="targetUserId"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        private void AfterUserFollowersDefaultImplementation(IUserFollowersApiResponse apiResponseLocalVar, string appKey, Option<string> tag, Option<string> status, Option<long> targetUserId, Option<int> skip, Option<int> take)
        {
            bool suppressDefaultLog = false;
            AfterUserFollowers(ref suppressDefaultLog, apiResponseLocalVar, appKey, tag, status, targetUserId, skip, take);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="tag"></param>
        /// <param name="status"></param>
        /// <param name="targetUserId"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        partial void AfterUserFollowers(ref bool suppressDefaultLog, IUserFollowersApiResponse apiResponseLocalVar, string appKey, Option<string> tag, Option<string> status, Option<long> targetUserId, Option<int> skip, Option<int> take);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="tag"></param>
        /// <param name="status"></param>
        /// <param name="targetUserId"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        private void OnErrorUserFollowersDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<string> tag, Option<string> status, Option<long> targetUserId, Option<int> skip, Option<int> take)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUserFollowers(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, tag, status, targetUserId, skip, take);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="tag"></param>
        /// <param name="status"></param>
        /// <param name="targetUserId"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        partial void OnErrorUserFollowers(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<string> tag, Option<string> status, Option<long> targetUserId, Option<int> skip, Option<int> take);

        /// <summary>
        /// 获取粉丝列表 根据条件获取我的粉丝列表
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="tag">标签 (optional)</param>
        /// <param name="status">状态 (optional)</param>
        /// <param name="targetUserId">指定用户的粉丝 (optional, default to 0)</param>
        /// <param name="skip">跳过的记录数 (optional, default to 0)</param>
        /// <param name="take">获取的记录数 (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserFollowersApiResponse"/>&gt;</returns>
        public async Task<IUserFollowersApiResponse> UserFollowersOrDefaultAsync(string appKey, Option<string> tag = default, Option<string> status = default, Option<long> targetUserId = default, Option<int> skip = default, Option<int> take = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UserFollowersAsync(appKey, tag, status, targetUserId, skip, take, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取粉丝列表 根据条件获取我的粉丝列表
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="tag">标签 (optional)</param>
        /// <param name="status">状态 (optional)</param>
        /// <param name="targetUserId">指定用户的粉丝 (optional, default to 0)</param>
        /// <param name="skip">跳过的记录数 (optional, default to 0)</param>
        /// <param name="take">获取的记录数 (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserFollowersApiResponse"/>&gt;</returns>
        public async Task<IUserFollowersApiResponse> UserFollowersAsync(string appKey, Option<string> tag = default, Option<string> status = default, Option<long> targetUserId = default, Option<int> skip = default, Option<int> take = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUserFollowers(appKey, tag, status);

                FormatUserFollowers(ref appKey, ref tag, ref status, ref targetUserId, ref skip, ref take);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/UserFriends/{appKey}/Followers";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (tag.IsSet)
                        parseQueryStringLocalVar["tag"] = ClientUtils.ParameterToString(tag.Value);

                    if (status.IsSet)
                        parseQueryStringLocalVar["status"] = ClientUtils.ParameterToString(status.Value);

                    if (targetUserId.IsSet)
                        parseQueryStringLocalVar["targetUserId"] = ClientUtils.ParameterToString(targetUserId.Value);

                    if (skip.IsSet)
                        parseQueryStringLocalVar["skip"] = ClientUtils.ParameterToString(skip.Value);

                    if (take.IsSet)
                        parseQueryStringLocalVar["take"] = ClientUtils.ParameterToString(take.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UserFollowersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UserFollowersApiResponse>();

                        UserFollowersApiResponse apiResponseLocalVar = new UserFollowersApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/UserFriends/{appKey}/Followers", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUserFollowersDefaultImplementation(apiResponseLocalVar, appKey, tag, status, targetUserId, skip, take);

                        Events.ExecuteOnUserFollowers(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUserFollowersDefaultImplementation(e, "/UserFriends/{appKey}/Followers", uriBuilderLocalVar.Path, appKey, tag, status, targetUserId, skip, take);
                Events.ExecuteOnErrorUserFollowers(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UserFollowersApiResponse"/>
        /// </summary>
        public partial class UserFollowersApiResponse : ZSGF.Client.Client.ApiResponse, IUserFollowersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UserFollowersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UserFollowersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UserFollowersApiResponse(ILogger<UserFollowersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.UserFollowersResultApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.UserFollowersResultApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.UserFollowersResultApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUserFollowing(ref string appKey, ref Option<string> tag, ref Option<string> status, ref Option<long> targetUserId, ref Option<int> skip, ref Option<int> take, ref Option<long> checkUserId, ref Option<bool> onlyIDs);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="tag"></param>
        /// <param name="status"></param>
        /// <returns></returns>
        private void ValidateUserFollowing(string appKey, Option<string> tag, Option<string> status)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (tag.IsSet && tag.Value == null)
                throw new ArgumentNullException(nameof(tag));

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="tag"></param>
        /// <param name="status"></param>
        /// <param name="targetUserId"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        /// <param name="checkUserId"></param>
        /// <param name="onlyIDs"></param>
        private void AfterUserFollowingDefaultImplementation(IUserFollowingApiResponse apiResponseLocalVar, string appKey, Option<string> tag, Option<string> status, Option<long> targetUserId, Option<int> skip, Option<int> take, Option<long> checkUserId, Option<bool> onlyIDs)
        {
            bool suppressDefaultLog = false;
            AfterUserFollowing(ref suppressDefaultLog, apiResponseLocalVar, appKey, tag, status, targetUserId, skip, take, checkUserId, onlyIDs);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="tag"></param>
        /// <param name="status"></param>
        /// <param name="targetUserId"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        /// <param name="checkUserId"></param>
        /// <param name="onlyIDs"></param>
        partial void AfterUserFollowing(ref bool suppressDefaultLog, IUserFollowingApiResponse apiResponseLocalVar, string appKey, Option<string> tag, Option<string> status, Option<long> targetUserId, Option<int> skip, Option<int> take, Option<long> checkUserId, Option<bool> onlyIDs);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="tag"></param>
        /// <param name="status"></param>
        /// <param name="targetUserId"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        /// <param name="checkUserId"></param>
        /// <param name="onlyIDs"></param>
        private void OnErrorUserFollowingDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<string> tag, Option<string> status, Option<long> targetUserId, Option<int> skip, Option<int> take, Option<long> checkUserId, Option<bool> onlyIDs)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUserFollowing(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, tag, status, targetUserId, skip, take, checkUserId, onlyIDs);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="tag"></param>
        /// <param name="status"></param>
        /// <param name="targetUserId"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        /// <param name="checkUserId"></param>
        /// <param name="onlyIDs"></param>
        partial void OnErrorUserFollowing(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<string> tag, Option<string> status, Option<long> targetUserId, Option<int> skip, Option<int> take, Option<long> checkUserId, Option<bool> onlyIDs);

        /// <summary>
        /// 获取关注列表 / 判断是否关注 根据条件获取我的关注列表，或判断是否关注某个用户
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="tag">用于过滤关注列表的标签（可选）。 (optional)</param>
        /// <param name="status">用于过滤关注列表的状态（可选）。 (optional)</param>
        /// <param name="targetUserId">指定用户的关注记录，如果不提供则默认为当前用户的关注。 (optional, default to 0)</param>
        /// <param name="skip">跳过的记录数，用于分页（默认0）。 (optional, default to 0)</param>
        /// <param name="take">获取的记录数，用于分页（默认10）。 (optional, default to 10)</param>
        /// <param name="checkUserId">要判断是否关注的目标用户ID。如果提供此参数，方法将返回一个布尔值，表示当前用户是否关注该目标用户。 (optional)</param>
        /// <param name="onlyIDs">是否只返回关注用户的ID集合，默认为false（即返回完整的关注用户信息）。 (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserFollowingApiResponse"/>&gt;</returns>
        public async Task<IUserFollowingApiResponse> UserFollowingOrDefaultAsync(string appKey, Option<string> tag = default, Option<string> status = default, Option<long> targetUserId = default, Option<int> skip = default, Option<int> take = default, Option<long> checkUserId = default, Option<bool> onlyIDs = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UserFollowingAsync(appKey, tag, status, targetUserId, skip, take, checkUserId, onlyIDs, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取关注列表 / 判断是否关注 根据条件获取我的关注列表，或判断是否关注某个用户
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="tag">用于过滤关注列表的标签（可选）。 (optional)</param>
        /// <param name="status">用于过滤关注列表的状态（可选）。 (optional)</param>
        /// <param name="targetUserId">指定用户的关注记录，如果不提供则默认为当前用户的关注。 (optional, default to 0)</param>
        /// <param name="skip">跳过的记录数，用于分页（默认0）。 (optional, default to 0)</param>
        /// <param name="take">获取的记录数，用于分页（默认10）。 (optional, default to 10)</param>
        /// <param name="checkUserId">要判断是否关注的目标用户ID。如果提供此参数，方法将返回一个布尔值，表示当前用户是否关注该目标用户。 (optional)</param>
        /// <param name="onlyIDs">是否只返回关注用户的ID集合，默认为false（即返回完整的关注用户信息）。 (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserFollowingApiResponse"/>&gt;</returns>
        public async Task<IUserFollowingApiResponse> UserFollowingAsync(string appKey, Option<string> tag = default, Option<string> status = default, Option<long> targetUserId = default, Option<int> skip = default, Option<int> take = default, Option<long> checkUserId = default, Option<bool> onlyIDs = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUserFollowing(appKey, tag, status);

                FormatUserFollowing(ref appKey, ref tag, ref status, ref targetUserId, ref skip, ref take, ref checkUserId, ref onlyIDs);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/UserFriends/{appKey}/Following";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (tag.IsSet)
                        parseQueryStringLocalVar["tag"] = ClientUtils.ParameterToString(tag.Value);

                    if (status.IsSet)
                        parseQueryStringLocalVar["status"] = ClientUtils.ParameterToString(status.Value);

                    if (targetUserId.IsSet)
                        parseQueryStringLocalVar["targetUserId"] = ClientUtils.ParameterToString(targetUserId.Value);

                    if (skip.IsSet)
                        parseQueryStringLocalVar["skip"] = ClientUtils.ParameterToString(skip.Value);

                    if (take.IsSet)
                        parseQueryStringLocalVar["take"] = ClientUtils.ParameterToString(take.Value);

                    if (checkUserId.IsSet)
                        parseQueryStringLocalVar["checkUserId"] = ClientUtils.ParameterToString(checkUserId.Value);

                    if (onlyIDs.IsSet)
                        parseQueryStringLocalVar["onlyIDs"] = ClientUtils.ParameterToString(onlyIDs.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UserFollowingApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UserFollowingApiResponse>();

                        UserFollowingApiResponse apiResponseLocalVar = new UserFollowingApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/UserFriends/{appKey}/Following", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUserFollowingDefaultImplementation(apiResponseLocalVar, appKey, tag, status, targetUserId, skip, take, checkUserId, onlyIDs);

                        Events.ExecuteOnUserFollowing(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUserFollowingDefaultImplementation(e, "/UserFriends/{appKey}/Following", uriBuilderLocalVar.Path, appKey, tag, status, targetUserId, skip, take, checkUserId, onlyIDs);
                Events.ExecuteOnErrorUserFollowing(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UserFollowingApiResponse"/>
        /// </summary>
        public partial class UserFollowingApiResponse : ZSGF.Client.Client.ApiResponse, IUserFollowingApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UserFollowingApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UserFollowingApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UserFollowingApiResponse(ILogger<UserFollowingApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.BooleanApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.BooleanApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.BooleanApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUserFriendsNearBy(ref double longitude, ref double latitude, ref string appKey, ref Option<string> country, ref Option<string> state, ref Option<string> city, ref Option<string> district, ref Option<string> gender, ref Option<int> ageS, ref Option<int> ageE, ref Option<string> tag, ref Option<long> distance, ref Option<int> skip, ref Option<int> take);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="country"></param>
        /// <param name="state"></param>
        /// <param name="city"></param>
        /// <param name="district"></param>
        /// <param name="gender"></param>
        /// <param name="tag"></param>
        /// <returns></returns>
        private void ValidateUserFriendsNearBy(string appKey, Option<string> country, Option<string> state, Option<string> city, Option<string> district, Option<string> gender, Option<string> tag)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (country.IsSet && country.Value == null)
                throw new ArgumentNullException(nameof(country));

            if (state.IsSet && state.Value == null)
                throw new ArgumentNullException(nameof(state));

            if (city.IsSet && city.Value == null)
                throw new ArgumentNullException(nameof(city));

            if (district.IsSet && district.Value == null)
                throw new ArgumentNullException(nameof(district));

            if (gender.IsSet && gender.Value == null)
                throw new ArgumentNullException(nameof(gender));

            if (tag.IsSet && tag.Value == null)
                throw new ArgumentNullException(nameof(tag));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="longitude"></param>
        /// <param name="latitude"></param>
        /// <param name="appKey"></param>
        /// <param name="country"></param>
        /// <param name="state"></param>
        /// <param name="city"></param>
        /// <param name="district"></param>
        /// <param name="gender"></param>
        /// <param name="ageS"></param>
        /// <param name="ageE"></param>
        /// <param name="tag"></param>
        /// <param name="distance"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        private void AfterUserFriendsNearByDefaultImplementation(IUserFriendsNearByApiResponse apiResponseLocalVar, double longitude, double latitude, string appKey, Option<string> country, Option<string> state, Option<string> city, Option<string> district, Option<string> gender, Option<int> ageS, Option<int> ageE, Option<string> tag, Option<long> distance, Option<int> skip, Option<int> take)
        {
            bool suppressDefaultLog = false;
            AfterUserFriendsNearBy(ref suppressDefaultLog, apiResponseLocalVar, longitude, latitude, appKey, country, state, city, district, gender, ageS, ageE, tag, distance, skip, take);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="longitude"></param>
        /// <param name="latitude"></param>
        /// <param name="appKey"></param>
        /// <param name="country"></param>
        /// <param name="state"></param>
        /// <param name="city"></param>
        /// <param name="district"></param>
        /// <param name="gender"></param>
        /// <param name="ageS"></param>
        /// <param name="ageE"></param>
        /// <param name="tag"></param>
        /// <param name="distance"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        partial void AfterUserFriendsNearBy(ref bool suppressDefaultLog, IUserFriendsNearByApiResponse apiResponseLocalVar, double longitude, double latitude, string appKey, Option<string> country, Option<string> state, Option<string> city, Option<string> district, Option<string> gender, Option<int> ageS, Option<int> ageE, Option<string> tag, Option<long> distance, Option<int> skip, Option<int> take);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="longitude"></param>
        /// <param name="latitude"></param>
        /// <param name="appKey"></param>
        /// <param name="country"></param>
        /// <param name="state"></param>
        /// <param name="city"></param>
        /// <param name="district"></param>
        /// <param name="gender"></param>
        /// <param name="ageS"></param>
        /// <param name="ageE"></param>
        /// <param name="tag"></param>
        /// <param name="distance"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        private void OnErrorUserFriendsNearByDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, double longitude, double latitude, string appKey, Option<string> country, Option<string> state, Option<string> city, Option<string> district, Option<string> gender, Option<int> ageS, Option<int> ageE, Option<string> tag, Option<long> distance, Option<int> skip, Option<int> take)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUserFriendsNearBy(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, longitude, latitude, appKey, country, state, city, district, gender, ageS, ageE, tag, distance, skip, take);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="longitude"></param>
        /// <param name="latitude"></param>
        /// <param name="appKey"></param>
        /// <param name="country"></param>
        /// <param name="state"></param>
        /// <param name="city"></param>
        /// <param name="district"></param>
        /// <param name="gender"></param>
        /// <param name="ageS"></param>
        /// <param name="ageE"></param>
        /// <param name="tag"></param>
        /// <param name="distance"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        partial void OnErrorUserFriendsNearBy(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, double longitude, double latitude, string appKey, Option<string> country, Option<string> state, Option<string> city, Option<string> district, Option<string> gender, Option<int> ageS, Option<int> ageE, Option<string> tag, Option<long> distance, Option<int> skip, Option<int> take);

        /// <summary>
        /// 推荐附近用户 根据地理位置坐标和多种筛选条件，查询附近满足条件的用户列表，支持分页和按距离排序。 地理位置查询使用MySQL的ST_Distance_Sphere函数计算球面距离。 注意：longitude为经度(X轴)，latitude为纬度(Y轴)，参数顺序与常规坐标系一致
        /// </summary>
        /// <param name="longitude">当前用户经度坐标(WGS84坐标系)</param>
        /// <param name="latitude">当前用户纬度坐标(WGS84坐标系)</param>
        /// <param name="appKey"></param>
        /// <param name="country">国家过滤条件（精确匹配） (optional)</param>
        /// <param name="state">省份过滤条件（精确匹配） (optional)</param>
        /// <param name="city">城市过滤条件（精确匹配） (optional)</param>
        /// <param name="district">区县过滤条件（精确匹配） (optional)</param>
        /// <param name="gender">性别过滤条件（可选值示例：Male/Female/Other） (optional)</param>
        /// <param name="ageS">年龄起始范围（包含，0表示不限制） (optional)</param>
        /// <param name="ageE">年龄结束范围（包含，0表示不限制） (optional)</param>
        /// <param name="tag">兴趣标签过滤（支持模糊匹配，如：\&quot;运动\&quot;） (optional)</param>
        /// <param name="distance">搜索半径（单位：米，0表示不限制距离） (optional, default to 0)</param>
        /// <param name="skip">跳过的记录数（分页起始位置，默认0） (optional, default to 0)</param>
        /// <param name="take">获取的记录数（分页大小，默认10，最大100） (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserFriendsNearByApiResponse"/>&gt;</returns>
        public async Task<IUserFriendsNearByApiResponse> UserFriendsNearByOrDefaultAsync(double longitude, double latitude, string appKey, Option<string> country = default, Option<string> state = default, Option<string> city = default, Option<string> district = default, Option<string> gender = default, Option<int> ageS = default, Option<int> ageE = default, Option<string> tag = default, Option<long> distance = default, Option<int> skip = default, Option<int> take = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UserFriendsNearByAsync(longitude, latitude, appKey, country, state, city, district, gender, ageS, ageE, tag, distance, skip, take, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 推荐附近用户 根据地理位置坐标和多种筛选条件，查询附近满足条件的用户列表，支持分页和按距离排序。 地理位置查询使用MySQL的ST_Distance_Sphere函数计算球面距离。 注意：longitude为经度(X轴)，latitude为纬度(Y轴)，参数顺序与常规坐标系一致
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="longitude">当前用户经度坐标(WGS84坐标系)</param>
        /// <param name="latitude">当前用户纬度坐标(WGS84坐标系)</param>
        /// <param name="appKey"></param>
        /// <param name="country">国家过滤条件（精确匹配） (optional)</param>
        /// <param name="state">省份过滤条件（精确匹配） (optional)</param>
        /// <param name="city">城市过滤条件（精确匹配） (optional)</param>
        /// <param name="district">区县过滤条件（精确匹配） (optional)</param>
        /// <param name="gender">性别过滤条件（可选值示例：Male/Female/Other） (optional)</param>
        /// <param name="ageS">年龄起始范围（包含，0表示不限制） (optional)</param>
        /// <param name="ageE">年龄结束范围（包含，0表示不限制） (optional)</param>
        /// <param name="tag">兴趣标签过滤（支持模糊匹配，如：\&quot;运动\&quot;） (optional)</param>
        /// <param name="distance">搜索半径（单位：米，0表示不限制距离） (optional, default to 0)</param>
        /// <param name="skip">跳过的记录数（分页起始位置，默认0） (optional, default to 0)</param>
        /// <param name="take">获取的记录数（分页大小，默认10，最大100） (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserFriendsNearByApiResponse"/>&gt;</returns>
        public async Task<IUserFriendsNearByApiResponse> UserFriendsNearByAsync(double longitude, double latitude, string appKey, Option<string> country = default, Option<string> state = default, Option<string> city = default, Option<string> district = default, Option<string> gender = default, Option<int> ageS = default, Option<int> ageE = default, Option<string> tag = default, Option<long> distance = default, Option<int> skip = default, Option<int> take = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUserFriendsNearBy(appKey, country, state, city, district, gender, tag);

                FormatUserFriendsNearBy(ref longitude, ref latitude, ref appKey, ref country, ref state, ref city, ref district, ref gender, ref ageS, ref ageE, ref tag, ref distance, ref skip, ref take);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/UserFriends/{appKey}/NearBy";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["longitude"] = ClientUtils.ParameterToString(longitude);
                    parseQueryStringLocalVar["latitude"] = ClientUtils.ParameterToString(latitude);

                    if (country.IsSet)
                        parseQueryStringLocalVar["country"] = ClientUtils.ParameterToString(country.Value);

                    if (state.IsSet)
                        parseQueryStringLocalVar["state"] = ClientUtils.ParameterToString(state.Value);

                    if (city.IsSet)
                        parseQueryStringLocalVar["city"] = ClientUtils.ParameterToString(city.Value);

                    if (district.IsSet)
                        parseQueryStringLocalVar["district"] = ClientUtils.ParameterToString(district.Value);

                    if (gender.IsSet)
                        parseQueryStringLocalVar["gender"] = ClientUtils.ParameterToString(gender.Value);

                    if (ageS.IsSet)
                        parseQueryStringLocalVar["ageS"] = ClientUtils.ParameterToString(ageS.Value);

                    if (ageE.IsSet)
                        parseQueryStringLocalVar["ageE"] = ClientUtils.ParameterToString(ageE.Value);

                    if (tag.IsSet)
                        parseQueryStringLocalVar["tag"] = ClientUtils.ParameterToString(tag.Value);

                    if (distance.IsSet)
                        parseQueryStringLocalVar["distance"] = ClientUtils.ParameterToString(distance.Value);

                    if (skip.IsSet)
                        parseQueryStringLocalVar["skip"] = ClientUtils.ParameterToString(skip.Value);

                    if (take.IsSet)
                        parseQueryStringLocalVar["take"] = ClientUtils.ParameterToString(take.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UserFriendsNearByApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UserFriendsNearByApiResponse>();

                        UserFriendsNearByApiResponse apiResponseLocalVar = new UserFriendsNearByApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/UserFriends/{appKey}/NearBy", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUserFriendsNearByDefaultImplementation(apiResponseLocalVar, longitude, latitude, appKey, country, state, city, district, gender, ageS, ageE, tag, distance, skip, take);

                        Events.ExecuteOnUserFriendsNearBy(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUserFriendsNearByDefaultImplementation(e, "/UserFriends/{appKey}/NearBy", uriBuilderLocalVar.Path, longitude, latitude, appKey, country, state, city, district, gender, ageS, ageE, tag, distance, skip, take);
                Events.ExecuteOnErrorUserFriendsNearBy(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UserFriendsNearByApiResponse"/>
        /// </summary>
        public partial class UserFriendsNearByApiResponse : ZSGF.Client.Client.ApiResponse, IUserFriendsNearByApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UserFriendsNearByApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UserFriendsNearByApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UserFriendsNearByApiResponse(ILogger<UserFriendsNearByApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.UserFriendsNearByResultApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.UserFriendsNearByResultApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.UserFriendsNearByResultApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUserMutualFollowers(ref string appKey, ref Option<int> skip, ref Option<int> take);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <returns></returns>
        private void ValidateUserMutualFollowers(string appKey)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        private void AfterUserMutualFollowersDefaultImplementation(IUserMutualFollowersApiResponse apiResponseLocalVar, string appKey, Option<int> skip, Option<int> take)
        {
            bool suppressDefaultLog = false;
            AfterUserMutualFollowers(ref suppressDefaultLog, apiResponseLocalVar, appKey, skip, take);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        partial void AfterUserMutualFollowers(ref bool suppressDefaultLog, IUserMutualFollowersApiResponse apiResponseLocalVar, string appKey, Option<int> skip, Option<int> take);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        private void OnErrorUserMutualFollowersDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<int> skip, Option<int> take)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUserMutualFollowers(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, skip, take);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        partial void OnErrorUserMutualFollowers(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<int> skip, Option<int> take);

        /// <summary>
        /// 推荐共同粉丝用户 推荐有共同粉丝的用户
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="skip">跳过的记录数 (optional, default to 0)</param>
        /// <param name="take">获取的记录数 (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserMutualFollowersApiResponse"/>&gt;</returns>
        public async Task<IUserMutualFollowersApiResponse> UserMutualFollowersOrDefaultAsync(string appKey, Option<int> skip = default, Option<int> take = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UserMutualFollowersAsync(appKey, skip, take, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 推荐共同粉丝用户 推荐有共同粉丝的用户
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="skip">跳过的记录数 (optional, default to 0)</param>
        /// <param name="take">获取的记录数 (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserMutualFollowersApiResponse"/>&gt;</returns>
        public async Task<IUserMutualFollowersApiResponse> UserMutualFollowersAsync(string appKey, Option<int> skip = default, Option<int> take = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUserMutualFollowers(appKey);

                FormatUserMutualFollowers(ref appKey, ref skip, ref take);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/UserFriends/{appKey}/MutualFollowers";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (skip.IsSet)
                        parseQueryStringLocalVar["skip"] = ClientUtils.ParameterToString(skip.Value);

                    if (take.IsSet)
                        parseQueryStringLocalVar["take"] = ClientUtils.ParameterToString(take.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UserMutualFollowersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UserMutualFollowersApiResponse>();

                        UserMutualFollowersApiResponse apiResponseLocalVar = new UserMutualFollowersApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/UserFriends/{appKey}/MutualFollowers", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUserMutualFollowersDefaultImplementation(apiResponseLocalVar, appKey, skip, take);

                        Events.ExecuteOnUserMutualFollowers(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUserMutualFollowersDefaultImplementation(e, "/UserFriends/{appKey}/MutualFollowers", uriBuilderLocalVar.Path, appKey, skip, take);
                Events.ExecuteOnErrorUserMutualFollowers(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UserMutualFollowersApiResponse"/>
        /// </summary>
        public partial class UserMutualFollowersApiResponse : ZSGF.Client.Client.ApiResponse, IUserMutualFollowersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UserMutualFollowersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UserMutualFollowersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UserMutualFollowersApiResponse(ILogger<UserMutualFollowersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.UserMutualFollowersResultApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.UserMutualFollowersResultApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.UserMutualFollowersResultApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUserMutualFollowings(ref string appKey, ref Option<int> skip, ref Option<int> take);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <returns></returns>
        private void ValidateUserMutualFollowings(string appKey)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        private void AfterUserMutualFollowingsDefaultImplementation(IUserMutualFollowingsApiResponse apiResponseLocalVar, string appKey, Option<int> skip, Option<int> take)
        {
            bool suppressDefaultLog = false;
            AfterUserMutualFollowings(ref suppressDefaultLog, apiResponseLocalVar, appKey, skip, take);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        partial void AfterUserMutualFollowings(ref bool suppressDefaultLog, IUserMutualFollowingsApiResponse apiResponseLocalVar, string appKey, Option<int> skip, Option<int> take);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        private void OnErrorUserMutualFollowingsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<int> skip, Option<int> take)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUserMutualFollowings(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, skip, take);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        partial void OnErrorUserMutualFollowings(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<int> skip, Option<int> take);

        /// <summary>
        /// 推荐共同关注用户 推荐有共同关注的用户
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="skip">跳过的记录数 (optional, default to 0)</param>
        /// <param name="take">获取的记录数 (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserMutualFollowingsApiResponse"/>&gt;</returns>
        public async Task<IUserMutualFollowingsApiResponse> UserMutualFollowingsOrDefaultAsync(string appKey, Option<int> skip = default, Option<int> take = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UserMutualFollowingsAsync(appKey, skip, take, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 推荐共同关注用户 推荐有共同关注的用户
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="skip">跳过的记录数 (optional, default to 0)</param>
        /// <param name="take">获取的记录数 (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserMutualFollowingsApiResponse"/>&gt;</returns>
        public async Task<IUserMutualFollowingsApiResponse> UserMutualFollowingsAsync(string appKey, Option<int> skip = default, Option<int> take = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUserMutualFollowings(appKey);

                FormatUserMutualFollowings(ref appKey, ref skip, ref take);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/UserFriends/{appKey}/MutualFollowings";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (skip.IsSet)
                        parseQueryStringLocalVar["skip"] = ClientUtils.ParameterToString(skip.Value);

                    if (take.IsSet)
                        parseQueryStringLocalVar["take"] = ClientUtils.ParameterToString(take.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UserMutualFollowingsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UserMutualFollowingsApiResponse>();

                        UserMutualFollowingsApiResponse apiResponseLocalVar = new UserMutualFollowingsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/UserFriends/{appKey}/MutualFollowings", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUserMutualFollowingsDefaultImplementation(apiResponseLocalVar, appKey, skip, take);

                        Events.ExecuteOnUserMutualFollowings(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUserMutualFollowingsDefaultImplementation(e, "/UserFriends/{appKey}/MutualFollowings", uriBuilderLocalVar.Path, appKey, skip, take);
                Events.ExecuteOnErrorUserMutualFollowings(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UserMutualFollowingsApiResponse"/>
        /// </summary>
        public partial class UserMutualFollowingsApiResponse : ZSGF.Client.Client.ApiResponse, IUserMutualFollowingsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UserMutualFollowingsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UserMutualFollowingsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UserMutualFollowingsApiResponse(ILogger<UserMutualFollowingsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.UserMutualFollowingsResultApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.UserMutualFollowingsResultApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.UserMutualFollowingsResultApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUserProfileById(ref long userId, ref string appKey);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <returns></returns>
        private void ValidateUserProfileById(string appKey)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="userId"></param>
        /// <param name="appKey"></param>
        private void AfterUserProfileByIdDefaultImplementation(IUserProfileByIdApiResponse apiResponseLocalVar, long userId, string appKey)
        {
            bool suppressDefaultLog = false;
            AfterUserProfileById(ref suppressDefaultLog, apiResponseLocalVar, userId, appKey);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="userId"></param>
        /// <param name="appKey"></param>
        partial void AfterUserProfileById(ref bool suppressDefaultLog, IUserProfileByIdApiResponse apiResponseLocalVar, long userId, string appKey);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="userId"></param>
        /// <param name="appKey"></param>
        private void OnErrorUserProfileByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long userId, string appKey)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUserProfileById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, userId, appKey);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="userId"></param>
        /// <param name="appKey"></param>
        partial void OnErrorUserProfileById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long userId, string appKey);

        /// <summary>
        /// 获取用户资料 用于他人主页展示
        /// </summary>
        /// <param name="userId">用户ID</param>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserProfileByIdApiResponse"/>&gt;</returns>
        public async Task<IUserProfileByIdApiResponse> UserProfileByIdOrDefaultAsync(long userId, string appKey, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UserProfileByIdAsync(userId, appKey, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取用户资料 用于他人主页展示
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">用户ID</param>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserProfileByIdApiResponse"/>&gt;</returns>
        public async Task<IUserProfileByIdApiResponse> UserProfileByIdAsync(long userId, string appKey, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUserProfileById(appKey);

                FormatUserProfileById(ref userId, ref appKey);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/UserFriends/{appKey}/Profile/{userId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BuserId%7D", Uri.EscapeDataString(userId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UserProfileByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UserProfileByIdApiResponse>();

                        UserProfileByIdApiResponse apiResponseLocalVar = new UserProfileByIdApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/UserFriends/{appKey}/Profile/{userId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUserProfileByIdDefaultImplementation(apiResponseLocalVar, userId, appKey);

                        Events.ExecuteOnUserProfileById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUserProfileByIdDefaultImplementation(e, "/UserFriends/{appKey}/Profile/{userId}", uriBuilderLocalVar.Path, userId, appKey);
                Events.ExecuteOnErrorUserProfileById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UserProfileByIdApiResponse"/>
        /// </summary>
        public partial class UserProfileByIdApiResponse : ZSGF.Client.Client.ApiResponse, IUserProfileByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UserProfileByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UserProfileByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UserProfileByIdApiResponse(ILogger<UserProfileByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.GetUserProfileResultApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.GetUserProfileResultApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.GetUserProfileResultApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUserUnfollowUser(ref long userId, ref string appKey);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <returns></returns>
        private void ValidateUserUnfollowUser(string appKey)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="userId"></param>
        /// <param name="appKey"></param>
        private void AfterUserUnfollowUserDefaultImplementation(IUserUnfollowUserApiResponse apiResponseLocalVar, long userId, string appKey)
        {
            bool suppressDefaultLog = false;
            AfterUserUnfollowUser(ref suppressDefaultLog, apiResponseLocalVar, userId, appKey);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="userId"></param>
        /// <param name="appKey"></param>
        partial void AfterUserUnfollowUser(ref bool suppressDefaultLog, IUserUnfollowUserApiResponse apiResponseLocalVar, long userId, string appKey);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="userId"></param>
        /// <param name="appKey"></param>
        private void OnErrorUserUnfollowUserDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long userId, string appKey)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUserUnfollowUser(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, userId, appKey);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="userId"></param>
        /// <param name="appKey"></param>
        partial void OnErrorUserUnfollowUser(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long userId, string appKey);

        /// <summary>
        /// 取消关注 取消关注指定用户
        /// </summary>
        /// <param name="userId">要取消关注的用户ID</param>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserUnfollowUserApiResponse"/>&gt;</returns>
        public async Task<IUserUnfollowUserApiResponse> UserUnfollowUserOrDefaultAsync(long userId, string appKey, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UserUnfollowUserAsync(userId, appKey, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 取消关注 取消关注指定用户
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">要取消关注的用户ID</param>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserUnfollowUserApiResponse"/>&gt;</returns>
        public async Task<IUserUnfollowUserApiResponse> UserUnfollowUserAsync(long userId, string appKey, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUserUnfollowUser(appKey);

                FormatUserUnfollowUser(ref userId, ref appKey);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/UserFriends/{appKey}/Follower/{userId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BuserId%7D", Uri.EscapeDataString(userId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UserUnfollowUserApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UserUnfollowUserApiResponse>();

                        UserUnfollowUserApiResponse apiResponseLocalVar = new UserUnfollowUserApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/UserFriends/{appKey}/Follower/{userId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUserUnfollowUserDefaultImplementation(apiResponseLocalVar, userId, appKey);

                        Events.ExecuteOnUserUnfollowUser(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUserUnfollowUserDefaultImplementation(e, "/UserFriends/{appKey}/Follower/{userId}", uriBuilderLocalVar.Path, userId, appKey);
                Events.ExecuteOnErrorUserUnfollowUser(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UserUnfollowUserApiResponse"/>
        /// </summary>
        public partial class UserUnfollowUserApiResponse : ZSGF.Client.Client.ApiResponse, IUserUnfollowUserApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UserUnfollowUserApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UserUnfollowUserApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UserUnfollowUserApiResponse(ILogger<UserUnfollowUserApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.BooleanApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.BooleanApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.BooleanApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
