// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using ZSGF.Client.Client;
using ZSGF.Client.Model;

namespace ZSGF.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IExternalAccountApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ExternalAccountApiEvents Events { get; }

        /// <summary>
        /// 外部账号登录
        /// </summary>
        /// <remarks>
        /// 使用外部账号登录应用
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="externalAccountSignInRequest">登录请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExternalAccountSignInApiResponse"/>&gt;</returns>
        Task<IExternalAccountSignInApiResponse> ExternalAccountSignInAsync(string appKey, Option<ExternalAccountSignInRequest> externalAccountSignInRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 外部账号登录
        /// </summary>
        /// <remarks>
        /// 使用外部账号登录应用
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="externalAccountSignInRequest">登录请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExternalAccountSignInApiResponse"/>&gt;</returns>
        Task<IExternalAccountSignInApiResponse> ExternalAccountSignInOrDefaultAsync(string appKey, Option<ExternalAccountSignInRequest> externalAccountSignInRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 绑定外部账号
        /// </summary>
        /// <remarks>
        /// 绑定外部账号，如果已存在绑定则直接返回成功
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="externalAccountBindRequest">绑定请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserExternalAccountBindApiResponse"/>&gt;</returns>
        Task<IUserExternalAccountBindApiResponse> UserExternalAccountBindAsync(string appKey, Option<ExternalAccountBindRequest> externalAccountBindRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 绑定外部账号
        /// </summary>
        /// <remarks>
        /// 绑定外部账号，如果已存在绑定则直接返回成功
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="externalAccountBindRequest">绑定请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserExternalAccountBindApiResponse"/>&gt;</returns>
        Task<IUserExternalAccountBindApiResponse> UserExternalAccountBindOrDefaultAsync(string appKey, Option<ExternalAccountBindRequest> externalAccountBindRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 外部账号列表
        /// </summary>
        /// <remarks>
        /// 获取绑定成功的外部账号列表
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserOAuthAccountsApiResponse"/>&gt;</returns>
        Task<IUserOAuthAccountsApiResponse> UserOAuthAccountsAsync(string appKey, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 外部账号列表
        /// </summary>
        /// <remarks>
        /// 获取绑定成功的外部账号列表
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserOAuthAccountsApiResponse"/>&gt;</returns>
        Task<IUserOAuthAccountsApiResponse> UserOAuthAccountsOrDefaultAsync(string appKey, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 更新绑定账号
        /// </summary>
        /// <remarks>
        /// 更新绑定的账号信息
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">绑定ID</param>
        /// <param name="appKey"></param>
        /// <param name="externalAccountPutRequest">更新请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserOAuthAccountsPutBindApiResponse"/>&gt;</returns>
        Task<IUserOAuthAccountsPutBindApiResponse> UserOAuthAccountsPutBindAsync(long id, string appKey, Option<ExternalAccountPutRequest> externalAccountPutRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 更新绑定账号
        /// </summary>
        /// <remarks>
        /// 更新绑定的账号信息
        /// </remarks>
        /// <param name="id">绑定ID</param>
        /// <param name="appKey"></param>
        /// <param name="externalAccountPutRequest">更新请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserOAuthAccountsPutBindApiResponse"/>&gt;</returns>
        Task<IUserOAuthAccountsPutBindApiResponse> UserOAuthAccountsPutBindOrDefaultAsync(long id, string appKey, Option<ExternalAccountPutRequest> externalAccountPutRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 删除绑定账号
        /// </summary>
        /// <remarks>
        /// 删除绑定的外部账号
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">绑定ID</param>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserOAuthAccountsUnBindApiResponse"/>&gt;</returns>
        Task<IUserOAuthAccountsUnBindApiResponse> UserOAuthAccountsUnBindAsync(long id, string appKey, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 删除绑定账号
        /// </summary>
        /// <remarks>
        /// 删除绑定的外部账号
        /// </remarks>
        /// <param name="id">绑定ID</param>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserOAuthAccountsUnBindApiResponse"/>&gt;</returns>
        Task<IUserOAuthAccountsUnBindApiResponse> UserOAuthAccountsUnBindOrDefaultAsync(long id, string appKey, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IExternalAccountSignInApiResponse"/>
    /// </summary>
    public interface IExternalAccountSignInApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.TokenModelApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUserExternalAccountBindApiResponse"/>
    /// </summary>
    public interface IUserExternalAccountBindApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.BooleanApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUserOAuthAccountsApiResponse"/>
    /// </summary>
    public interface IUserOAuthAccountsApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.UserLoginsListApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUserOAuthAccountsPutBindApiResponse"/>
    /// </summary>
    public interface IUserOAuthAccountsPutBindApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.BooleanApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUserOAuthAccountsUnBindApiResponse"/>
    /// </summary>
    public interface IUserOAuthAccountsUnBindApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.BooleanApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ExternalAccountApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnExternalAccountSignIn;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorExternalAccountSignIn;

        internal void ExecuteOnExternalAccountSignIn(ExternalAccountApi.ExternalAccountSignInApiResponse apiResponse)
        {
            OnExternalAccountSignIn?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorExternalAccountSignIn(Exception exception)
        {
            OnErrorExternalAccountSignIn?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUserExternalAccountBind;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUserExternalAccountBind;

        internal void ExecuteOnUserExternalAccountBind(ExternalAccountApi.UserExternalAccountBindApiResponse apiResponse)
        {
            OnUserExternalAccountBind?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUserExternalAccountBind(Exception exception)
        {
            OnErrorUserExternalAccountBind?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUserOAuthAccounts;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUserOAuthAccounts;

        internal void ExecuteOnUserOAuthAccounts(ExternalAccountApi.UserOAuthAccountsApiResponse apiResponse)
        {
            OnUserOAuthAccounts?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUserOAuthAccounts(Exception exception)
        {
            OnErrorUserOAuthAccounts?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUserOAuthAccountsPutBind;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUserOAuthAccountsPutBind;

        internal void ExecuteOnUserOAuthAccountsPutBind(ExternalAccountApi.UserOAuthAccountsPutBindApiResponse apiResponse)
        {
            OnUserOAuthAccountsPutBind?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUserOAuthAccountsPutBind(Exception exception)
        {
            OnErrorUserOAuthAccountsPutBind?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUserOAuthAccountsUnBind;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUserOAuthAccountsUnBind;

        internal void ExecuteOnUserOAuthAccountsUnBind(ExternalAccountApi.UserOAuthAccountsUnBindApiResponse apiResponse)
        {
            OnUserOAuthAccountsUnBind?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUserOAuthAccountsUnBind(Exception exception)
        {
            OnErrorUserOAuthAccountsUnBind?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ExternalAccountApi : IExternalAccountApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ExternalAccountApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ExternalAccountApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalAccountApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExternalAccountApi(ILogger<ExternalAccountApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ExternalAccountApiEvents externalAccountApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ExternalAccountApi>();
            HttpClient = httpClient;
            Events = externalAccountApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatExternalAccountSignIn(ref string appKey, Option<ExternalAccountSignInRequest> externalAccountSignInRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="externalAccountSignInRequest"></param>
        /// <returns></returns>
        private void ValidateExternalAccountSignIn(string appKey, Option<ExternalAccountSignInRequest> externalAccountSignInRequest)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (externalAccountSignInRequest.IsSet && externalAccountSignInRequest.Value == null)
                throw new ArgumentNullException(nameof(externalAccountSignInRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="externalAccountSignInRequest"></param>
        private void AfterExternalAccountSignInDefaultImplementation(IExternalAccountSignInApiResponse apiResponseLocalVar, string appKey, Option<ExternalAccountSignInRequest> externalAccountSignInRequest)
        {
            bool suppressDefaultLog = false;
            AfterExternalAccountSignIn(ref suppressDefaultLog, apiResponseLocalVar, appKey, externalAccountSignInRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="externalAccountSignInRequest"></param>
        partial void AfterExternalAccountSignIn(ref bool suppressDefaultLog, IExternalAccountSignInApiResponse apiResponseLocalVar, string appKey, Option<ExternalAccountSignInRequest> externalAccountSignInRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="externalAccountSignInRequest"></param>
        private void OnErrorExternalAccountSignInDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<ExternalAccountSignInRequest> externalAccountSignInRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorExternalAccountSignIn(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, externalAccountSignInRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="externalAccountSignInRequest"></param>
        partial void OnErrorExternalAccountSignIn(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<ExternalAccountSignInRequest> externalAccountSignInRequest);

        /// <summary>
        /// 外部账号登录 使用外部账号登录应用
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="externalAccountSignInRequest">登录请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExternalAccountSignInApiResponse"/>&gt;</returns>
        public async Task<IExternalAccountSignInApiResponse> ExternalAccountSignInOrDefaultAsync(string appKey, Option<ExternalAccountSignInRequest> externalAccountSignInRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ExternalAccountSignInAsync(appKey, externalAccountSignInRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 外部账号登录 使用外部账号登录应用
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="externalAccountSignInRequest">登录请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExternalAccountSignInApiResponse"/>&gt;</returns>
        public async Task<IExternalAccountSignInApiResponse> ExternalAccountSignInAsync(string appKey, Option<ExternalAccountSignInRequest> externalAccountSignInRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateExternalAccountSignIn(appKey, externalAccountSignInRequest);

                FormatExternalAccountSignIn(ref appKey, externalAccountSignInRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/ExternalAccount/{appKey}/SignIn";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    if (externalAccountSignInRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (externalAccountSignInRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(externalAccountSignInRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<ExternalAccountSignInApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ExternalAccountSignInApiResponse>();

                        ExternalAccountSignInApiResponse apiResponseLocalVar = new ExternalAccountSignInApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ExternalAccount/{appKey}/SignIn", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterExternalAccountSignInDefaultImplementation(apiResponseLocalVar, appKey, externalAccountSignInRequest);

                        Events.ExecuteOnExternalAccountSignIn(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorExternalAccountSignInDefaultImplementation(e, "/ExternalAccount/{appKey}/SignIn", uriBuilderLocalVar.Path, appKey, externalAccountSignInRequest);
                Events.ExecuteOnErrorExternalAccountSignIn(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ExternalAccountSignInApiResponse"/>
        /// </summary>
        public partial class ExternalAccountSignInApiResponse : ZSGF.Client.Client.ApiResponse, IExternalAccountSignInApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ExternalAccountSignInApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ExternalAccountSignInApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ExternalAccountSignInApiResponse(ILogger<ExternalAccountSignInApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.TokenModelApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.TokenModelApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.TokenModelApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUserExternalAccountBind(ref string appKey, Option<ExternalAccountBindRequest> externalAccountBindRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="externalAccountBindRequest"></param>
        /// <returns></returns>
        private void ValidateUserExternalAccountBind(string appKey, Option<ExternalAccountBindRequest> externalAccountBindRequest)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (externalAccountBindRequest.IsSet && externalAccountBindRequest.Value == null)
                throw new ArgumentNullException(nameof(externalAccountBindRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="externalAccountBindRequest"></param>
        private void AfterUserExternalAccountBindDefaultImplementation(IUserExternalAccountBindApiResponse apiResponseLocalVar, string appKey, Option<ExternalAccountBindRequest> externalAccountBindRequest)
        {
            bool suppressDefaultLog = false;
            AfterUserExternalAccountBind(ref suppressDefaultLog, apiResponseLocalVar, appKey, externalAccountBindRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="externalAccountBindRequest"></param>
        partial void AfterUserExternalAccountBind(ref bool suppressDefaultLog, IUserExternalAccountBindApiResponse apiResponseLocalVar, string appKey, Option<ExternalAccountBindRequest> externalAccountBindRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="externalAccountBindRequest"></param>
        private void OnErrorUserExternalAccountBindDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<ExternalAccountBindRequest> externalAccountBindRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUserExternalAccountBind(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, externalAccountBindRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="externalAccountBindRequest"></param>
        partial void OnErrorUserExternalAccountBind(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<ExternalAccountBindRequest> externalAccountBindRequest);

        /// <summary>
        /// 绑定外部账号 绑定外部账号，如果已存在绑定则直接返回成功
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="externalAccountBindRequest">绑定请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserExternalAccountBindApiResponse"/>&gt;</returns>
        public async Task<IUserExternalAccountBindApiResponse> UserExternalAccountBindOrDefaultAsync(string appKey, Option<ExternalAccountBindRequest> externalAccountBindRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UserExternalAccountBindAsync(appKey, externalAccountBindRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 绑定外部账号 绑定外部账号，如果已存在绑定则直接返回成功
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="externalAccountBindRequest">绑定请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserExternalAccountBindApiResponse"/>&gt;</returns>
        public async Task<IUserExternalAccountBindApiResponse> UserExternalAccountBindAsync(string appKey, Option<ExternalAccountBindRequest> externalAccountBindRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUserExternalAccountBind(appKey, externalAccountBindRequest);

                FormatUserExternalAccountBind(ref appKey, externalAccountBindRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/ExternalAccount/{appKey}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    if (externalAccountBindRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (externalAccountBindRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(externalAccountBindRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UserExternalAccountBindApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UserExternalAccountBindApiResponse>();

                        UserExternalAccountBindApiResponse apiResponseLocalVar = new UserExternalAccountBindApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ExternalAccount/{appKey}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUserExternalAccountBindDefaultImplementation(apiResponseLocalVar, appKey, externalAccountBindRequest);

                        Events.ExecuteOnUserExternalAccountBind(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUserExternalAccountBindDefaultImplementation(e, "/ExternalAccount/{appKey}", uriBuilderLocalVar.Path, appKey, externalAccountBindRequest);
                Events.ExecuteOnErrorUserExternalAccountBind(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UserExternalAccountBindApiResponse"/>
        /// </summary>
        public partial class UserExternalAccountBindApiResponse : ZSGF.Client.Client.ApiResponse, IUserExternalAccountBindApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UserExternalAccountBindApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UserExternalAccountBindApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UserExternalAccountBindApiResponse(ILogger<UserExternalAccountBindApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.BooleanApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.BooleanApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.BooleanApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUserOAuthAccounts(ref string appKey);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <returns></returns>
        private void ValidateUserOAuthAccounts(string appKey)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        private void AfterUserOAuthAccountsDefaultImplementation(IUserOAuthAccountsApiResponse apiResponseLocalVar, string appKey)
        {
            bool suppressDefaultLog = false;
            AfterUserOAuthAccounts(ref suppressDefaultLog, apiResponseLocalVar, appKey);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        partial void AfterUserOAuthAccounts(ref bool suppressDefaultLog, IUserOAuthAccountsApiResponse apiResponseLocalVar, string appKey);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        private void OnErrorUserOAuthAccountsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUserOAuthAccounts(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        partial void OnErrorUserOAuthAccounts(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey);

        /// <summary>
        /// 外部账号列表 获取绑定成功的外部账号列表
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserOAuthAccountsApiResponse"/>&gt;</returns>
        public async Task<IUserOAuthAccountsApiResponse> UserOAuthAccountsOrDefaultAsync(string appKey, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UserOAuthAccountsAsync(appKey, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 外部账号列表 获取绑定成功的外部账号列表
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserOAuthAccountsApiResponse"/>&gt;</returns>
        public async Task<IUserOAuthAccountsApiResponse> UserOAuthAccountsAsync(string appKey, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUserOAuthAccounts(appKey);

                FormatUserOAuthAccounts(ref appKey);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/ExternalAccount/{appKey}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UserOAuthAccountsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UserOAuthAccountsApiResponse>();

                        UserOAuthAccountsApiResponse apiResponseLocalVar = new UserOAuthAccountsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ExternalAccount/{appKey}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUserOAuthAccountsDefaultImplementation(apiResponseLocalVar, appKey);

                        Events.ExecuteOnUserOAuthAccounts(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUserOAuthAccountsDefaultImplementation(e, "/ExternalAccount/{appKey}", uriBuilderLocalVar.Path, appKey);
                Events.ExecuteOnErrorUserOAuthAccounts(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UserOAuthAccountsApiResponse"/>
        /// </summary>
        public partial class UserOAuthAccountsApiResponse : ZSGF.Client.Client.ApiResponse, IUserOAuthAccountsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UserOAuthAccountsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UserOAuthAccountsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UserOAuthAccountsApiResponse(ILogger<UserOAuthAccountsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.UserLoginsListApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.UserLoginsListApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.UserLoginsListApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUserOAuthAccountsPutBind(ref long id, ref string appKey, Option<ExternalAccountPutRequest> externalAccountPutRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="externalAccountPutRequest"></param>
        /// <returns></returns>
        private void ValidateUserOAuthAccountsPutBind(string appKey, Option<ExternalAccountPutRequest> externalAccountPutRequest)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (externalAccountPutRequest.IsSet && externalAccountPutRequest.Value == null)
                throw new ArgumentNullException(nameof(externalAccountPutRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        /// <param name="externalAccountPutRequest"></param>
        private void AfterUserOAuthAccountsPutBindDefaultImplementation(IUserOAuthAccountsPutBindApiResponse apiResponseLocalVar, long id, string appKey, Option<ExternalAccountPutRequest> externalAccountPutRequest)
        {
            bool suppressDefaultLog = false;
            AfterUserOAuthAccountsPutBind(ref suppressDefaultLog, apiResponseLocalVar, id, appKey, externalAccountPutRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        /// <param name="externalAccountPutRequest"></param>
        partial void AfterUserOAuthAccountsPutBind(ref bool suppressDefaultLog, IUserOAuthAccountsPutBindApiResponse apiResponseLocalVar, long id, string appKey, Option<ExternalAccountPutRequest> externalAccountPutRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        /// <param name="externalAccountPutRequest"></param>
        private void OnErrorUserOAuthAccountsPutBindDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id, string appKey, Option<ExternalAccountPutRequest> externalAccountPutRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUserOAuthAccountsPutBind(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, appKey, externalAccountPutRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        /// <param name="externalAccountPutRequest"></param>
        partial void OnErrorUserOAuthAccountsPutBind(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id, string appKey, Option<ExternalAccountPutRequest> externalAccountPutRequest);

        /// <summary>
        /// 更新绑定账号 更新绑定的账号信息
        /// </summary>
        /// <param name="id">绑定ID</param>
        /// <param name="appKey"></param>
        /// <param name="externalAccountPutRequest">更新请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserOAuthAccountsPutBindApiResponse"/>&gt;</returns>
        public async Task<IUserOAuthAccountsPutBindApiResponse> UserOAuthAccountsPutBindOrDefaultAsync(long id, string appKey, Option<ExternalAccountPutRequest> externalAccountPutRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UserOAuthAccountsPutBindAsync(id, appKey, externalAccountPutRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 更新绑定账号 更新绑定的账号信息
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">绑定ID</param>
        /// <param name="appKey"></param>
        /// <param name="externalAccountPutRequest">更新请求参数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserOAuthAccountsPutBindApiResponse"/>&gt;</returns>
        public async Task<IUserOAuthAccountsPutBindApiResponse> UserOAuthAccountsPutBindAsync(long id, string appKey, Option<ExternalAccountPutRequest> externalAccountPutRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUserOAuthAccountsPutBind(appKey, externalAccountPutRequest);

                FormatUserOAuthAccountsPutBind(ref id, ref appKey, externalAccountPutRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/ExternalAccount/{appKey}/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    if (externalAccountPutRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (externalAccountPutRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(externalAccountPutRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PUT");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UserOAuthAccountsPutBindApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UserOAuthAccountsPutBindApiResponse>();

                        UserOAuthAccountsPutBindApiResponse apiResponseLocalVar = new UserOAuthAccountsPutBindApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ExternalAccount/{appKey}/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUserOAuthAccountsPutBindDefaultImplementation(apiResponseLocalVar, id, appKey, externalAccountPutRequest);

                        Events.ExecuteOnUserOAuthAccountsPutBind(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUserOAuthAccountsPutBindDefaultImplementation(e, "/ExternalAccount/{appKey}/{id}", uriBuilderLocalVar.Path, id, appKey, externalAccountPutRequest);
                Events.ExecuteOnErrorUserOAuthAccountsPutBind(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UserOAuthAccountsPutBindApiResponse"/>
        /// </summary>
        public partial class UserOAuthAccountsPutBindApiResponse : ZSGF.Client.Client.ApiResponse, IUserOAuthAccountsPutBindApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UserOAuthAccountsPutBindApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UserOAuthAccountsPutBindApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UserOAuthAccountsPutBindApiResponse(ILogger<UserOAuthAccountsPutBindApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.BooleanApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.BooleanApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.BooleanApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUserOAuthAccountsUnBind(ref long id, ref string appKey);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <returns></returns>
        private void ValidateUserOAuthAccountsUnBind(string appKey)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        private void AfterUserOAuthAccountsUnBindDefaultImplementation(IUserOAuthAccountsUnBindApiResponse apiResponseLocalVar, long id, string appKey)
        {
            bool suppressDefaultLog = false;
            AfterUserOAuthAccountsUnBind(ref suppressDefaultLog, apiResponseLocalVar, id, appKey);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        partial void AfterUserOAuthAccountsUnBind(ref bool suppressDefaultLog, IUserOAuthAccountsUnBindApiResponse apiResponseLocalVar, long id, string appKey);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        private void OnErrorUserOAuthAccountsUnBindDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id, string appKey)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUserOAuthAccountsUnBind(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, appKey);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        partial void OnErrorUserOAuthAccountsUnBind(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id, string appKey);

        /// <summary>
        /// 删除绑定账号 删除绑定的外部账号
        /// </summary>
        /// <param name="id">绑定ID</param>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserOAuthAccountsUnBindApiResponse"/>&gt;</returns>
        public async Task<IUserOAuthAccountsUnBindApiResponse> UserOAuthAccountsUnBindOrDefaultAsync(long id, string appKey, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UserOAuthAccountsUnBindAsync(id, appKey, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 删除绑定账号 删除绑定的外部账号
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">绑定ID</param>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserOAuthAccountsUnBindApiResponse"/>&gt;</returns>
        public async Task<IUserOAuthAccountsUnBindApiResponse> UserOAuthAccountsUnBindAsync(long id, string appKey, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUserOAuthAccountsUnBind(appKey);

                FormatUserOAuthAccountsUnBind(ref id, ref appKey);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/ExternalAccount/{appKey}/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UserOAuthAccountsUnBindApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UserOAuthAccountsUnBindApiResponse>();

                        UserOAuthAccountsUnBindApiResponse apiResponseLocalVar = new UserOAuthAccountsUnBindApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ExternalAccount/{appKey}/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUserOAuthAccountsUnBindDefaultImplementation(apiResponseLocalVar, id, appKey);

                        Events.ExecuteOnUserOAuthAccountsUnBind(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUserOAuthAccountsUnBindDefaultImplementation(e, "/ExternalAccount/{appKey}/{id}", uriBuilderLocalVar.Path, id, appKey);
                Events.ExecuteOnErrorUserOAuthAccountsUnBind(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UserOAuthAccountsUnBindApiResponse"/>
        /// </summary>
        public partial class UserOAuthAccountsUnBindApiResponse : ZSGF.Client.Client.ApiResponse, IUserOAuthAccountsUnBindApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UserOAuthAccountsUnBindApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UserOAuthAccountsUnBindApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UserOAuthAccountsUnBindApiResponse(ILogger<UserOAuthAccountsUnBindApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.BooleanApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.BooleanApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.BooleanApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
