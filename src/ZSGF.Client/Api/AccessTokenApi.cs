// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using ZSGF.Client.Client;
using ZSGF.Client.Model;

namespace ZSGF.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IAccessTokenApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        AccessTokenApiEvents Events { get; }

        /// <summary>
        /// 删除令牌
        /// </summary>
        /// <remarks>
        /// 删除用户令牌
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAccessTokenDeleteApiResponse"/>&gt;</returns>
        Task<IAccessTokenDeleteApiResponse> AccessTokenDeleteAsync(long id, string appKey, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 删除令牌
        /// </summary>
        /// <remarks>
        /// 删除用户令牌
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAccessTokenDeleteApiResponse"/>&gt;</returns>
        Task<IAccessTokenDeleteApiResponse> AccessTokenDeleteOrDefaultAsync(long id, string appKey, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 创建令牌
        /// </summary>
        /// <remarks>
        /// 创建新的用户令牌
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="accessTokenPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAccessTokenPostApiResponse"/>&gt;</returns>
        Task<IAccessTokenPostApiResponse> AccessTokenPostAsync(string appKey, Option<AccessTokenPostRequest> accessTokenPostRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 创建令牌
        /// </summary>
        /// <remarks>
        /// 创建新的用户令牌
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="accessTokenPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAccessTokenPostApiResponse"/>&gt;</returns>
        Task<IAccessTokenPostApiResponse> AccessTokenPostOrDefaultAsync(string appKey, Option<AccessTokenPostRequest> accessTokenPostRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 更新令牌
        /// </summary>
        /// <remarks>
        /// 更新现有的用户令牌
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        /// <param name="accessTokenPutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAccessTokenPutApiResponse"/>&gt;</returns>
        Task<IAccessTokenPutApiResponse> AccessTokenPutAsync(long id, string appKey, Option<AccessTokenPutRequest> accessTokenPutRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 更新令牌
        /// </summary>
        /// <remarks>
        /// 更新现有的用户令牌
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        /// <param name="accessTokenPutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAccessTokenPutApiResponse"/>&gt;</returns>
        Task<IAccessTokenPutApiResponse> AccessTokenPutOrDefaultAsync(long id, string appKey, Option<AccessTokenPutRequest> accessTokenPutRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 令牌列表
        /// </summary>
        /// <remarks>
        /// 获取用户令牌列表
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="take"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAccessTokensApiResponse"/>&gt;</returns>
        Task<IAccessTokensApiResponse> AccessTokensAsync(string appKey, Option<long> userId = default, Option<int> skip = default, Option<int> take = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 令牌列表
        /// </summary>
        /// <remarks>
        /// 获取用户令牌列表
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="take"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAccessTokensApiResponse"/>&gt;</returns>
        Task<IAccessTokensApiResponse> AccessTokensOrDefaultAsync(string appKey, Option<long> userId = default, Option<int> skip = default, Option<int> take = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IAccessTokenDeleteApiResponse"/>
    /// </summary>
    public interface IAccessTokenDeleteApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.BooleanApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IAccessTokenPostApiResponse"/>
    /// </summary>
    public interface IAccessTokenPostApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.TokenModelApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IAccessTokenPutApiResponse"/>
    /// </summary>
    public interface IAccessTokenPutApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.BooleanApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IAccessTokensApiResponse"/>
    /// </summary>
    public interface IAccessTokensApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.AccessTokenListResultApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class AccessTokenApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnAccessTokenDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorAccessTokenDelete;

        internal void ExecuteOnAccessTokenDelete(AccessTokenApi.AccessTokenDeleteApiResponse apiResponse)
        {
            OnAccessTokenDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAccessTokenDelete(Exception exception)
        {
            OnErrorAccessTokenDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnAccessTokenPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorAccessTokenPost;

        internal void ExecuteOnAccessTokenPost(AccessTokenApi.AccessTokenPostApiResponse apiResponse)
        {
            OnAccessTokenPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAccessTokenPost(Exception exception)
        {
            OnErrorAccessTokenPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnAccessTokenPut;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorAccessTokenPut;

        internal void ExecuteOnAccessTokenPut(AccessTokenApi.AccessTokenPutApiResponse apiResponse)
        {
            OnAccessTokenPut?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAccessTokenPut(Exception exception)
        {
            OnErrorAccessTokenPut?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnAccessTokens;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorAccessTokens;

        internal void ExecuteOnAccessTokens(AccessTokenApi.AccessTokensApiResponse apiResponse)
        {
            OnAccessTokens?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAccessTokens(Exception exception)
        {
            OnErrorAccessTokens?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class AccessTokenApi : IAccessTokenApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<AccessTokenApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public AccessTokenApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccessTokenApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccessTokenApi(ILogger<AccessTokenApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, AccessTokenApiEvents accessTokenApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<AccessTokenApi>();
            HttpClient = httpClient;
            Events = accessTokenApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatAccessTokenDelete(ref long id, ref string appKey);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <returns></returns>
        private void ValidateAccessTokenDelete(string appKey)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        private void AfterAccessTokenDeleteDefaultImplementation(IAccessTokenDeleteApiResponse apiResponseLocalVar, long id, string appKey)
        {
            bool suppressDefaultLog = false;
            AfterAccessTokenDelete(ref suppressDefaultLog, apiResponseLocalVar, id, appKey);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        partial void AfterAccessTokenDelete(ref bool suppressDefaultLog, IAccessTokenDeleteApiResponse apiResponseLocalVar, long id, string appKey);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        private void OnErrorAccessTokenDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id, string appKey)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAccessTokenDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, appKey);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        partial void OnErrorAccessTokenDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id, string appKey);

        /// <summary>
        /// 删除令牌 删除用户令牌
        /// </summary>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAccessTokenDeleteApiResponse"/>&gt;</returns>
        public async Task<IAccessTokenDeleteApiResponse> AccessTokenDeleteOrDefaultAsync(long id, string appKey, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AccessTokenDeleteAsync(id, appKey, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 删除令牌 删除用户令牌
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAccessTokenDeleteApiResponse"/>&gt;</returns>
        public async Task<IAccessTokenDeleteApiResponse> AccessTokenDeleteAsync(long id, string appKey, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAccessTokenDelete(appKey);

                FormatAccessTokenDelete(ref id, ref appKey);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/AccessToken/{appKey}/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<AccessTokenDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AccessTokenDeleteApiResponse>();

                        AccessTokenDeleteApiResponse apiResponseLocalVar = new AccessTokenDeleteApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/AccessToken/{appKey}/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAccessTokenDeleteDefaultImplementation(apiResponseLocalVar, id, appKey);

                        Events.ExecuteOnAccessTokenDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAccessTokenDeleteDefaultImplementation(e, "/AccessToken/{appKey}/{id}", uriBuilderLocalVar.Path, id, appKey);
                Events.ExecuteOnErrorAccessTokenDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AccessTokenDeleteApiResponse"/>
        /// </summary>
        public partial class AccessTokenDeleteApiResponse : ZSGF.Client.Client.ApiResponse, IAccessTokenDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AccessTokenDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AccessTokenDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AccessTokenDeleteApiResponse(ILogger<AccessTokenDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.BooleanApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.BooleanApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.BooleanApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatAccessTokenPost(ref string appKey, Option<AccessTokenPostRequest> accessTokenPostRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="accessTokenPostRequest"></param>
        /// <returns></returns>
        private void ValidateAccessTokenPost(string appKey, Option<AccessTokenPostRequest> accessTokenPostRequest)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (accessTokenPostRequest.IsSet && accessTokenPostRequest.Value == null)
                throw new ArgumentNullException(nameof(accessTokenPostRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="accessTokenPostRequest"></param>
        private void AfterAccessTokenPostDefaultImplementation(IAccessTokenPostApiResponse apiResponseLocalVar, string appKey, Option<AccessTokenPostRequest> accessTokenPostRequest)
        {
            bool suppressDefaultLog = false;
            AfterAccessTokenPost(ref suppressDefaultLog, apiResponseLocalVar, appKey, accessTokenPostRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="accessTokenPostRequest"></param>
        partial void AfterAccessTokenPost(ref bool suppressDefaultLog, IAccessTokenPostApiResponse apiResponseLocalVar, string appKey, Option<AccessTokenPostRequest> accessTokenPostRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="accessTokenPostRequest"></param>
        private void OnErrorAccessTokenPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<AccessTokenPostRequest> accessTokenPostRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAccessTokenPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, accessTokenPostRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="accessTokenPostRequest"></param>
        partial void OnErrorAccessTokenPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<AccessTokenPostRequest> accessTokenPostRequest);

        /// <summary>
        /// 创建令牌 创建新的用户令牌
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="accessTokenPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAccessTokenPostApiResponse"/>&gt;</returns>
        public async Task<IAccessTokenPostApiResponse> AccessTokenPostOrDefaultAsync(string appKey, Option<AccessTokenPostRequest> accessTokenPostRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AccessTokenPostAsync(appKey, accessTokenPostRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 创建令牌 创建新的用户令牌
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="accessTokenPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAccessTokenPostApiResponse"/>&gt;</returns>
        public async Task<IAccessTokenPostApiResponse> AccessTokenPostAsync(string appKey, Option<AccessTokenPostRequest> accessTokenPostRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAccessTokenPost(appKey, accessTokenPostRequest);

                FormatAccessTokenPost(ref appKey, accessTokenPostRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/AccessToken/{appKey}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    if (accessTokenPostRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (accessTokenPostRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(accessTokenPostRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<AccessTokenPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AccessTokenPostApiResponse>();

                        AccessTokenPostApiResponse apiResponseLocalVar = new AccessTokenPostApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/AccessToken/{appKey}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAccessTokenPostDefaultImplementation(apiResponseLocalVar, appKey, accessTokenPostRequest);

                        Events.ExecuteOnAccessTokenPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAccessTokenPostDefaultImplementation(e, "/AccessToken/{appKey}", uriBuilderLocalVar.Path, appKey, accessTokenPostRequest);
                Events.ExecuteOnErrorAccessTokenPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AccessTokenPostApiResponse"/>
        /// </summary>
        public partial class AccessTokenPostApiResponse : ZSGF.Client.Client.ApiResponse, IAccessTokenPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AccessTokenPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AccessTokenPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AccessTokenPostApiResponse(ILogger<AccessTokenPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.TokenModelApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.TokenModelApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.TokenModelApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatAccessTokenPut(ref long id, ref string appKey, Option<AccessTokenPutRequest> accessTokenPutRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="accessTokenPutRequest"></param>
        /// <returns></returns>
        private void ValidateAccessTokenPut(string appKey, Option<AccessTokenPutRequest> accessTokenPutRequest)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (accessTokenPutRequest.IsSet && accessTokenPutRequest.Value == null)
                throw new ArgumentNullException(nameof(accessTokenPutRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        /// <param name="accessTokenPutRequest"></param>
        private void AfterAccessTokenPutDefaultImplementation(IAccessTokenPutApiResponse apiResponseLocalVar, long id, string appKey, Option<AccessTokenPutRequest> accessTokenPutRequest)
        {
            bool suppressDefaultLog = false;
            AfterAccessTokenPut(ref suppressDefaultLog, apiResponseLocalVar, id, appKey, accessTokenPutRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        /// <param name="accessTokenPutRequest"></param>
        partial void AfterAccessTokenPut(ref bool suppressDefaultLog, IAccessTokenPutApiResponse apiResponseLocalVar, long id, string appKey, Option<AccessTokenPutRequest> accessTokenPutRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        /// <param name="accessTokenPutRequest"></param>
        private void OnErrorAccessTokenPutDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id, string appKey, Option<AccessTokenPutRequest> accessTokenPutRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAccessTokenPut(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, appKey, accessTokenPutRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        /// <param name="accessTokenPutRequest"></param>
        partial void OnErrorAccessTokenPut(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id, string appKey, Option<AccessTokenPutRequest> accessTokenPutRequest);

        /// <summary>
        /// 更新令牌 更新现有的用户令牌
        /// </summary>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        /// <param name="accessTokenPutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAccessTokenPutApiResponse"/>&gt;</returns>
        public async Task<IAccessTokenPutApiResponse> AccessTokenPutOrDefaultAsync(long id, string appKey, Option<AccessTokenPutRequest> accessTokenPutRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AccessTokenPutAsync(id, appKey, accessTokenPutRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 更新令牌 更新现有的用户令牌
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        /// <param name="accessTokenPutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAccessTokenPutApiResponse"/>&gt;</returns>
        public async Task<IAccessTokenPutApiResponse> AccessTokenPutAsync(long id, string appKey, Option<AccessTokenPutRequest> accessTokenPutRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAccessTokenPut(appKey, accessTokenPutRequest);

                FormatAccessTokenPut(ref id, ref appKey, accessTokenPutRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/AccessToken/{appKey}/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    if (accessTokenPutRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (accessTokenPutRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(accessTokenPutRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PUT");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<AccessTokenPutApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AccessTokenPutApiResponse>();

                        AccessTokenPutApiResponse apiResponseLocalVar = new AccessTokenPutApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/AccessToken/{appKey}/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAccessTokenPutDefaultImplementation(apiResponseLocalVar, id, appKey, accessTokenPutRequest);

                        Events.ExecuteOnAccessTokenPut(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAccessTokenPutDefaultImplementation(e, "/AccessToken/{appKey}/{id}", uriBuilderLocalVar.Path, id, appKey, accessTokenPutRequest);
                Events.ExecuteOnErrorAccessTokenPut(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AccessTokenPutApiResponse"/>
        /// </summary>
        public partial class AccessTokenPutApiResponse : ZSGF.Client.Client.ApiResponse, IAccessTokenPutApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AccessTokenPutApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AccessTokenPutApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AccessTokenPutApiResponse(ILogger<AccessTokenPutApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.BooleanApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.BooleanApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.BooleanApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatAccessTokens(ref string appKey, ref Option<long> userId, ref Option<int> skip, ref Option<int> take);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <returns></returns>
        private void ValidateAccessTokens(string appKey)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="userId"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        private void AfterAccessTokensDefaultImplementation(IAccessTokensApiResponse apiResponseLocalVar, string appKey, Option<long> userId, Option<int> skip, Option<int> take)
        {
            bool suppressDefaultLog = false;
            AfterAccessTokens(ref suppressDefaultLog, apiResponseLocalVar, appKey, userId, skip, take);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="userId"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        partial void AfterAccessTokens(ref bool suppressDefaultLog, IAccessTokensApiResponse apiResponseLocalVar, string appKey, Option<long> userId, Option<int> skip, Option<int> take);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="userId"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        private void OnErrorAccessTokensDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<long> userId, Option<int> skip, Option<int> take)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAccessTokens(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, userId, skip, take);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="userId"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        partial void OnErrorAccessTokens(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<long> userId, Option<int> skip, Option<int> take);

        /// <summary>
        /// 令牌列表 获取用户令牌列表
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="take"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAccessTokensApiResponse"/>&gt;</returns>
        public async Task<IAccessTokensApiResponse> AccessTokensOrDefaultAsync(string appKey, Option<long> userId = default, Option<int> skip = default, Option<int> take = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AccessTokensAsync(appKey, userId, skip, take, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 令牌列表 获取用户令牌列表
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="take"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAccessTokensApiResponse"/>&gt;</returns>
        public async Task<IAccessTokensApiResponse> AccessTokensAsync(string appKey, Option<long> userId = default, Option<int> skip = default, Option<int> take = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAccessTokens(appKey);

                FormatAccessTokens(ref appKey, ref userId, ref skip, ref take);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/AccessToken/{appKey}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (userId.IsSet)
                        parseQueryStringLocalVar["userId"] = ClientUtils.ParameterToString(userId.Value);

                    if (skip.IsSet)
                        parseQueryStringLocalVar["skip"] = ClientUtils.ParameterToString(skip.Value);

                    if (take.IsSet)
                        parseQueryStringLocalVar["take"] = ClientUtils.ParameterToString(take.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<AccessTokensApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AccessTokensApiResponse>();

                        AccessTokensApiResponse apiResponseLocalVar = new AccessTokensApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/AccessToken/{appKey}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAccessTokensDefaultImplementation(apiResponseLocalVar, appKey, userId, skip, take);

                        Events.ExecuteOnAccessTokens(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAccessTokensDefaultImplementation(e, "/AccessToken/{appKey}", uriBuilderLocalVar.Path, appKey, userId, skip, take);
                Events.ExecuteOnErrorAccessTokens(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AccessTokensApiResponse"/>
        /// </summary>
        public partial class AccessTokensApiResponse : ZSGF.Client.Client.ApiResponse, IAccessTokensApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AccessTokensApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AccessTokensApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AccessTokensApiResponse(ILogger<AccessTokensApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.AccessTokenListResultApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.AccessTokenListResultApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.AccessTokenListResultApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
