// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using ZSGF.Client.Client;
using ZSGF.Client.Model;

namespace ZSGF.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IAlipayApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        AlipayApiEvents Events { get; }

        /// <summary>
        /// 创建当面付订单
        /// </summary>
        /// <remarks>
        /// 创建一个当面付订单，并返回支付二维码。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="alipayCreateOrderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAlipayCreateOrderApiResponse"/>&gt;</returns>
        Task<IAlipayCreateOrderApiResponse> AlipayCreateOrderAsync(string appKey, Option<AlipayCreateOrderRequest> alipayCreateOrderRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 创建当面付订单
        /// </summary>
        /// <remarks>
        /// 创建一个当面付订单，并返回支付二维码。
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="alipayCreateOrderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAlipayCreateOrderApiResponse"/>&gt;</returns>
        Task<IAlipayCreateOrderApiResponse> AlipayCreateOrderOrDefaultAsync(string appKey, Option<AlipayCreateOrderRequest> alipayCreateOrderRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 创建PC支付订单
        /// </summary>
        /// <remarks>
        /// 创建一个PC支付订单，并返回支付页面。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="alipayCreateOrderPagePayRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAlipayCreateOrderPagePayApiResponse"/>&gt;</returns>
        Task<IAlipayCreateOrderPagePayApiResponse> AlipayCreateOrderPagePayAsync(string appKey, Option<AlipayCreateOrderPagePayRequest> alipayCreateOrderPagePayRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 创建PC支付订单
        /// </summary>
        /// <remarks>
        /// 创建一个PC支付订单，并返回支付页面。
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="alipayCreateOrderPagePayRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAlipayCreateOrderPagePayApiResponse"/>&gt;</returns>
        Task<IAlipayCreateOrderPagePayApiResponse> AlipayCreateOrderPagePayOrDefaultAsync(string appKey, Option<AlipayCreateOrderPagePayRequest> alipayCreateOrderPagePayRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 创建WAP支付订单
        /// </summary>
        /// <remarks>
        /// 创建一个WAP支付订单，并返回支付页面。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="alipayCreateOrderWapPayRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAlipayCreateOrderWapPayApiResponse"/>&gt;</returns>
        Task<IAlipayCreateOrderWapPayApiResponse> AlipayCreateOrderWapPayAsync(string appKey, Option<AlipayCreateOrderWapPayRequest> alipayCreateOrderWapPayRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 创建WAP支付订单
        /// </summary>
        /// <remarks>
        /// 创建一个WAP支付订单，并返回支付页面。
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="alipayCreateOrderWapPayRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAlipayCreateOrderWapPayApiResponse"/>&gt;</returns>
        Task<IAlipayCreateOrderWapPayApiResponse> AlipayCreateOrderWapPayOrDefaultAsync(string appKey, Option<AlipayCreateOrderWapPayRequest> alipayCreateOrderWapPayRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取订单详情
        /// </summary>
        /// <remarks>
        /// 查询订单详情，包括订单状态和支付信息。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="orderNo">订单号 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAlipayOrderDetailApiResponse"/>&gt;</returns>
        Task<IAlipayOrderDetailApiResponse> AlipayOrderDetailAsync(string appKey, Option<string> orderNo = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取订单详情
        /// </summary>
        /// <remarks>
        /// 查询订单详情，包括订单状态和支付信息。
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="orderNo">订单号 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAlipayOrderDetailApiResponse"/>&gt;</returns>
        Task<IAlipayOrderDetailApiResponse> AlipayOrderDetailOrDefaultAsync(string appKey, Option<string> orderNo = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 发起订单退款
        /// </summary>
        /// <remarks>
        /// 对指定订单进行退款操作。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="amount">退款金额 (optional)</param>
        /// <param name="orderNo">订单号 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAlipayOrderRefundApiResponse"/>&gt;</returns>
        Task<IAlipayOrderRefundApiResponse> AlipayOrderRefundAsync(string appKey, Option<string> amount = default, Option<string> orderNo = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 发起订单退款
        /// </summary>
        /// <remarks>
        /// 对指定订单进行退款操作。
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="amount">退款金额 (optional)</param>
        /// <param name="orderNo">订单号 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAlipayOrderRefundApiResponse"/>&gt;</returns>
        Task<IAlipayOrderRefundApiResponse> AlipayOrderRefundOrDefaultAsync(string appKey, Option<string> amount = default, Option<string> orderNo = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 支付成功回调通知
        /// </summary>
        /// <remarks>
        /// 处理支付宝支付成功的同步通知。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="returnPageNotifyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAlipayReturnPageNotifyApiResponse"/>&gt;</returns>
        Task<IAlipayReturnPageNotifyApiResponse> AlipayReturnPageNotifyAsync(string appKey, Option<ReturnPageNotifyRequest> returnPageNotifyRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 支付成功回调通知
        /// </summary>
        /// <remarks>
        /// 处理支付宝支付成功的同步通知。
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="returnPageNotifyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAlipayReturnPageNotifyApiResponse"/>&gt;</returns>
        Task<IAlipayReturnPageNotifyApiResponse> AlipayReturnPageNotifyOrDefaultAsync(string appKey, Option<ReturnPageNotifyRequest> returnPageNotifyRequest = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IAlipayCreateOrderApiResponse"/>
    /// </summary>
    public interface IAlipayCreateOrderApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.StringApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IAlipayCreateOrderPagePayApiResponse"/>
    /// </summary>
    public interface IAlipayCreateOrderPagePayApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.StringApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IAlipayCreateOrderWapPayApiResponse"/>
    /// </summary>
    public interface IAlipayCreateOrderWapPayApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.StringApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IAlipayOrderDetailApiResponse"/>
    /// </summary>
    public interface IAlipayOrderDetailApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.AlipayTradeQueryResponseApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IAlipayOrderRefundApiResponse"/>
    /// </summary>
    public interface IAlipayOrderRefundApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.AlipayTradeRefundResponseApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IAlipayReturnPageNotifyApiResponse"/>
    /// </summary>
    public interface IAlipayReturnPageNotifyApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.BooleanApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class AlipayApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnAlipayCreateOrder;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorAlipayCreateOrder;

        internal void ExecuteOnAlipayCreateOrder(AlipayApi.AlipayCreateOrderApiResponse apiResponse)
        {
            OnAlipayCreateOrder?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAlipayCreateOrder(Exception exception)
        {
            OnErrorAlipayCreateOrder?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnAlipayCreateOrderPagePay;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorAlipayCreateOrderPagePay;

        internal void ExecuteOnAlipayCreateOrderPagePay(AlipayApi.AlipayCreateOrderPagePayApiResponse apiResponse)
        {
            OnAlipayCreateOrderPagePay?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAlipayCreateOrderPagePay(Exception exception)
        {
            OnErrorAlipayCreateOrderPagePay?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnAlipayCreateOrderWapPay;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorAlipayCreateOrderWapPay;

        internal void ExecuteOnAlipayCreateOrderWapPay(AlipayApi.AlipayCreateOrderWapPayApiResponse apiResponse)
        {
            OnAlipayCreateOrderWapPay?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAlipayCreateOrderWapPay(Exception exception)
        {
            OnErrorAlipayCreateOrderWapPay?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnAlipayOrderDetail;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorAlipayOrderDetail;

        internal void ExecuteOnAlipayOrderDetail(AlipayApi.AlipayOrderDetailApiResponse apiResponse)
        {
            OnAlipayOrderDetail?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAlipayOrderDetail(Exception exception)
        {
            OnErrorAlipayOrderDetail?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnAlipayOrderRefund;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorAlipayOrderRefund;

        internal void ExecuteOnAlipayOrderRefund(AlipayApi.AlipayOrderRefundApiResponse apiResponse)
        {
            OnAlipayOrderRefund?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAlipayOrderRefund(Exception exception)
        {
            OnErrorAlipayOrderRefund?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnAlipayReturnPageNotify;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorAlipayReturnPageNotify;

        internal void ExecuteOnAlipayReturnPageNotify(AlipayApi.AlipayReturnPageNotifyApiResponse apiResponse)
        {
            OnAlipayReturnPageNotify?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAlipayReturnPageNotify(Exception exception)
        {
            OnErrorAlipayReturnPageNotify?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class AlipayApi : IAlipayApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<AlipayApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public AlipayApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="AlipayApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AlipayApi(ILogger<AlipayApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, AlipayApiEvents alipayApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<AlipayApi>();
            HttpClient = httpClient;
            Events = alipayApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatAlipayCreateOrder(ref string appKey, Option<AlipayCreateOrderRequest> alipayCreateOrderRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="alipayCreateOrderRequest"></param>
        /// <returns></returns>
        private void ValidateAlipayCreateOrder(string appKey, Option<AlipayCreateOrderRequest> alipayCreateOrderRequest)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (alipayCreateOrderRequest.IsSet && alipayCreateOrderRequest.Value == null)
                throw new ArgumentNullException(nameof(alipayCreateOrderRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="alipayCreateOrderRequest"></param>
        private void AfterAlipayCreateOrderDefaultImplementation(IAlipayCreateOrderApiResponse apiResponseLocalVar, string appKey, Option<AlipayCreateOrderRequest> alipayCreateOrderRequest)
        {
            bool suppressDefaultLog = false;
            AfterAlipayCreateOrder(ref suppressDefaultLog, apiResponseLocalVar, appKey, alipayCreateOrderRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="alipayCreateOrderRequest"></param>
        partial void AfterAlipayCreateOrder(ref bool suppressDefaultLog, IAlipayCreateOrderApiResponse apiResponseLocalVar, string appKey, Option<AlipayCreateOrderRequest> alipayCreateOrderRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="alipayCreateOrderRequest"></param>
        private void OnErrorAlipayCreateOrderDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<AlipayCreateOrderRequest> alipayCreateOrderRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAlipayCreateOrder(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, alipayCreateOrderRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="alipayCreateOrderRequest"></param>
        partial void OnErrorAlipayCreateOrder(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<AlipayCreateOrderRequest> alipayCreateOrderRequest);

        /// <summary>
        /// 创建当面付订单 创建一个当面付订单，并返回支付二维码。
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="alipayCreateOrderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAlipayCreateOrderApiResponse"/>&gt;</returns>
        public async Task<IAlipayCreateOrderApiResponse> AlipayCreateOrderOrDefaultAsync(string appKey, Option<AlipayCreateOrderRequest> alipayCreateOrderRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AlipayCreateOrderAsync(appKey, alipayCreateOrderRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 创建当面付订单 创建一个当面付订单，并返回支付二维码。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="alipayCreateOrderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAlipayCreateOrderApiResponse"/>&gt;</returns>
        public async Task<IAlipayCreateOrderApiResponse> AlipayCreateOrderAsync(string appKey, Option<AlipayCreateOrderRequest> alipayCreateOrderRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAlipayCreateOrder(appKey, alipayCreateOrderRequest);

                FormatAlipayCreateOrder(ref appKey, alipayCreateOrderRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Alipay/{appKey}/CreateOrder";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    if (alipayCreateOrderRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (alipayCreateOrderRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(alipayCreateOrderRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<AlipayCreateOrderApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AlipayCreateOrderApiResponse>();

                        AlipayCreateOrderApiResponse apiResponseLocalVar = new AlipayCreateOrderApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Alipay/{appKey}/CreateOrder", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAlipayCreateOrderDefaultImplementation(apiResponseLocalVar, appKey, alipayCreateOrderRequest);

                        Events.ExecuteOnAlipayCreateOrder(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAlipayCreateOrderDefaultImplementation(e, "/Alipay/{appKey}/CreateOrder", uriBuilderLocalVar.Path, appKey, alipayCreateOrderRequest);
                Events.ExecuteOnErrorAlipayCreateOrder(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AlipayCreateOrderApiResponse"/>
        /// </summary>
        public partial class AlipayCreateOrderApiResponse : ZSGF.Client.Client.ApiResponse, IAlipayCreateOrderApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AlipayCreateOrderApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AlipayCreateOrderApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AlipayCreateOrderApiResponse(ILogger<AlipayCreateOrderApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.StringApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.StringApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.StringApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatAlipayCreateOrderPagePay(ref string appKey, Option<AlipayCreateOrderPagePayRequest> alipayCreateOrderPagePayRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="alipayCreateOrderPagePayRequest"></param>
        /// <returns></returns>
        private void ValidateAlipayCreateOrderPagePay(string appKey, Option<AlipayCreateOrderPagePayRequest> alipayCreateOrderPagePayRequest)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (alipayCreateOrderPagePayRequest.IsSet && alipayCreateOrderPagePayRequest.Value == null)
                throw new ArgumentNullException(nameof(alipayCreateOrderPagePayRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="alipayCreateOrderPagePayRequest"></param>
        private void AfterAlipayCreateOrderPagePayDefaultImplementation(IAlipayCreateOrderPagePayApiResponse apiResponseLocalVar, string appKey, Option<AlipayCreateOrderPagePayRequest> alipayCreateOrderPagePayRequest)
        {
            bool suppressDefaultLog = false;
            AfterAlipayCreateOrderPagePay(ref suppressDefaultLog, apiResponseLocalVar, appKey, alipayCreateOrderPagePayRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="alipayCreateOrderPagePayRequest"></param>
        partial void AfterAlipayCreateOrderPagePay(ref bool suppressDefaultLog, IAlipayCreateOrderPagePayApiResponse apiResponseLocalVar, string appKey, Option<AlipayCreateOrderPagePayRequest> alipayCreateOrderPagePayRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="alipayCreateOrderPagePayRequest"></param>
        private void OnErrorAlipayCreateOrderPagePayDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<AlipayCreateOrderPagePayRequest> alipayCreateOrderPagePayRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAlipayCreateOrderPagePay(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, alipayCreateOrderPagePayRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="alipayCreateOrderPagePayRequest"></param>
        partial void OnErrorAlipayCreateOrderPagePay(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<AlipayCreateOrderPagePayRequest> alipayCreateOrderPagePayRequest);

        /// <summary>
        /// 创建PC支付订单 创建一个PC支付订单，并返回支付页面。
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="alipayCreateOrderPagePayRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAlipayCreateOrderPagePayApiResponse"/>&gt;</returns>
        public async Task<IAlipayCreateOrderPagePayApiResponse> AlipayCreateOrderPagePayOrDefaultAsync(string appKey, Option<AlipayCreateOrderPagePayRequest> alipayCreateOrderPagePayRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AlipayCreateOrderPagePayAsync(appKey, alipayCreateOrderPagePayRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 创建PC支付订单 创建一个PC支付订单，并返回支付页面。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="alipayCreateOrderPagePayRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAlipayCreateOrderPagePayApiResponse"/>&gt;</returns>
        public async Task<IAlipayCreateOrderPagePayApiResponse> AlipayCreateOrderPagePayAsync(string appKey, Option<AlipayCreateOrderPagePayRequest> alipayCreateOrderPagePayRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAlipayCreateOrderPagePay(appKey, alipayCreateOrderPagePayRequest);

                FormatAlipayCreateOrderPagePay(ref appKey, alipayCreateOrderPagePayRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Alipay/{appKey}/CreateOrderPagePay";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    if (alipayCreateOrderPagePayRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (alipayCreateOrderPagePayRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(alipayCreateOrderPagePayRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<AlipayCreateOrderPagePayApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AlipayCreateOrderPagePayApiResponse>();

                        AlipayCreateOrderPagePayApiResponse apiResponseLocalVar = new AlipayCreateOrderPagePayApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Alipay/{appKey}/CreateOrderPagePay", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAlipayCreateOrderPagePayDefaultImplementation(apiResponseLocalVar, appKey, alipayCreateOrderPagePayRequest);

                        Events.ExecuteOnAlipayCreateOrderPagePay(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAlipayCreateOrderPagePayDefaultImplementation(e, "/Alipay/{appKey}/CreateOrderPagePay", uriBuilderLocalVar.Path, appKey, alipayCreateOrderPagePayRequest);
                Events.ExecuteOnErrorAlipayCreateOrderPagePay(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AlipayCreateOrderPagePayApiResponse"/>
        /// </summary>
        public partial class AlipayCreateOrderPagePayApiResponse : ZSGF.Client.Client.ApiResponse, IAlipayCreateOrderPagePayApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AlipayCreateOrderPagePayApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AlipayCreateOrderPagePayApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AlipayCreateOrderPagePayApiResponse(ILogger<AlipayCreateOrderPagePayApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.StringApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.StringApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.StringApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatAlipayCreateOrderWapPay(ref string appKey, Option<AlipayCreateOrderWapPayRequest> alipayCreateOrderWapPayRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="alipayCreateOrderWapPayRequest"></param>
        /// <returns></returns>
        private void ValidateAlipayCreateOrderWapPay(string appKey, Option<AlipayCreateOrderWapPayRequest> alipayCreateOrderWapPayRequest)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (alipayCreateOrderWapPayRequest.IsSet && alipayCreateOrderWapPayRequest.Value == null)
                throw new ArgumentNullException(nameof(alipayCreateOrderWapPayRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="alipayCreateOrderWapPayRequest"></param>
        private void AfterAlipayCreateOrderWapPayDefaultImplementation(IAlipayCreateOrderWapPayApiResponse apiResponseLocalVar, string appKey, Option<AlipayCreateOrderWapPayRequest> alipayCreateOrderWapPayRequest)
        {
            bool suppressDefaultLog = false;
            AfterAlipayCreateOrderWapPay(ref suppressDefaultLog, apiResponseLocalVar, appKey, alipayCreateOrderWapPayRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="alipayCreateOrderWapPayRequest"></param>
        partial void AfterAlipayCreateOrderWapPay(ref bool suppressDefaultLog, IAlipayCreateOrderWapPayApiResponse apiResponseLocalVar, string appKey, Option<AlipayCreateOrderWapPayRequest> alipayCreateOrderWapPayRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="alipayCreateOrderWapPayRequest"></param>
        private void OnErrorAlipayCreateOrderWapPayDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<AlipayCreateOrderWapPayRequest> alipayCreateOrderWapPayRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAlipayCreateOrderWapPay(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, alipayCreateOrderWapPayRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="alipayCreateOrderWapPayRequest"></param>
        partial void OnErrorAlipayCreateOrderWapPay(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<AlipayCreateOrderWapPayRequest> alipayCreateOrderWapPayRequest);

        /// <summary>
        /// 创建WAP支付订单 创建一个WAP支付订单，并返回支付页面。
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="alipayCreateOrderWapPayRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAlipayCreateOrderWapPayApiResponse"/>&gt;</returns>
        public async Task<IAlipayCreateOrderWapPayApiResponse> AlipayCreateOrderWapPayOrDefaultAsync(string appKey, Option<AlipayCreateOrderWapPayRequest> alipayCreateOrderWapPayRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AlipayCreateOrderWapPayAsync(appKey, alipayCreateOrderWapPayRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 创建WAP支付订单 创建一个WAP支付订单，并返回支付页面。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="alipayCreateOrderWapPayRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAlipayCreateOrderWapPayApiResponse"/>&gt;</returns>
        public async Task<IAlipayCreateOrderWapPayApiResponse> AlipayCreateOrderWapPayAsync(string appKey, Option<AlipayCreateOrderWapPayRequest> alipayCreateOrderWapPayRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAlipayCreateOrderWapPay(appKey, alipayCreateOrderWapPayRequest);

                FormatAlipayCreateOrderWapPay(ref appKey, alipayCreateOrderWapPayRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Alipay/{appKey}/CreateOrderWapPay";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    if (alipayCreateOrderWapPayRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (alipayCreateOrderWapPayRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(alipayCreateOrderWapPayRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<AlipayCreateOrderWapPayApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AlipayCreateOrderWapPayApiResponse>();

                        AlipayCreateOrderWapPayApiResponse apiResponseLocalVar = new AlipayCreateOrderWapPayApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Alipay/{appKey}/CreateOrderWapPay", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAlipayCreateOrderWapPayDefaultImplementation(apiResponseLocalVar, appKey, alipayCreateOrderWapPayRequest);

                        Events.ExecuteOnAlipayCreateOrderWapPay(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAlipayCreateOrderWapPayDefaultImplementation(e, "/Alipay/{appKey}/CreateOrderWapPay", uriBuilderLocalVar.Path, appKey, alipayCreateOrderWapPayRequest);
                Events.ExecuteOnErrorAlipayCreateOrderWapPay(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AlipayCreateOrderWapPayApiResponse"/>
        /// </summary>
        public partial class AlipayCreateOrderWapPayApiResponse : ZSGF.Client.Client.ApiResponse, IAlipayCreateOrderWapPayApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AlipayCreateOrderWapPayApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AlipayCreateOrderWapPayApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AlipayCreateOrderWapPayApiResponse(ILogger<AlipayCreateOrderWapPayApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.StringApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.StringApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.StringApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatAlipayOrderDetail(ref string appKey, ref Option<string> orderNo);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="orderNo"></param>
        /// <returns></returns>
        private void ValidateAlipayOrderDetail(string appKey, Option<string> orderNo)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (orderNo.IsSet && orderNo.Value == null)
                throw new ArgumentNullException(nameof(orderNo));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="orderNo"></param>
        private void AfterAlipayOrderDetailDefaultImplementation(IAlipayOrderDetailApiResponse apiResponseLocalVar, string appKey, Option<string> orderNo)
        {
            bool suppressDefaultLog = false;
            AfterAlipayOrderDetail(ref suppressDefaultLog, apiResponseLocalVar, appKey, orderNo);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="orderNo"></param>
        partial void AfterAlipayOrderDetail(ref bool suppressDefaultLog, IAlipayOrderDetailApiResponse apiResponseLocalVar, string appKey, Option<string> orderNo);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="orderNo"></param>
        private void OnErrorAlipayOrderDetailDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<string> orderNo)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAlipayOrderDetail(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, orderNo);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="orderNo"></param>
        partial void OnErrorAlipayOrderDetail(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<string> orderNo);

        /// <summary>
        /// 获取订单详情 查询订单详情，包括订单状态和支付信息。
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="orderNo">订单号 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAlipayOrderDetailApiResponse"/>&gt;</returns>
        public async Task<IAlipayOrderDetailApiResponse> AlipayOrderDetailOrDefaultAsync(string appKey, Option<string> orderNo = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AlipayOrderDetailAsync(appKey, orderNo, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取订单详情 查询订单详情，包括订单状态和支付信息。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="orderNo">订单号 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAlipayOrderDetailApiResponse"/>&gt;</returns>
        public async Task<IAlipayOrderDetailApiResponse> AlipayOrderDetailAsync(string appKey, Option<string> orderNo = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAlipayOrderDetail(appKey, orderNo);

                FormatAlipayOrderDetail(ref appKey, ref orderNo);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Alipay/{appKey}/OrderDetail";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (orderNo.IsSet)
                        parseQueryStringLocalVar["orderNo"] = ClientUtils.ParameterToString(orderNo.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<AlipayOrderDetailApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AlipayOrderDetailApiResponse>();

                        AlipayOrderDetailApiResponse apiResponseLocalVar = new AlipayOrderDetailApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Alipay/{appKey}/OrderDetail", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAlipayOrderDetailDefaultImplementation(apiResponseLocalVar, appKey, orderNo);

                        Events.ExecuteOnAlipayOrderDetail(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAlipayOrderDetailDefaultImplementation(e, "/Alipay/{appKey}/OrderDetail", uriBuilderLocalVar.Path, appKey, orderNo);
                Events.ExecuteOnErrorAlipayOrderDetail(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AlipayOrderDetailApiResponse"/>
        /// </summary>
        public partial class AlipayOrderDetailApiResponse : ZSGF.Client.Client.ApiResponse, IAlipayOrderDetailApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AlipayOrderDetailApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AlipayOrderDetailApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AlipayOrderDetailApiResponse(ILogger<AlipayOrderDetailApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.AlipayTradeQueryResponseApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.AlipayTradeQueryResponseApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.AlipayTradeQueryResponseApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatAlipayOrderRefund(ref string appKey, ref Option<string> amount, ref Option<string> orderNo);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="amount"></param>
        /// <param name="orderNo"></param>
        /// <returns></returns>
        private void ValidateAlipayOrderRefund(string appKey, Option<string> amount, Option<string> orderNo)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (amount.IsSet && amount.Value == null)
                throw new ArgumentNullException(nameof(amount));

            if (orderNo.IsSet && orderNo.Value == null)
                throw new ArgumentNullException(nameof(orderNo));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="amount"></param>
        /// <param name="orderNo"></param>
        private void AfterAlipayOrderRefundDefaultImplementation(IAlipayOrderRefundApiResponse apiResponseLocalVar, string appKey, Option<string> amount, Option<string> orderNo)
        {
            bool suppressDefaultLog = false;
            AfterAlipayOrderRefund(ref suppressDefaultLog, apiResponseLocalVar, appKey, amount, orderNo);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="amount"></param>
        /// <param name="orderNo"></param>
        partial void AfterAlipayOrderRefund(ref bool suppressDefaultLog, IAlipayOrderRefundApiResponse apiResponseLocalVar, string appKey, Option<string> amount, Option<string> orderNo);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="amount"></param>
        /// <param name="orderNo"></param>
        private void OnErrorAlipayOrderRefundDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<string> amount, Option<string> orderNo)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAlipayOrderRefund(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, amount, orderNo);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="amount"></param>
        /// <param name="orderNo"></param>
        partial void OnErrorAlipayOrderRefund(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<string> amount, Option<string> orderNo);

        /// <summary>
        /// 发起订单退款 对指定订单进行退款操作。
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="amount">退款金额 (optional)</param>
        /// <param name="orderNo">订单号 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAlipayOrderRefundApiResponse"/>&gt;</returns>
        public async Task<IAlipayOrderRefundApiResponse> AlipayOrderRefundOrDefaultAsync(string appKey, Option<string> amount = default, Option<string> orderNo = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AlipayOrderRefundAsync(appKey, amount, orderNo, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 发起订单退款 对指定订单进行退款操作。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="amount">退款金额 (optional)</param>
        /// <param name="orderNo">订单号 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAlipayOrderRefundApiResponse"/>&gt;</returns>
        public async Task<IAlipayOrderRefundApiResponse> AlipayOrderRefundAsync(string appKey, Option<string> amount = default, Option<string> orderNo = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAlipayOrderRefund(appKey, amount, orderNo);

                FormatAlipayOrderRefund(ref appKey, ref amount, ref orderNo);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Alipay/{appKey}/OrderRefund";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (amount.IsSet)
                        parseQueryStringLocalVar["amount"] = ClientUtils.ParameterToString(amount.Value);

                    if (orderNo.IsSet)
                        parseQueryStringLocalVar["orderNo"] = ClientUtils.ParameterToString(orderNo.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<AlipayOrderRefundApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AlipayOrderRefundApiResponse>();

                        AlipayOrderRefundApiResponse apiResponseLocalVar = new AlipayOrderRefundApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Alipay/{appKey}/OrderRefund", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAlipayOrderRefundDefaultImplementation(apiResponseLocalVar, appKey, amount, orderNo);

                        Events.ExecuteOnAlipayOrderRefund(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAlipayOrderRefundDefaultImplementation(e, "/Alipay/{appKey}/OrderRefund", uriBuilderLocalVar.Path, appKey, amount, orderNo);
                Events.ExecuteOnErrorAlipayOrderRefund(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AlipayOrderRefundApiResponse"/>
        /// </summary>
        public partial class AlipayOrderRefundApiResponse : ZSGF.Client.Client.ApiResponse, IAlipayOrderRefundApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AlipayOrderRefundApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AlipayOrderRefundApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AlipayOrderRefundApiResponse(ILogger<AlipayOrderRefundApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.AlipayTradeRefundResponseApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.AlipayTradeRefundResponseApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.AlipayTradeRefundResponseApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatAlipayReturnPageNotify(ref string appKey, Option<ReturnPageNotifyRequest> returnPageNotifyRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="returnPageNotifyRequest"></param>
        /// <returns></returns>
        private void ValidateAlipayReturnPageNotify(string appKey, Option<ReturnPageNotifyRequest> returnPageNotifyRequest)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (returnPageNotifyRequest.IsSet && returnPageNotifyRequest.Value == null)
                throw new ArgumentNullException(nameof(returnPageNotifyRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="returnPageNotifyRequest"></param>
        private void AfterAlipayReturnPageNotifyDefaultImplementation(IAlipayReturnPageNotifyApiResponse apiResponseLocalVar, string appKey, Option<ReturnPageNotifyRequest> returnPageNotifyRequest)
        {
            bool suppressDefaultLog = false;
            AfterAlipayReturnPageNotify(ref suppressDefaultLog, apiResponseLocalVar, appKey, returnPageNotifyRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="returnPageNotifyRequest"></param>
        partial void AfterAlipayReturnPageNotify(ref bool suppressDefaultLog, IAlipayReturnPageNotifyApiResponse apiResponseLocalVar, string appKey, Option<ReturnPageNotifyRequest> returnPageNotifyRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="returnPageNotifyRequest"></param>
        private void OnErrorAlipayReturnPageNotifyDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<ReturnPageNotifyRequest> returnPageNotifyRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAlipayReturnPageNotify(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, returnPageNotifyRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="returnPageNotifyRequest"></param>
        partial void OnErrorAlipayReturnPageNotify(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<ReturnPageNotifyRequest> returnPageNotifyRequest);

        /// <summary>
        /// 支付成功回调通知 处理支付宝支付成功的同步通知。
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="returnPageNotifyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAlipayReturnPageNotifyApiResponse"/>&gt;</returns>
        public async Task<IAlipayReturnPageNotifyApiResponse> AlipayReturnPageNotifyOrDefaultAsync(string appKey, Option<ReturnPageNotifyRequest> returnPageNotifyRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AlipayReturnPageNotifyAsync(appKey, returnPageNotifyRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 支付成功回调通知 处理支付宝支付成功的同步通知。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="returnPageNotifyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAlipayReturnPageNotifyApiResponse"/>&gt;</returns>
        public async Task<IAlipayReturnPageNotifyApiResponse> AlipayReturnPageNotifyAsync(string appKey, Option<ReturnPageNotifyRequest> returnPageNotifyRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAlipayReturnPageNotify(appKey, returnPageNotifyRequest);

                FormatAlipayReturnPageNotify(ref appKey, returnPageNotifyRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Alipay/{appKey}/ReturnPageNotify";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    if (returnPageNotifyRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (returnPageNotifyRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(returnPageNotifyRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<AlipayReturnPageNotifyApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AlipayReturnPageNotifyApiResponse>();

                        AlipayReturnPageNotifyApiResponse apiResponseLocalVar = new AlipayReturnPageNotifyApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Alipay/{appKey}/ReturnPageNotify", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAlipayReturnPageNotifyDefaultImplementation(apiResponseLocalVar, appKey, returnPageNotifyRequest);

                        Events.ExecuteOnAlipayReturnPageNotify(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAlipayReturnPageNotifyDefaultImplementation(e, "/Alipay/{appKey}/ReturnPageNotify", uriBuilderLocalVar.Path, appKey, returnPageNotifyRequest);
                Events.ExecuteOnErrorAlipayReturnPageNotify(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AlipayReturnPageNotifyApiResponse"/>
        /// </summary>
        public partial class AlipayReturnPageNotifyApiResponse : ZSGF.Client.Client.ApiResponse, IAlipayReturnPageNotifyApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AlipayReturnPageNotifyApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AlipayReturnPageNotifyApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AlipayReturnPageNotifyApiResponse(ILogger<AlipayReturnPageNotifyApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.BooleanApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.BooleanApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.BooleanApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
