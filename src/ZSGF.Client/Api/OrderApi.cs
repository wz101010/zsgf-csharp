// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using ZSGF.Client.Client;
using ZSGF.Client.Model;

namespace ZSGF.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IOrderApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        OrderApiEvents Events { get; }

        /// <summary>
        /// 获取订单详情
        /// </summary>
        /// <remarks>
        /// 根据订单ID获取订单详情
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">订单ID</param>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOrderApiResponse"/>&gt;</returns>
        Task<IOrderApiResponse> OrderAsync(long id, string appKey, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取订单详情
        /// </summary>
        /// <remarks>
        /// 根据订单ID获取订单详情
        /// </remarks>
        /// <param name="id">订单ID</param>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOrderApiResponse"/>&gt;</returns>
        Task<IOrderApiResponse> OrderOrDefaultAsync(long id, string appKey, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 创建订单
        /// </summary>
        /// <remarks>
        /// 根据请求参数创建订单
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="createOrderRequest">订单创建请求 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOrderCreateApiResponse"/>&gt;</returns>
        Task<IOrderCreateApiResponse> OrderCreateAsync(string appKey, Option<CreateOrderRequest> createOrderRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 创建订单
        /// </summary>
        /// <remarks>
        /// 根据请求参数创建订单
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="createOrderRequest">订单创建请求 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOrderCreateApiResponse"/>&gt;</returns>
        Task<IOrderCreateApiResponse> OrderCreateOrDefaultAsync(string appKey, Option<CreateOrderRequest> createOrderRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取订单列表
        /// </summary>
        /// <remarks>
        /// 根据查询条件获取订单列表
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="status">订单状态 (optional)</param>
        /// <param name="orderNo">系统订单号 (optional)</param>
        /// <param name="tradeNo">支付平台单号 (optional)</param>
        /// <param name="userId">用户ID (optional)</param>
        /// <param name="pctType">商品类型 (optional)</param>
        /// <param name="pctId">商品ID (optional)</param>
        /// <param name="pctName">商品名称 (optional)</param>
        /// <param name="skip">跳过的条数 (optional)</param>
        /// <param name="take">拉取的条数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOrdersApiResponse"/>&gt;</returns>
        Task<IOrdersApiResponse> OrdersAsync(string appKey, Option<string> status = default, Option<string> orderNo = default, Option<string> tradeNo = default, Option<long> userId = default, Option<string> pctType = default, Option<string> pctId = default, Option<string> pctName = default, Option<int> skip = default, Option<int> take = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取订单列表
        /// </summary>
        /// <remarks>
        /// 根据查询条件获取订单列表
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="status">订单状态 (optional)</param>
        /// <param name="orderNo">系统订单号 (optional)</param>
        /// <param name="tradeNo">支付平台单号 (optional)</param>
        /// <param name="userId">用户ID (optional)</param>
        /// <param name="pctType">商品类型 (optional)</param>
        /// <param name="pctId">商品ID (optional)</param>
        /// <param name="pctName">商品名称 (optional)</param>
        /// <param name="skip">跳过的条数 (optional)</param>
        /// <param name="take">拉取的条数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOrdersApiResponse"/>&gt;</returns>
        Task<IOrdersApiResponse> OrdersOrDefaultAsync(string appKey, Option<string> status = default, Option<string> orderNo = default, Option<string> tradeNo = default, Option<long> userId = default, Option<string> pctType = default, Option<string> pctId = default, Option<string> pctName = default, Option<int> skip = default, Option<int> take = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IOrderApiResponse"/>
    /// </summary>
    public interface IOrderApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.OrderApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IOrderCreateApiResponse"/>
    /// </summary>
    public interface IOrderCreateApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.CreateOrderResultApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IOrdersApiResponse"/>
    /// </summary>
    public interface IOrdersApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.OrderListResultApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class OrderApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnOrder;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorOrder;

        internal void ExecuteOnOrder(OrderApi.OrderApiResponse apiResponse)
        {
            OnOrder?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorOrder(Exception exception)
        {
            OnErrorOrder?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnOrderCreate;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorOrderCreate;

        internal void ExecuteOnOrderCreate(OrderApi.OrderCreateApiResponse apiResponse)
        {
            OnOrderCreate?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorOrderCreate(Exception exception)
        {
            OnErrorOrderCreate?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnOrders;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorOrders;

        internal void ExecuteOnOrders(OrderApi.OrdersApiResponse apiResponse)
        {
            OnOrders?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorOrders(Exception exception)
        {
            OnErrorOrders?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class OrderApi : IOrderApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<OrderApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public OrderApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrderApi(ILogger<OrderApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, OrderApiEvents orderApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<OrderApi>();
            HttpClient = httpClient;
            Events = orderApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatOrder(ref long id, ref string appKey);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <returns></returns>
        private void ValidateOrder(string appKey)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        private void AfterOrderDefaultImplementation(IOrderApiResponse apiResponseLocalVar, long id, string appKey)
        {
            bool suppressDefaultLog = false;
            AfterOrder(ref suppressDefaultLog, apiResponseLocalVar, id, appKey);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        partial void AfterOrder(ref bool suppressDefaultLog, IOrderApiResponse apiResponseLocalVar, long id, string appKey);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        private void OnErrorOrderDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id, string appKey)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorOrder(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, appKey);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="appKey"></param>
        partial void OnErrorOrder(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id, string appKey);

        /// <summary>
        /// 获取订单详情 根据订单ID获取订单详情
        /// </summary>
        /// <param name="id">订单ID</param>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOrderApiResponse"/>&gt;</returns>
        public async Task<IOrderApiResponse> OrderOrDefaultAsync(long id, string appKey, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await OrderAsync(id, appKey, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取订单详情 根据订单ID获取订单详情
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">订单ID</param>
        /// <param name="appKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOrderApiResponse"/>&gt;</returns>
        public async Task<IOrderApiResponse> OrderAsync(long id, string appKey, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateOrder(appKey);

                FormatOrder(ref id, ref appKey);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Order/{appKey}/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<OrderApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<OrderApiResponse>();

                        OrderApiResponse apiResponseLocalVar = new OrderApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Order/{appKey}/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterOrderDefaultImplementation(apiResponseLocalVar, id, appKey);

                        Events.ExecuteOnOrder(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorOrderDefaultImplementation(e, "/Order/{appKey}/{id}", uriBuilderLocalVar.Path, id, appKey);
                Events.ExecuteOnErrorOrder(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="OrderApiResponse"/>
        /// </summary>
        public partial class OrderApiResponse : ZSGF.Client.Client.ApiResponse, IOrderApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<OrderApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="OrderApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public OrderApiResponse(ILogger<OrderApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.OrderApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.OrderApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.OrderApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatOrderCreate(ref string appKey, Option<CreateOrderRequest> createOrderRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="createOrderRequest"></param>
        /// <returns></returns>
        private void ValidateOrderCreate(string appKey, Option<CreateOrderRequest> createOrderRequest)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (createOrderRequest.IsSet && createOrderRequest.Value == null)
                throw new ArgumentNullException(nameof(createOrderRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="createOrderRequest"></param>
        private void AfterOrderCreateDefaultImplementation(IOrderCreateApiResponse apiResponseLocalVar, string appKey, Option<CreateOrderRequest> createOrderRequest)
        {
            bool suppressDefaultLog = false;
            AfterOrderCreate(ref suppressDefaultLog, apiResponseLocalVar, appKey, createOrderRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="createOrderRequest"></param>
        partial void AfterOrderCreate(ref bool suppressDefaultLog, IOrderCreateApiResponse apiResponseLocalVar, string appKey, Option<CreateOrderRequest> createOrderRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="createOrderRequest"></param>
        private void OnErrorOrderCreateDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<CreateOrderRequest> createOrderRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorOrderCreate(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, createOrderRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="createOrderRequest"></param>
        partial void OnErrorOrderCreate(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<CreateOrderRequest> createOrderRequest);

        /// <summary>
        /// 创建订单 根据请求参数创建订单
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="createOrderRequest">订单创建请求 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOrderCreateApiResponse"/>&gt;</returns>
        public async Task<IOrderCreateApiResponse> OrderCreateOrDefaultAsync(string appKey, Option<CreateOrderRequest> createOrderRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await OrderCreateAsync(appKey, createOrderRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 创建订单 根据请求参数创建订单
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="createOrderRequest">订单创建请求 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOrderCreateApiResponse"/>&gt;</returns>
        public async Task<IOrderCreateApiResponse> OrderCreateAsync(string appKey, Option<CreateOrderRequest> createOrderRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateOrderCreate(appKey, createOrderRequest);

                FormatOrderCreate(ref appKey, createOrderRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Order/{appKey}/Create";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    if (createOrderRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (createOrderRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createOrderRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<OrderCreateApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<OrderCreateApiResponse>();

                        OrderCreateApiResponse apiResponseLocalVar = new OrderCreateApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Order/{appKey}/Create", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterOrderCreateDefaultImplementation(apiResponseLocalVar, appKey, createOrderRequest);

                        Events.ExecuteOnOrderCreate(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorOrderCreateDefaultImplementation(e, "/Order/{appKey}/Create", uriBuilderLocalVar.Path, appKey, createOrderRequest);
                Events.ExecuteOnErrorOrderCreate(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="OrderCreateApiResponse"/>
        /// </summary>
        public partial class OrderCreateApiResponse : ZSGF.Client.Client.ApiResponse, IOrderCreateApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<OrderCreateApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="OrderCreateApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public OrderCreateApiResponse(ILogger<OrderCreateApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.CreateOrderResultApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.CreateOrderResultApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.CreateOrderResultApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatOrders(ref string appKey, ref Option<string> status, ref Option<string> orderNo, ref Option<string> tradeNo, ref Option<long> userId, ref Option<string> pctType, ref Option<string> pctId, ref Option<string> pctName, ref Option<int> skip, ref Option<int> take);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="status"></param>
        /// <param name="orderNo"></param>
        /// <param name="tradeNo"></param>
        /// <param name="pctType"></param>
        /// <param name="pctId"></param>
        /// <param name="pctName"></param>
        /// <returns></returns>
        private void ValidateOrders(string appKey, Option<string> status, Option<string> orderNo, Option<string> tradeNo, Option<string> pctType, Option<string> pctId, Option<string> pctName)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status));

            if (orderNo.IsSet && orderNo.Value == null)
                throw new ArgumentNullException(nameof(orderNo));

            if (tradeNo.IsSet && tradeNo.Value == null)
                throw new ArgumentNullException(nameof(tradeNo));

            if (pctType.IsSet && pctType.Value == null)
                throw new ArgumentNullException(nameof(pctType));

            if (pctId.IsSet && pctId.Value == null)
                throw new ArgumentNullException(nameof(pctId));

            if (pctName.IsSet && pctName.Value == null)
                throw new ArgumentNullException(nameof(pctName));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="status"></param>
        /// <param name="orderNo"></param>
        /// <param name="tradeNo"></param>
        /// <param name="userId"></param>
        /// <param name="pctType"></param>
        /// <param name="pctId"></param>
        /// <param name="pctName"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        private void AfterOrdersDefaultImplementation(IOrdersApiResponse apiResponseLocalVar, string appKey, Option<string> status, Option<string> orderNo, Option<string> tradeNo, Option<long> userId, Option<string> pctType, Option<string> pctId, Option<string> pctName, Option<int> skip, Option<int> take)
        {
            bool suppressDefaultLog = false;
            AfterOrders(ref suppressDefaultLog, apiResponseLocalVar, appKey, status, orderNo, tradeNo, userId, pctType, pctId, pctName, skip, take);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="status"></param>
        /// <param name="orderNo"></param>
        /// <param name="tradeNo"></param>
        /// <param name="userId"></param>
        /// <param name="pctType"></param>
        /// <param name="pctId"></param>
        /// <param name="pctName"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        partial void AfterOrders(ref bool suppressDefaultLog, IOrdersApiResponse apiResponseLocalVar, string appKey, Option<string> status, Option<string> orderNo, Option<string> tradeNo, Option<long> userId, Option<string> pctType, Option<string> pctId, Option<string> pctName, Option<int> skip, Option<int> take);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="status"></param>
        /// <param name="orderNo"></param>
        /// <param name="tradeNo"></param>
        /// <param name="userId"></param>
        /// <param name="pctType"></param>
        /// <param name="pctId"></param>
        /// <param name="pctName"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        private void OnErrorOrdersDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<string> status, Option<string> orderNo, Option<string> tradeNo, Option<long> userId, Option<string> pctType, Option<string> pctId, Option<string> pctName, Option<int> skip, Option<int> take)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorOrders(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, status, orderNo, tradeNo, userId, pctType, pctId, pctName, skip, take);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="status"></param>
        /// <param name="orderNo"></param>
        /// <param name="tradeNo"></param>
        /// <param name="userId"></param>
        /// <param name="pctType"></param>
        /// <param name="pctId"></param>
        /// <param name="pctName"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        partial void OnErrorOrders(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<string> status, Option<string> orderNo, Option<string> tradeNo, Option<long> userId, Option<string> pctType, Option<string> pctId, Option<string> pctName, Option<int> skip, Option<int> take);

        /// <summary>
        /// 获取订单列表 根据查询条件获取订单列表
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="status">订单状态 (optional)</param>
        /// <param name="orderNo">系统订单号 (optional)</param>
        /// <param name="tradeNo">支付平台单号 (optional)</param>
        /// <param name="userId">用户ID (optional)</param>
        /// <param name="pctType">商品类型 (optional)</param>
        /// <param name="pctId">商品ID (optional)</param>
        /// <param name="pctName">商品名称 (optional)</param>
        /// <param name="skip">跳过的条数 (optional)</param>
        /// <param name="take">拉取的条数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOrdersApiResponse"/>&gt;</returns>
        public async Task<IOrdersApiResponse> OrdersOrDefaultAsync(string appKey, Option<string> status = default, Option<string> orderNo = default, Option<string> tradeNo = default, Option<long> userId = default, Option<string> pctType = default, Option<string> pctId = default, Option<string> pctName = default, Option<int> skip = default, Option<int> take = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await OrdersAsync(appKey, status, orderNo, tradeNo, userId, pctType, pctId, pctName, skip, take, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取订单列表 根据查询条件获取订单列表
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="status">订单状态 (optional)</param>
        /// <param name="orderNo">系统订单号 (optional)</param>
        /// <param name="tradeNo">支付平台单号 (optional)</param>
        /// <param name="userId">用户ID (optional)</param>
        /// <param name="pctType">商品类型 (optional)</param>
        /// <param name="pctId">商品ID (optional)</param>
        /// <param name="pctName">商品名称 (optional)</param>
        /// <param name="skip">跳过的条数 (optional)</param>
        /// <param name="take">拉取的条数 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOrdersApiResponse"/>&gt;</returns>
        public async Task<IOrdersApiResponse> OrdersAsync(string appKey, Option<string> status = default, Option<string> orderNo = default, Option<string> tradeNo = default, Option<long> userId = default, Option<string> pctType = default, Option<string> pctId = default, Option<string> pctName = default, Option<int> skip = default, Option<int> take = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateOrders(appKey, status, orderNo, tradeNo, pctType, pctId, pctName);

                FormatOrders(ref appKey, ref status, ref orderNo, ref tradeNo, ref userId, ref pctType, ref pctId, ref pctName, ref skip, ref take);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Order/{appKey}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (status.IsSet)
                        parseQueryStringLocalVar["status"] = ClientUtils.ParameterToString(status.Value);

                    if (orderNo.IsSet)
                        parseQueryStringLocalVar["orderNo"] = ClientUtils.ParameterToString(orderNo.Value);

                    if (tradeNo.IsSet)
                        parseQueryStringLocalVar["tradeNo"] = ClientUtils.ParameterToString(tradeNo.Value);

                    if (userId.IsSet)
                        parseQueryStringLocalVar["userId"] = ClientUtils.ParameterToString(userId.Value);

                    if (pctType.IsSet)
                        parseQueryStringLocalVar["pctType"] = ClientUtils.ParameterToString(pctType.Value);

                    if (pctId.IsSet)
                        parseQueryStringLocalVar["pctId"] = ClientUtils.ParameterToString(pctId.Value);

                    if (pctName.IsSet)
                        parseQueryStringLocalVar["pctName"] = ClientUtils.ParameterToString(pctName.Value);

                    if (skip.IsSet)
                        parseQueryStringLocalVar["skip"] = ClientUtils.ParameterToString(skip.Value);

                    if (take.IsSet)
                        parseQueryStringLocalVar["take"] = ClientUtils.ParameterToString(take.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<OrdersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<OrdersApiResponse>();

                        OrdersApiResponse apiResponseLocalVar = new OrdersApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Order/{appKey}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterOrdersDefaultImplementation(apiResponseLocalVar, appKey, status, orderNo, tradeNo, userId, pctType, pctId, pctName, skip, take);

                        Events.ExecuteOnOrders(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorOrdersDefaultImplementation(e, "/Order/{appKey}", uriBuilderLocalVar.Path, appKey, status, orderNo, tradeNo, userId, pctType, pctId, pctName, skip, take);
                Events.ExecuteOnErrorOrders(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="OrdersApiResponse"/>
        /// </summary>
        public partial class OrdersApiResponse : ZSGF.Client.Client.ApiResponse, IOrdersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<OrdersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="OrdersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public OrdersApiResponse(ILogger<OrdersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.OrderListResultApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.OrderListResultApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.OrderListResultApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
