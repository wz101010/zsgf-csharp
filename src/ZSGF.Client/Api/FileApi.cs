// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using ZSGF.Client.Client;
using ZSGF.Client.Model;

namespace ZSGF.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IFileApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        FileApiEvents Events { get; }

        /// <summary>
        /// 创建文件夹
        /// </summary>
        /// <remarks>
        /// 在指定路径创建文件夹
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="path">文件夹路径 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFileCreateFolderApiResponse"/>&gt;</returns>
        Task<IFileCreateFolderApiResponse> FileCreateFolderAsync(string appKey, Option<string> path = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 创建文件夹
        /// </summary>
        /// <remarks>
        /// 在指定路径创建文件夹
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="path">文件夹路径 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFileCreateFolderApiResponse"/>&gt;</returns>
        Task<IFileCreateFolderApiResponse> FileCreateFolderOrDefaultAsync(string appKey, Option<string> path = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 删除文件 / 文件夹
        /// </summary>
        /// <remarks>
        /// 根据指定路径删除文件或文件夹
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="path">文件 / 文件夹路径 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFileDeleteApiResponse"/>&gt;</returns>
        Task<IFileDeleteApiResponse> FileDeleteAsync(string appKey, Option<string> path = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 删除文件 / 文件夹
        /// </summary>
        /// <remarks>
        /// 根据指定路径删除文件或文件夹
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="path">文件 / 文件夹路径 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFileDeleteApiResponse"/>&gt;</returns>
        Task<IFileDeleteApiResponse> FileDeleteOrDefaultAsync(string appKey, Option<string> path = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 重命名文件 / 文件夹
        /// </summary>
        /// <remarks>
        /// 将指定的文件或文件夹重命名
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="sourceName">原文件 / 文件夹名称 (optional)</param>
        /// <param name="destName">新文件 / 文件夹名称 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFileRenameApiResponse"/>&gt;</returns>
        Task<IFileRenameApiResponse> FileRenameAsync(string appKey, Option<string> sourceName = default, Option<string> destName = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 重命名文件 / 文件夹
        /// </summary>
        /// <remarks>
        /// 将指定的文件或文件夹重命名
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="sourceName">原文件 / 文件夹名称 (optional)</param>
        /// <param name="destName">新文件 / 文件夹名称 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFileRenameApiResponse"/>&gt;</returns>
        Task<IFileRenameApiResponse> FileRenameOrDefaultAsync(string appKey, Option<string> sourceName = default, Option<string> destName = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 上传文件
        /// </summary>
        /// <remarks>
        /// 将文件上传到指定路径
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="path">文件夹路径 (optional)</param>
        /// <param name="file">上传的文件 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFileUploadApiResponse"/>&gt;</returns>
        Task<IFileUploadApiResponse> FileUploadAsync(string appKey, Option<string> path = default, Option<System.IO.Stream> file = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 上传文件
        /// </summary>
        /// <remarks>
        /// 将文件上传到指定路径
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="path">文件夹路径 (optional)</param>
        /// <param name="file">上传的文件 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFileUploadApiResponse"/>&gt;</returns>
        Task<IFileUploadApiResponse> FileUploadOrDefaultAsync(string appKey, Option<string> path = default, Option<System.IO.Stream> file = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取文件列表
        /// </summary>
        /// <remarks>
        /// 根据指定路径获取文件和文件夹列表
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="path">文件路径 (optional)</param>
        /// <param name="skip">跳过的记录数 (optional, default to 0)</param>
        /// <param name="take">获取的记录数 (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFilesApiResponse"/>&gt;</returns>
        Task<IFilesApiResponse> FilesAsync(string appKey, Option<string> path = default, Option<int> skip = default, Option<int> take = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取文件列表
        /// </summary>
        /// <remarks>
        /// 根据指定路径获取文件和文件夹列表
        /// </remarks>
        /// <param name="appKey"></param>
        /// <param name="path">文件路径 (optional)</param>
        /// <param name="skip">跳过的记录数 (optional, default to 0)</param>
        /// <param name="take">获取的记录数 (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFilesApiResponse"/>&gt;</returns>
        Task<IFilesApiResponse> FilesOrDefaultAsync(string appKey, Option<string> path = default, Option<int> skip = default, Option<int> take = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IFileCreateFolderApiResponse"/>
    /// </summary>
    public interface IFileCreateFolderApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.BooleanApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IFileDeleteApiResponse"/>
    /// </summary>
    public interface IFileDeleteApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.BooleanApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IFileRenameApiResponse"/>
    /// </summary>
    public interface IFileRenameApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.BooleanApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IFileUploadApiResponse"/>
    /// </summary>
    public interface IFileUploadApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.StringApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IFilesApiResponse"/>
    /// </summary>
    public interface IFilesApiResponse : ZSGF.Client.Client.IApiResponse, IOk<ZSGF.Client.Model.FileListResultApiResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class FileApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnFileCreateFolder;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorFileCreateFolder;

        internal void ExecuteOnFileCreateFolder(FileApi.FileCreateFolderApiResponse apiResponse)
        {
            OnFileCreateFolder?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorFileCreateFolder(Exception exception)
        {
            OnErrorFileCreateFolder?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnFileDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorFileDelete;

        internal void ExecuteOnFileDelete(FileApi.FileDeleteApiResponse apiResponse)
        {
            OnFileDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorFileDelete(Exception exception)
        {
            OnErrorFileDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnFileRename;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorFileRename;

        internal void ExecuteOnFileRename(FileApi.FileRenameApiResponse apiResponse)
        {
            OnFileRename?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorFileRename(Exception exception)
        {
            OnErrorFileRename?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnFileUpload;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorFileUpload;

        internal void ExecuteOnFileUpload(FileApi.FileUploadApiResponse apiResponse)
        {
            OnFileUpload?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorFileUpload(Exception exception)
        {
            OnErrorFileUpload?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnFiles;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorFiles;

        internal void ExecuteOnFiles(FileApi.FilesApiResponse apiResponse)
        {
            OnFiles?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorFiles(Exception exception)
        {
            OnErrorFiles?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class FileApi : IFileApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<FileApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public FileApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="FileApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FileApi(ILogger<FileApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, FileApiEvents fileApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<FileApi>();
            HttpClient = httpClient;
            Events = fileApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatFileCreateFolder(ref string appKey, ref Option<string> path);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="path"></param>
        /// <returns></returns>
        private void ValidateFileCreateFolder(string appKey, Option<string> path)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (path.IsSet && path.Value == null)
                throw new ArgumentNullException(nameof(path));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="path"></param>
        private void AfterFileCreateFolderDefaultImplementation(IFileCreateFolderApiResponse apiResponseLocalVar, string appKey, Option<string> path)
        {
            bool suppressDefaultLog = false;
            AfterFileCreateFolder(ref suppressDefaultLog, apiResponseLocalVar, appKey, path);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="path"></param>
        partial void AfterFileCreateFolder(ref bool suppressDefaultLog, IFileCreateFolderApiResponse apiResponseLocalVar, string appKey, Option<string> path);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="path"></param>
        private void OnErrorFileCreateFolderDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<string> path)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorFileCreateFolder(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, path);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="path"></param>
        partial void OnErrorFileCreateFolder(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<string> path);

        /// <summary>
        /// 创建文件夹 在指定路径创建文件夹
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="path">文件夹路径 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFileCreateFolderApiResponse"/>&gt;</returns>
        public async Task<IFileCreateFolderApiResponse> FileCreateFolderOrDefaultAsync(string appKey, Option<string> path = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await FileCreateFolderAsync(appKey, path, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 创建文件夹 在指定路径创建文件夹
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="path">文件夹路径 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFileCreateFolderApiResponse"/>&gt;</returns>
        public async Task<IFileCreateFolderApiResponse> FileCreateFolderAsync(string appKey, Option<string> path = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateFileCreateFolder(appKey, path);

                FormatFileCreateFolder(ref appKey, ref path);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/File/{appKey}/CreateFolder";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (path.IsSet)
                        parseQueryStringLocalVar["path"] = ClientUtils.ParameterToString(path.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<FileCreateFolderApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<FileCreateFolderApiResponse>();

                        FileCreateFolderApiResponse apiResponseLocalVar = new FileCreateFolderApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/File/{appKey}/CreateFolder", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterFileCreateFolderDefaultImplementation(apiResponseLocalVar, appKey, path);

                        Events.ExecuteOnFileCreateFolder(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorFileCreateFolderDefaultImplementation(e, "/File/{appKey}/CreateFolder", uriBuilderLocalVar.Path, appKey, path);
                Events.ExecuteOnErrorFileCreateFolder(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="FileCreateFolderApiResponse"/>
        /// </summary>
        public partial class FileCreateFolderApiResponse : ZSGF.Client.Client.ApiResponse, IFileCreateFolderApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<FileCreateFolderApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="FileCreateFolderApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public FileCreateFolderApiResponse(ILogger<FileCreateFolderApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.BooleanApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.BooleanApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.BooleanApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatFileDelete(ref string appKey, ref Option<string> path);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="path"></param>
        /// <returns></returns>
        private void ValidateFileDelete(string appKey, Option<string> path)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (path.IsSet && path.Value == null)
                throw new ArgumentNullException(nameof(path));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="path"></param>
        private void AfterFileDeleteDefaultImplementation(IFileDeleteApiResponse apiResponseLocalVar, string appKey, Option<string> path)
        {
            bool suppressDefaultLog = false;
            AfterFileDelete(ref suppressDefaultLog, apiResponseLocalVar, appKey, path);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="path"></param>
        partial void AfterFileDelete(ref bool suppressDefaultLog, IFileDeleteApiResponse apiResponseLocalVar, string appKey, Option<string> path);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="path"></param>
        private void OnErrorFileDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<string> path)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorFileDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, path);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="path"></param>
        partial void OnErrorFileDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<string> path);

        /// <summary>
        /// 删除文件 / 文件夹 根据指定路径删除文件或文件夹
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="path">文件 / 文件夹路径 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFileDeleteApiResponse"/>&gt;</returns>
        public async Task<IFileDeleteApiResponse> FileDeleteOrDefaultAsync(string appKey, Option<string> path = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await FileDeleteAsync(appKey, path, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 删除文件 / 文件夹 根据指定路径删除文件或文件夹
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="path">文件 / 文件夹路径 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFileDeleteApiResponse"/>&gt;</returns>
        public async Task<IFileDeleteApiResponse> FileDeleteAsync(string appKey, Option<string> path = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateFileDelete(appKey, path);

                FormatFileDelete(ref appKey, ref path);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/File/{appKey}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (path.IsSet)
                        parseQueryStringLocalVar["path"] = ClientUtils.ParameterToString(path.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<FileDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<FileDeleteApiResponse>();

                        FileDeleteApiResponse apiResponseLocalVar = new FileDeleteApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/File/{appKey}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterFileDeleteDefaultImplementation(apiResponseLocalVar, appKey, path);

                        Events.ExecuteOnFileDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorFileDeleteDefaultImplementation(e, "/File/{appKey}", uriBuilderLocalVar.Path, appKey, path);
                Events.ExecuteOnErrorFileDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="FileDeleteApiResponse"/>
        /// </summary>
        public partial class FileDeleteApiResponse : ZSGF.Client.Client.ApiResponse, IFileDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<FileDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="FileDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public FileDeleteApiResponse(ILogger<FileDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.BooleanApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.BooleanApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.BooleanApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatFileRename(ref string appKey, ref Option<string> sourceName, ref Option<string> destName);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="sourceName"></param>
        /// <param name="destName"></param>
        /// <returns></returns>
        private void ValidateFileRename(string appKey, Option<string> sourceName, Option<string> destName)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (sourceName.IsSet && sourceName.Value == null)
                throw new ArgumentNullException(nameof(sourceName));

            if (destName.IsSet && destName.Value == null)
                throw new ArgumentNullException(nameof(destName));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="sourceName"></param>
        /// <param name="destName"></param>
        private void AfterFileRenameDefaultImplementation(IFileRenameApiResponse apiResponseLocalVar, string appKey, Option<string> sourceName, Option<string> destName)
        {
            bool suppressDefaultLog = false;
            AfterFileRename(ref suppressDefaultLog, apiResponseLocalVar, appKey, sourceName, destName);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="sourceName"></param>
        /// <param name="destName"></param>
        partial void AfterFileRename(ref bool suppressDefaultLog, IFileRenameApiResponse apiResponseLocalVar, string appKey, Option<string> sourceName, Option<string> destName);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="sourceName"></param>
        /// <param name="destName"></param>
        private void OnErrorFileRenameDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<string> sourceName, Option<string> destName)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorFileRename(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, sourceName, destName);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="sourceName"></param>
        /// <param name="destName"></param>
        partial void OnErrorFileRename(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<string> sourceName, Option<string> destName);

        /// <summary>
        /// 重命名文件 / 文件夹 将指定的文件或文件夹重命名
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="sourceName">原文件 / 文件夹名称 (optional)</param>
        /// <param name="destName">新文件 / 文件夹名称 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFileRenameApiResponse"/>&gt;</returns>
        public async Task<IFileRenameApiResponse> FileRenameOrDefaultAsync(string appKey, Option<string> sourceName = default, Option<string> destName = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await FileRenameAsync(appKey, sourceName, destName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 重命名文件 / 文件夹 将指定的文件或文件夹重命名
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="sourceName">原文件 / 文件夹名称 (optional)</param>
        /// <param name="destName">新文件 / 文件夹名称 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFileRenameApiResponse"/>&gt;</returns>
        public async Task<IFileRenameApiResponse> FileRenameAsync(string appKey, Option<string> sourceName = default, Option<string> destName = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateFileRename(appKey, sourceName, destName);

                FormatFileRename(ref appKey, ref sourceName, ref destName);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/File/{appKey}/Rename";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (sourceName.IsSet)
                        parseQueryStringLocalVar["sourceName"] = ClientUtils.ParameterToString(sourceName.Value);

                    if (destName.IsSet)
                        parseQueryStringLocalVar["destName"] = ClientUtils.ParameterToString(destName.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<FileRenameApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<FileRenameApiResponse>();

                        FileRenameApiResponse apiResponseLocalVar = new FileRenameApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/File/{appKey}/Rename", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterFileRenameDefaultImplementation(apiResponseLocalVar, appKey, sourceName, destName);

                        Events.ExecuteOnFileRename(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorFileRenameDefaultImplementation(e, "/File/{appKey}/Rename", uriBuilderLocalVar.Path, appKey, sourceName, destName);
                Events.ExecuteOnErrorFileRename(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="FileRenameApiResponse"/>
        /// </summary>
        public partial class FileRenameApiResponse : ZSGF.Client.Client.ApiResponse, IFileRenameApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<FileRenameApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="FileRenameApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public FileRenameApiResponse(ILogger<FileRenameApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.BooleanApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.BooleanApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.BooleanApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatFileUpload(ref string appKey, ref Option<string> path, ref Option<System.IO.Stream> file);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="path"></param>
        /// <param name="file"></param>
        /// <returns></returns>
        private void ValidateFileUpload(string appKey, Option<string> path, Option<System.IO.Stream> file)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (path.IsSet && path.Value == null)
                throw new ArgumentNullException(nameof(path));

            if (file.IsSet && file.Value == null)
                throw new ArgumentNullException(nameof(file));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="path"></param>
        /// <param name="file"></param>
        private void AfterFileUploadDefaultImplementation(IFileUploadApiResponse apiResponseLocalVar, string appKey, Option<string> path, Option<System.IO.Stream> file)
        {
            bool suppressDefaultLog = false;
            AfterFileUpload(ref suppressDefaultLog, apiResponseLocalVar, appKey, path, file);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="path"></param>
        /// <param name="file"></param>
        partial void AfterFileUpload(ref bool suppressDefaultLog, IFileUploadApiResponse apiResponseLocalVar, string appKey, Option<string> path, Option<System.IO.Stream> file);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="path"></param>
        /// <param name="file"></param>
        private void OnErrorFileUploadDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<string> path, Option<System.IO.Stream> file)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorFileUpload(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, path, file);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="path"></param>
        /// <param name="file"></param>
        partial void OnErrorFileUpload(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<string> path, Option<System.IO.Stream> file);

        /// <summary>
        /// 上传文件 将文件上传到指定路径
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="path">文件夹路径 (optional)</param>
        /// <param name="file">上传的文件 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFileUploadApiResponse"/>&gt;</returns>
        public async Task<IFileUploadApiResponse> FileUploadOrDefaultAsync(string appKey, Option<string> path = default, Option<System.IO.Stream> file = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await FileUploadAsync(appKey, path, file, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 上传文件 将文件上传到指定路径
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="path">文件夹路径 (optional)</param>
        /// <param name="file">上传的文件 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFileUploadApiResponse"/>&gt;</returns>
        public async Task<IFileUploadApiResponse> FileUploadAsync(string appKey, Option<string> path = default, Option<System.IO.Stream> file = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateFileUpload(appKey, path, file);

                FormatFileUpload(ref appKey, ref path, ref file);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/File/{appKey}/Upload";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (path.IsSet)
                        parseQueryStringLocalVar["path"] = ClientUtils.ParameterToString(path.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string, string>> formParameterLocalVars = new List<KeyValuePair<string, string>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));                    if (file.IsSet)
                        multipartContentLocalVar.Add(new StreamContent(file.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "multipart/form-data"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<FileUploadApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<FileUploadApiResponse>();

                        FileUploadApiResponse apiResponseLocalVar = new FileUploadApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/File/{appKey}/Upload", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterFileUploadDefaultImplementation(apiResponseLocalVar, appKey, path, file);

                        Events.ExecuteOnFileUpload(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorFileUploadDefaultImplementation(e, "/File/{appKey}/Upload", uriBuilderLocalVar.Path, appKey, path, file);
                Events.ExecuteOnErrorFileUpload(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="FileUploadApiResponse"/>
        /// </summary>
        public partial class FileUploadApiResponse : ZSGF.Client.Client.ApiResponse, IFileUploadApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<FileUploadApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="FileUploadApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public FileUploadApiResponse(ILogger<FileUploadApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.StringApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.StringApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.StringApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatFiles(ref string appKey, ref Option<string> path, ref Option<int> skip, ref Option<int> take);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="path"></param>
        /// <returns></returns>
        private void ValidateFiles(string appKey, Option<string> path)
        {
            if (appKey == null)
                throw new ArgumentNullException(nameof(appKey));

            if (path.IsSet && path.Value == null)
                throw new ArgumentNullException(nameof(path));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="path"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        private void AfterFilesDefaultImplementation(IFilesApiResponse apiResponseLocalVar, string appKey, Option<string> path, Option<int> skip, Option<int> take)
        {
            bool suppressDefaultLog = false;
            AfterFiles(ref suppressDefaultLog, apiResponseLocalVar, appKey, path, skip, take);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="path"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        partial void AfterFiles(ref bool suppressDefaultLog, IFilesApiResponse apiResponseLocalVar, string appKey, Option<string> path, Option<int> skip, Option<int> take);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="path"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        private void OnErrorFilesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<string> path, Option<int> skip, Option<int> take)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorFiles(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, appKey, path, skip, take);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="appKey"></param>
        /// <param name="path"></param>
        /// <param name="skip"></param>
        /// <param name="take"></param>
        partial void OnErrorFiles(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string appKey, Option<string> path, Option<int> skip, Option<int> take);

        /// <summary>
        /// 获取文件列表 根据指定路径获取文件和文件夹列表
        /// </summary>
        /// <param name="appKey"></param>
        /// <param name="path">文件路径 (optional)</param>
        /// <param name="skip">跳过的记录数 (optional, default to 0)</param>
        /// <param name="take">获取的记录数 (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFilesApiResponse"/>&gt;</returns>
        public async Task<IFilesApiResponse> FilesOrDefaultAsync(string appKey, Option<string> path = default, Option<int> skip = default, Option<int> take = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await FilesAsync(appKey, path, skip, take, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 获取文件列表 根据指定路径获取文件和文件夹列表
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appKey"></param>
        /// <param name="path">文件路径 (optional)</param>
        /// <param name="skip">跳过的记录数 (optional, default to 0)</param>
        /// <param name="take">获取的记录数 (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFilesApiResponse"/>&gt;</returns>
        public async Task<IFilesApiResponse> FilesAsync(string appKey, Option<string> path = default, Option<int> skip = default, Option<int> take = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateFiles(appKey, path);

                FormatFiles(ref appKey, ref path, ref skip, ref take);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/File/{appKey}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BappKey%7D", Uri.EscapeDataString(appKey.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (path.IsSet)
                        parseQueryStringLocalVar["path"] = ClientUtils.ParameterToString(path.Value);

                    if (skip.IsSet)
                        parseQueryStringLocalVar["skip"] = ClientUtils.ParameterToString(skip.Value);

                    if (take.IsSet)
                        parseQueryStringLocalVar["take"] = ClientUtils.ParameterToString(take.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<FilesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<FilesApiResponse>();

                        FilesApiResponse apiResponseLocalVar = new FilesApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/File/{appKey}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterFilesDefaultImplementation(apiResponseLocalVar, appKey, path, skip, take);

                        Events.ExecuteOnFiles(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorFilesDefaultImplementation(e, "/File/{appKey}", uriBuilderLocalVar.Path, appKey, path, skip, take);
                Events.ExecuteOnErrorFiles(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="FilesApiResponse"/>
        /// </summary>
        public partial class FilesApiResponse : ZSGF.Client.Client.ApiResponse, IFilesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<FilesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="FilesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public FilesApiResponse(ILogger<FilesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public ZSGF.Client.Model.FileListResultApiResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<ZSGF.Client.Model.FileListResultApiResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out ZSGF.Client.Model.FileListResultApiResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
