// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using ZSGF.Client.Client;

namespace ZSGF.Client.Model
{
    /// <summary>
    /// ChargeInfo
    /// </summary>
    public partial class ChargeInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChargeInfo" /> class.
        /// </summary>
        /// <param name="chargeFee">chargeFee</param>
        /// <param name="chargeType">chargeType</param>
        /// <param name="isRatingOnSwitch">isRatingOnSwitch</param>
        /// <param name="isRatingOnTradeReceiver">isRatingOnTradeReceiver</param>
        /// <param name="originalChargeFee">originalChargeFee</param>
        /// <param name="subFeeDetailList">subFeeDetailList</param>
        /// <param name="switchFeeRate">switchFeeRate</param>
        [JsonConstructor]
        public ChargeInfo(Option<string> chargeFee = default, Option<string> chargeType = default, Option<string> isRatingOnSwitch = default, Option<string> isRatingOnTradeReceiver = default, Option<string> originalChargeFee = default, Option<List<SubFee>> subFeeDetailList = default, Option<string> switchFeeRate = default)
        {
            ChargeFeeOption = chargeFee;
            ChargeTypeOption = chargeType;
            IsRatingOnSwitchOption = isRatingOnSwitch;
            IsRatingOnTradeReceiverOption = isRatingOnTradeReceiver;
            OriginalChargeFeeOption = originalChargeFee;
            SubFeeDetailListOption = subFeeDetailList;
            SwitchFeeRateOption = switchFeeRate;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ChargeFee
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ChargeFeeOption { get; private set; }

        /// <summary>
        /// Gets or Sets ChargeFee
        /// </summary>
        [JsonPropertyName("chargeFee")]
        public string ChargeFee { get { return this.ChargeFeeOption; } set { this.ChargeFeeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ChargeType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ChargeTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets ChargeType
        /// </summary>
        [JsonPropertyName("chargeType")]
        public string ChargeType { get { return this.ChargeTypeOption; } set { this.ChargeTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of IsRatingOnSwitch
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> IsRatingOnSwitchOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsRatingOnSwitch
        /// </summary>
        [JsonPropertyName("isRatingOnSwitch")]
        public string IsRatingOnSwitch { get { return this.IsRatingOnSwitchOption; } set { this.IsRatingOnSwitchOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of IsRatingOnTradeReceiver
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> IsRatingOnTradeReceiverOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsRatingOnTradeReceiver
        /// </summary>
        [JsonPropertyName("isRatingOnTradeReceiver")]
        public string IsRatingOnTradeReceiver { get { return this.IsRatingOnTradeReceiverOption; } set { this.IsRatingOnTradeReceiverOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OriginalChargeFee
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OriginalChargeFeeOption { get; private set; }

        /// <summary>
        /// Gets or Sets OriginalChargeFee
        /// </summary>
        [JsonPropertyName("originalChargeFee")]
        public string OriginalChargeFee { get { return this.OriginalChargeFeeOption; } set { this.OriginalChargeFeeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SubFeeDetailList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<SubFee>> SubFeeDetailListOption { get; private set; }

        /// <summary>
        /// Gets or Sets SubFeeDetailList
        /// </summary>
        [JsonPropertyName("subFeeDetailList")]
        public List<SubFee> SubFeeDetailList { get { return this.SubFeeDetailListOption; } set { this.SubFeeDetailListOption = new Option<List<SubFee>>(value); } }

        /// <summary>
        /// Used to track the state of SwitchFeeRate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SwitchFeeRateOption { get; private set; }

        /// <summary>
        /// Gets or Sets SwitchFeeRate
        /// </summary>
        [JsonPropertyName("switchFeeRate")]
        public string SwitchFeeRate { get { return this.SwitchFeeRateOption; } set { this.SwitchFeeRateOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChargeInfo {\n");
            sb.Append("  ChargeFee: ").Append(ChargeFee).Append("\n");
            sb.Append("  ChargeType: ").Append(ChargeType).Append("\n");
            sb.Append("  IsRatingOnSwitch: ").Append(IsRatingOnSwitch).Append("\n");
            sb.Append("  IsRatingOnTradeReceiver: ").Append(IsRatingOnTradeReceiver).Append("\n");
            sb.Append("  OriginalChargeFee: ").Append(OriginalChargeFee).Append("\n");
            sb.Append("  SubFeeDetailList: ").Append(SubFeeDetailList).Append("\n");
            sb.Append("  SwitchFeeRate: ").Append(SwitchFeeRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ChargeInfo" />
    /// </summary>
    public class ChargeInfoJsonConverter : JsonConverter<ChargeInfo>
    {
        /// <summary>
        /// Deserializes json to <see cref="ChargeInfo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ChargeInfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> chargeFee = default;
            Option<string> chargeType = default;
            Option<string> isRatingOnSwitch = default;
            Option<string> isRatingOnTradeReceiver = default;
            Option<string> originalChargeFee = default;
            Option<List<SubFee>> subFeeDetailList = default;
            Option<string> switchFeeRate = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "chargeFee":
                            chargeFee = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "chargeType":
                            chargeType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "isRatingOnSwitch":
                            isRatingOnSwitch = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "isRatingOnTradeReceiver":
                            isRatingOnTradeReceiver = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "originalChargeFee":
                            originalChargeFee = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "subFeeDetailList":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                subFeeDetailList = new Option<List<SubFee>>(JsonSerializer.Deserialize<List<SubFee>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "switchFeeRate":
                            switchFeeRate = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new ChargeInfo(chargeFee, chargeType, isRatingOnSwitch, isRatingOnTradeReceiver, originalChargeFee, subFeeDetailList, switchFeeRate);
        }

        /// <summary>
        /// Serializes a <see cref="ChargeInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="chargeInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ChargeInfo chargeInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, chargeInfo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ChargeInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="chargeInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ChargeInfo chargeInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (chargeInfo.ChargeFeeOption.IsSet)
                if (chargeInfo.ChargeFeeOption.Value != null)
                    writer.WriteString("chargeFee", chargeInfo.ChargeFee);
                else
                    writer.WriteNull("chargeFee");

            if (chargeInfo.ChargeTypeOption.IsSet)
                if (chargeInfo.ChargeTypeOption.Value != null)
                    writer.WriteString("chargeType", chargeInfo.ChargeType);
                else
                    writer.WriteNull("chargeType");

            if (chargeInfo.IsRatingOnSwitchOption.IsSet)
                if (chargeInfo.IsRatingOnSwitchOption.Value != null)
                    writer.WriteString("isRatingOnSwitch", chargeInfo.IsRatingOnSwitch);
                else
                    writer.WriteNull("isRatingOnSwitch");

            if (chargeInfo.IsRatingOnTradeReceiverOption.IsSet)
                if (chargeInfo.IsRatingOnTradeReceiverOption.Value != null)
                    writer.WriteString("isRatingOnTradeReceiver", chargeInfo.IsRatingOnTradeReceiver);
                else
                    writer.WriteNull("isRatingOnTradeReceiver");

            if (chargeInfo.OriginalChargeFeeOption.IsSet)
                if (chargeInfo.OriginalChargeFeeOption.Value != null)
                    writer.WriteString("originalChargeFee", chargeInfo.OriginalChargeFee);
                else
                    writer.WriteNull("originalChargeFee");

            if (chargeInfo.SubFeeDetailListOption.IsSet)
                if (chargeInfo.SubFeeDetailListOption.Value != null)
                {
                    writer.WritePropertyName("subFeeDetailList");
                    JsonSerializer.Serialize(writer, chargeInfo.SubFeeDetailList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("subFeeDetailList");
            if (chargeInfo.SwitchFeeRateOption.IsSet)
                if (chargeInfo.SwitchFeeRateOption.Value != null)
                    writer.WriteString("switchFeeRate", chargeInfo.SwitchFeeRate);
                else
                    writer.WriteNull("switchFeeRate");
        }
    }
}
