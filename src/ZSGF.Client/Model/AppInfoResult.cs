// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using ZSGF.Client.Client;

namespace ZSGF.Client.Model
{
    /// <summary>
    /// AppInfoResult
    /// </summary>
    public partial class AppInfoResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppInfoResult" /> class.
        /// </summary>
        /// <param name="info">info</param>
        /// <param name="props">props</param>
        [JsonConstructor]
        public AppInfoResult(Option<AppInfoItem> info = default, Option<List<AppProperty>> props = default)
        {
            InfoOption = info;
            PropsOption = props;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Info
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AppInfoItem> InfoOption { get; private set; }

        /// <summary>
        /// Gets or Sets Info
        /// </summary>
        [JsonPropertyName("info")]
        public AppInfoItem Info { get { return this.InfoOption; } set { this.InfoOption = new Option<AppInfoItem>(value); } }

        /// <summary>
        /// Used to track the state of Props
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<AppProperty>> PropsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Props
        /// </summary>
        [JsonPropertyName("props")]
        public List<AppProperty> Props { get { return this.PropsOption; } set { this.PropsOption = new Option<List<AppProperty>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AppInfoResult {\n");
            sb.Append("  Info: ").Append(Info).Append("\n");
            sb.Append("  Props: ").Append(Props).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AppInfoResult" />
    /// </summary>
    public class AppInfoResultJsonConverter : JsonConverter<AppInfoResult>
    {
        /// <summary>
        /// Deserializes json to <see cref="AppInfoResult" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AppInfoResult Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<AppInfoItem> info = default;
            Option<List<AppProperty>> props = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "info":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                info = new Option<AppInfoItem>(JsonSerializer.Deserialize<AppInfoItem>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "props":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                props = new Option<List<AppProperty>>(JsonSerializer.Deserialize<List<AppProperty>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (info.IsSet && info.Value == null)
                throw new ArgumentNullException(nameof(info), "Property is not nullable for class AppInfoResult.");

            return new AppInfoResult(info, props);
        }

        /// <summary>
        /// Serializes a <see cref="AppInfoResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="appInfoResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AppInfoResult appInfoResult, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, appInfoResult, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AppInfoResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="appInfoResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AppInfoResult appInfoResult, JsonSerializerOptions jsonSerializerOptions)
        {
            if (appInfoResult.InfoOption.IsSet && appInfoResult.Info == null)
                throw new ArgumentNullException(nameof(appInfoResult.Info), "Property is required for class AppInfoResult.");

            if (appInfoResult.InfoOption.IsSet)
            {
                writer.WritePropertyName("info");
                JsonSerializer.Serialize(writer, appInfoResult.Info, jsonSerializerOptions);
            }
            if (appInfoResult.PropsOption.IsSet)
                if (appInfoResult.PropsOption.Value != null)
                {
                    writer.WritePropertyName("props");
                    JsonSerializer.Serialize(writer, appInfoResult.Props, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("props");
        }
    }
}
