// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using ZSGF.Client.Client;

namespace ZSGF.Client.Model
{
    /// <summary>
    /// AuthorizeResult
    /// </summary>
    public partial class AuthorizeResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizeResult" /> class.
        /// </summary>
        /// <param name="code">code</param>
        /// <param name="error">error</param>
        /// <param name="accessToken">accessToken</param>
        /// <param name="tokenType">tokenType</param>
        /// <param name="expiresIn">expiresIn</param>
        [JsonConstructor]
        public AuthorizeResult(Option<int?> code = default, Option<string> error = default, Option<string> accessToken = default, Option<string> tokenType = default, Option<long?> expiresIn = default)
        {
            CodeOption = code;
            ErrorOption = error;
            AccessTokenOption = accessToken;
            TokenTypeOption = tokenType;
            ExpiresInOption = expiresIn;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [JsonPropertyName("code")]
        public int? Code { get { return this.CodeOption; } set { this.CodeOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Error
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ErrorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [JsonPropertyName("error")]
        public string Error { get { return this.ErrorOption; } set { this.ErrorOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AccessToken
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AccessTokenOption { get; private set; }

        /// <summary>
        /// Gets or Sets AccessToken
        /// </summary>
        [JsonPropertyName("access_token")]
        public string AccessToken { get { return this.AccessTokenOption; } set { this.AccessTokenOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TokenType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TokenTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets TokenType
        /// </summary>
        [JsonPropertyName("token_type")]
        public string TokenType { get { return this.TokenTypeOption; } set { this.TokenTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ExpiresIn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ExpiresInOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExpiresIn
        /// </summary>
        [JsonPropertyName("expires_in")]
        public long? ExpiresIn { get { return this.ExpiresInOption; } set { this.ExpiresInOption = new Option<long?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthorizeResult {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  AccessToken: ").Append(AccessToken).Append("\n");
            sb.Append("  TokenType: ").Append(TokenType).Append("\n");
            sb.Append("  ExpiresIn: ").Append(ExpiresIn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AuthorizeResult" />
    /// </summary>
    public class AuthorizeResultJsonConverter : JsonConverter<AuthorizeResult>
    {
        /// <summary>
        /// Deserializes json to <see cref="AuthorizeResult" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AuthorizeResult Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> code = default;
            Option<string> error = default;
            Option<string> accessToken = default;
            Option<string> tokenType = default;
            Option<long?> expiresIn = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "code":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                code = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "error":
                            error = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "access_token":
                            accessToken = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "token_type":
                            tokenType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "expires_in":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                expiresIn = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (code.IsSet && code.Value == null)
                throw new ArgumentNullException(nameof(code), "Property is not nullable for class AuthorizeResult.");

            if (expiresIn.IsSet && expiresIn.Value == null)
                throw new ArgumentNullException(nameof(expiresIn), "Property is not nullable for class AuthorizeResult.");

            return new AuthorizeResult(code, error, accessToken, tokenType, expiresIn);
        }

        /// <summary>
        /// Serializes a <see cref="AuthorizeResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="authorizeResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AuthorizeResult authorizeResult, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, authorizeResult, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AuthorizeResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="authorizeResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AuthorizeResult authorizeResult, JsonSerializerOptions jsonSerializerOptions)
        {
            if (authorizeResult.CodeOption.IsSet)
                writer.WriteNumber("code", authorizeResult.CodeOption.Value.Value);

            if (authorizeResult.ErrorOption.IsSet)
                if (authorizeResult.ErrorOption.Value != null)
                    writer.WriteString("error", authorizeResult.Error);
                else
                    writer.WriteNull("error");

            if (authorizeResult.AccessTokenOption.IsSet)
                if (authorizeResult.AccessTokenOption.Value != null)
                    writer.WriteString("access_token", authorizeResult.AccessToken);
                else
                    writer.WriteNull("access_token");

            if (authorizeResult.TokenTypeOption.IsSet)
                if (authorizeResult.TokenTypeOption.Value != null)
                    writer.WriteString("token_type", authorizeResult.TokenType);
                else
                    writer.WriteNull("token_type");

            if (authorizeResult.ExpiresInOption.IsSet)
                writer.WriteNumber("expires_in", authorizeResult.ExpiresInOption.Value.Value);
        }
    }
}
