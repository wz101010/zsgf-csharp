// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using ZSGF.Client.Client;

namespace ZSGF.Client.Model
{
    /// <summary>
    /// SendSMSCodeRequest
    /// </summary>
    public partial class SendSMSCodeRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SendSMSCodeRequest" /> class.
        /// </summary>
        /// <param name="phone">用户手机号</param>
        /// <param name="type">用途。可选值：signup（注册）/forgetpwd（忘记密码）</param>
        [JsonConstructor]
        public SendSMSCodeRequest(string phone, string type)
        {
            Phone = phone;
            Type = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// 用户手机号
        /// </summary>
        /// <value>用户手机号</value>
        [JsonPropertyName("phone")]
        public string Phone { get; set; }

        /// <summary>
        /// 用途。可选值：signup（注册）/forgetpwd（忘记密码）
        /// </summary>
        /// <value>用途。可选值：signup（注册）/forgetpwd（忘记密码）</value>
        [JsonPropertyName("type")]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SendSMSCodeRequest {\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Phone (string) minLength
            if (this.Phone != null && this.Phone.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Phone, length must be greater than 1.", new [] { "Phone" });
            }

            // Type (string) minLength
            if (this.Type != null && this.Type.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Type, length must be greater than 1.", new [] { "Type" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SendSMSCodeRequest" />
    /// </summary>
    public class SendSMSCodeRequestJsonConverter : JsonConverter<SendSMSCodeRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="SendSMSCodeRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SendSMSCodeRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> phone = default;
            Option<string> type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "phone":
                            phone = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "type":
                            type = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!phone.IsSet)
                throw new ArgumentException("Property is required for class SendSMSCodeRequest.", nameof(phone));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class SendSMSCodeRequest.", nameof(type));

            if (phone.IsSet && phone.Value == null)
                throw new ArgumentNullException(nameof(phone), "Property is not nullable for class SendSMSCodeRequest.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class SendSMSCodeRequest.");

            return new SendSMSCodeRequest(phone.Value, type.Value);
        }

        /// <summary>
        /// Serializes a <see cref="SendSMSCodeRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sendSMSCodeRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SendSMSCodeRequest sendSMSCodeRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, sendSMSCodeRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SendSMSCodeRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sendSMSCodeRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SendSMSCodeRequest sendSMSCodeRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (sendSMSCodeRequest.Phone == null)
                throw new ArgumentNullException(nameof(sendSMSCodeRequest.Phone), "Property is required for class SendSMSCodeRequest.");

            if (sendSMSCodeRequest.Type == null)
                throw new ArgumentNullException(nameof(sendSMSCodeRequest.Type), "Property is required for class SendSMSCodeRequest.");

            writer.WriteString("phone", sendSMSCodeRequest.Phone);

            writer.WriteString("type", sendSMSCodeRequest.Type);
        }
    }
}
