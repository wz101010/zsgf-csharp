// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using ZSGF.Client.Client;

namespace ZSGF.Client.Model
{
    /// <summary>
    /// ExternalAccountPutRequest
    /// </summary>
    public partial class ExternalAccountPutRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalAccountPutRequest" /> class.
        /// </summary>
        /// <param name="avatar">头像</param>
        /// <param name="data">自定义数据</param>
        /// <param name="enable">启用</param>
        [JsonConstructor]
        public ExternalAccountPutRequest(Option<string> avatar = default, Option<string> data = default, Option<bool?> enable = default)
        {
            AvatarOption = avatar;
            DataOption = data;
            EnableOption = enable;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Avatar
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AvatarOption { get; private set; }

        /// <summary>
        /// 头像
        /// </summary>
        /// <value>头像</value>
        [JsonPropertyName("avatar")]
        public string Avatar { get { return this.AvatarOption; } set { this.AvatarOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Data
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DataOption { get; private set; }

        /// <summary>
        /// 自定义数据
        /// </summary>
        /// <value>自定义数据</value>
        [JsonPropertyName("data")]
        public string Data { get { return this.DataOption; } set { this.DataOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Enable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EnableOption { get; private set; }

        /// <summary>
        /// 启用
        /// </summary>
        /// <value>启用</value>
        [JsonPropertyName("enable")]
        public bool? Enable { get { return this.EnableOption; } set { this.EnableOption = new Option<bool?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExternalAccountPutRequest {\n");
            sb.Append("  Avatar: ").Append(Avatar).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ExternalAccountPutRequest" />
    /// </summary>
    public class ExternalAccountPutRequestJsonConverter : JsonConverter<ExternalAccountPutRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="ExternalAccountPutRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ExternalAccountPutRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> avatar = default;
            Option<string> data = default;
            Option<bool?> enable = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "avatar":
                            avatar = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "data":
                            data = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "enable":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                enable = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (enable.IsSet && enable.Value == null)
                throw new ArgumentNullException(nameof(enable), "Property is not nullable for class ExternalAccountPutRequest.");

            return new ExternalAccountPutRequest(avatar, data, enable);
        }

        /// <summary>
        /// Serializes a <see cref="ExternalAccountPutRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="externalAccountPutRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ExternalAccountPutRequest externalAccountPutRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, externalAccountPutRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ExternalAccountPutRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="externalAccountPutRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ExternalAccountPutRequest externalAccountPutRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (externalAccountPutRequest.AvatarOption.IsSet)
                if (externalAccountPutRequest.AvatarOption.Value != null)
                    writer.WriteString("avatar", externalAccountPutRequest.Avatar);
                else
                    writer.WriteNull("avatar");

            if (externalAccountPutRequest.DataOption.IsSet)
                if (externalAccountPutRequest.DataOption.Value != null)
                    writer.WriteString("data", externalAccountPutRequest.Data);
                else
                    writer.WriteNull("data");

            if (externalAccountPutRequest.EnableOption.IsSet)
                writer.WriteBoolean("enable", externalAccountPutRequest.EnableOption.Value.Value);
        }
    }
}
