// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using ZSGF.Client.Client;

namespace ZSGF.Client.Model
{
    /// <summary>
    /// FileListResult
    /// </summary>
    public partial class FileListResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileListResult" /> class.
        /// </summary>
        /// <param name="directories">directories</param>
        /// <param name="files">files</param>
        /// <param name="totalDirectories">totalDirectories</param>
        /// <param name="totalFiles">totalFiles</param>
        /// <param name="size">size</param>
        [JsonConstructor]
        public FileListResult(Option<List<DirectoryItem>> directories = default, Option<List<FileItem>> files = default, Option<int?> totalDirectories = default, Option<int?> totalFiles = default, Option<long?> size = default)
        {
            DirectoriesOption = directories;
            FilesOption = files;
            TotalDirectoriesOption = totalDirectories;
            TotalFilesOption = totalFiles;
            SizeOption = size;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Directories
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DirectoryItem>> DirectoriesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Directories
        /// </summary>
        [JsonPropertyName("directories")]
        public List<DirectoryItem> Directories { get { return this.DirectoriesOption; } set { this.DirectoriesOption = new Option<List<DirectoryItem>>(value); } }

        /// <summary>
        /// Used to track the state of Files
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<FileItem>> FilesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Files
        /// </summary>
        [JsonPropertyName("files")]
        public List<FileItem> Files { get { return this.FilesOption; } set { this.FilesOption = new Option<List<FileItem>>(value); } }

        /// <summary>
        /// Used to track the state of TotalDirectories
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TotalDirectoriesOption { get; private set; }

        /// <summary>
        /// Gets or Sets TotalDirectories
        /// </summary>
        [JsonPropertyName("totalDirectories")]
        public int? TotalDirectories { get { return this.TotalDirectoriesOption; } set { this.TotalDirectoriesOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of TotalFiles
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TotalFilesOption { get; private set; }

        /// <summary>
        /// Gets or Sets TotalFiles
        /// </summary>
        [JsonPropertyName("totalFiles")]
        public int? TotalFiles { get { return this.TotalFilesOption; } set { this.TotalFilesOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Size
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SizeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [JsonPropertyName("size")]
        public long? Size { get { return this.SizeOption; } set { this.SizeOption = new Option<long?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FileListResult {\n");
            sb.Append("  Directories: ").Append(Directories).Append("\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("  TotalDirectories: ").Append(TotalDirectories).Append("\n");
            sb.Append("  TotalFiles: ").Append(TotalFiles).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FileListResult" />
    /// </summary>
    public class FileListResultJsonConverter : JsonConverter<FileListResult>
    {
        /// <summary>
        /// Deserializes json to <see cref="FileListResult" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FileListResult Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<DirectoryItem>> directories = default;
            Option<List<FileItem>> files = default;
            Option<int?> totalDirectories = default;
            Option<int?> totalFiles = default;
            Option<long?> size = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "directories":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                directories = new Option<List<DirectoryItem>>(JsonSerializer.Deserialize<List<DirectoryItem>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "files":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                files = new Option<List<FileItem>>(JsonSerializer.Deserialize<List<FileItem>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "totalDirectories":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totalDirectories = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "totalFiles":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totalFiles = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "size":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                size = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (totalDirectories.IsSet && totalDirectories.Value == null)
                throw new ArgumentNullException(nameof(totalDirectories), "Property is not nullable for class FileListResult.");

            if (totalFiles.IsSet && totalFiles.Value == null)
                throw new ArgumentNullException(nameof(totalFiles), "Property is not nullable for class FileListResult.");

            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class FileListResult.");

            return new FileListResult(directories, files, totalDirectories, totalFiles, size);
        }

        /// <summary>
        /// Serializes a <see cref="FileListResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fileListResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FileListResult fileListResult, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, fileListResult, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FileListResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fileListResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FileListResult fileListResult, JsonSerializerOptions jsonSerializerOptions)
        {
            if (fileListResult.DirectoriesOption.IsSet)
                if (fileListResult.DirectoriesOption.Value != null)
                {
                    writer.WritePropertyName("directories");
                    JsonSerializer.Serialize(writer, fileListResult.Directories, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("directories");
            if (fileListResult.FilesOption.IsSet)
                if (fileListResult.FilesOption.Value != null)
                {
                    writer.WritePropertyName("files");
                    JsonSerializer.Serialize(writer, fileListResult.Files, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("files");
            if (fileListResult.TotalDirectoriesOption.IsSet)
                writer.WriteNumber("totalDirectories", fileListResult.TotalDirectoriesOption.Value.Value);

            if (fileListResult.TotalFilesOption.IsSet)
                writer.WriteNumber("totalFiles", fileListResult.TotalFilesOption.Value.Value);

            if (fileListResult.SizeOption.IsSet)
                writer.WriteNumber("size", fileListResult.SizeOption.Value.Value);
        }
    }
}
