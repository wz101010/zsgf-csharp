// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using ZSGF.Client.Client;

namespace ZSGF.Client.Model
{
    /// <summary>
    /// SetupCode
    /// </summary>
    public partial class SetupCode : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SetupCode" /> class.
        /// </summary>
        /// <param name="account">account</param>
        /// <param name="manualEntryKey">manualEntryKey</param>
        /// <param name="qrCodeSetupImageUrl">qrCodeSetupImageUrl</param>
        [JsonConstructor]
        internal SetupCode(Option<string> account = default, Option<string> manualEntryKey = default, Option<string> qrCodeSetupImageUrl = default)
        {
            AccountOption = account;
            ManualEntryKeyOption = manualEntryKey;
            QrCodeSetupImageUrlOption = qrCodeSetupImageUrl;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Account
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AccountOption { get; }

        /// <summary>
        /// Gets or Sets Account
        /// </summary>
        [JsonPropertyName("account")]
        public string Account { get { return this.AccountOption; } }

        /// <summary>
        /// Used to track the state of ManualEntryKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ManualEntryKeyOption { get; }

        /// <summary>
        /// Gets or Sets ManualEntryKey
        /// </summary>
        [JsonPropertyName("manualEntryKey")]
        public string ManualEntryKey { get { return this.ManualEntryKeyOption; } }

        /// <summary>
        /// Used to track the state of QrCodeSetupImageUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> QrCodeSetupImageUrlOption { get; }

        /// <summary>
        /// Gets or Sets QrCodeSetupImageUrl
        /// </summary>
        [JsonPropertyName("qrCodeSetupImageUrl")]
        public string QrCodeSetupImageUrl { get { return this.QrCodeSetupImageUrlOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SetupCode {\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  ManualEntryKey: ").Append(ManualEntryKey).Append("\n");
            sb.Append("  QrCodeSetupImageUrl: ").Append(QrCodeSetupImageUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SetupCode" />
    /// </summary>
    public class SetupCodeJsonConverter : JsonConverter<SetupCode>
    {
        /// <summary>
        /// Deserializes json to <see cref="SetupCode" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SetupCode Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> account = default;
            Option<string> manualEntryKey = default;
            Option<string> qrCodeSetupImageUrl = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "account":
                            account = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "manualEntryKey":
                            manualEntryKey = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "qrCodeSetupImageUrl":
                            qrCodeSetupImageUrl = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new SetupCode(account, manualEntryKey, qrCodeSetupImageUrl);
        }

        /// <summary>
        /// Serializes a <see cref="SetupCode" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="setupCode"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SetupCode setupCode, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, setupCode, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SetupCode" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="setupCode"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SetupCode setupCode, JsonSerializerOptions jsonSerializerOptions)
        {
            if (setupCode.AccountOption.IsSet)
                if (setupCode.AccountOption.Value != null)
                    writer.WriteString("account", setupCode.Account);
                else
                    writer.WriteNull("account");

            if (setupCode.ManualEntryKeyOption.IsSet)
                if (setupCode.ManualEntryKeyOption.Value != null)
                    writer.WriteString("manualEntryKey", setupCode.ManualEntryKey);
                else
                    writer.WriteNull("manualEntryKey");

            if (setupCode.QrCodeSetupImageUrlOption.IsSet)
                if (setupCode.QrCodeSetupImageUrlOption.Value != null)
                    writer.WriteString("qrCodeSetupImageUrl", setupCode.QrCodeSetupImageUrl);
                else
                    writer.WriteNull("qrCodeSetupImageUrl");
        }
    }
}
