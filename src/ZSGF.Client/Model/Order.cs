// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using ZSGF.Client.Client;

namespace ZSGF.Client.Model
{
    /// <summary>
    /// 订单实体，用于记录用户的订单信息。
    /// </summary>
    public partial class Order : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Order" /> class.
        /// </summary>
        /// <param name="id">订单的唯一标识符。</param>
        /// <param name="userID">创建订单的用户ID。</param>
        /// <param name="payType">订单的支付类型，例如 &#39;信用卡&#39;, &#39;支付宝&#39;, &#39;微信支付&#39; 等。</param>
        /// <param name="amount">订单的总金额。</param>
        /// <param name="orderNo">订单的唯一编号，通常由系统生成。</param>
        /// <param name="tradeNo">与订单关联的交易编号，通常由支付平台提供。</param>
        /// <param name="status">订单的当前状态，例如 &#39;待支付&#39;, &#39;已完成&#39;, &#39;已取消&#39; 等。</param>
        /// <param name="productType">订单中商品的类型分类。</param>
        /// <param name="productID">订单中商品的唯一标识符。</param>
        /// <param name="productName">订单中商品的名称。</param>
        /// <param name="allowRefund">指示订单是否允许进行退款操作。</param>
        /// <param name="allowRefundUntil">订单允许进行退款操作的截止时间。</param>
        /// <param name="tags">用于分类或标记订单的标签。</param>
        /// <param name="remark">订单的额外备注信息。</param>
        /// <param name="description">订单的详细描述信息。</param>
        /// <param name="orderPayTime">订单完成支付的时间。</param>
        /// <param name="expireTime">订单的过期时间，超过该时间订单将自动取消。</param>
        /// <param name="createDate">订单的创建时间，默认为当前时间。</param>
        /// <param name="lastUpdate">订单的最后更新时间，默认为当前时间。</param>
        [JsonConstructor]
        public Order(Option<long?> id = default, Option<long?> userID = default, Option<string> payType = default, Option<double?> amount = default, Option<string> orderNo = default, Option<string> tradeNo = default, Option<string> status = default, Option<string> productType = default, Option<string> productID = default, Option<string> productName = default, Option<bool?> allowRefund = default, Option<DateTime?> allowRefundUntil = default, Option<string> tags = default, Option<string> remark = default, Option<string> description = default, Option<DateTime?> orderPayTime = default, Option<DateTime?> expireTime = default, Option<DateTime?> createDate = default, Option<DateTime?> lastUpdate = default)
        {
            IdOption = id;
            UserIDOption = userID;
            PayTypeOption = payType;
            AmountOption = amount;
            OrderNoOption = orderNo;
            TradeNoOption = tradeNo;
            StatusOption = status;
            ProductTypeOption = productType;
            ProductIDOption = productID;
            ProductNameOption = productName;
            AllowRefundOption = allowRefund;
            AllowRefundUntilOption = allowRefundUntil;
            TagsOption = tags;
            RemarkOption = remark;
            DescriptionOption = description;
            OrderPayTimeOption = orderPayTime;
            ExpireTimeOption = expireTime;
            CreateDateOption = createDate;
            LastUpdateOption = lastUpdate;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> IdOption { get; private set; }

        /// <summary>
        /// 订单的唯一标识符。
        /// </summary>
        /// <value>订单的唯一标识符。</value>
        [JsonPropertyName("id")]
        public long? Id { get { return this.IdOption; } set { this.IdOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of UserID
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> UserIDOption { get; private set; }

        /// <summary>
        /// 创建订单的用户ID。
        /// </summary>
        /// <value>创建订单的用户ID。</value>
        [JsonPropertyName("userID")]
        public long? UserID { get { return this.UserIDOption; } set { this.UserIDOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of PayType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PayTypeOption { get; private set; }

        /// <summary>
        /// 订单的支付类型，例如 &#39;信用卡&#39;, &#39;支付宝&#39;, &#39;微信支付&#39; 等。
        /// </summary>
        /// <value>订单的支付类型，例如 &#39;信用卡&#39;, &#39;支付宝&#39;, &#39;微信支付&#39; 等。</value>
        [JsonPropertyName("payType")]
        public string PayType { get { return this.PayTypeOption; } set { this.PayTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Amount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> AmountOption { get; private set; }

        /// <summary>
        /// 订单的总金额。
        /// </summary>
        /// <value>订单的总金额。</value>
        [JsonPropertyName("amount")]
        public double? Amount { get { return this.AmountOption; } set { this.AmountOption = new Option<double?>(value); } }

        /// <summary>
        /// Used to track the state of OrderNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OrderNoOption { get; private set; }

        /// <summary>
        /// 订单的唯一编号，通常由系统生成。
        /// </summary>
        /// <value>订单的唯一编号，通常由系统生成。</value>
        [JsonPropertyName("orderNo")]
        public string OrderNo { get { return this.OrderNoOption; } set { this.OrderNoOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TradeNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TradeNoOption { get; private set; }

        /// <summary>
        /// 与订单关联的交易编号，通常由支付平台提供。
        /// </summary>
        /// <value>与订单关联的交易编号，通常由支付平台提供。</value>
        [JsonPropertyName("tradeNo")]
        public string TradeNo { get { return this.TradeNoOption; } set { this.TradeNoOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> StatusOption { get; private set; }

        /// <summary>
        /// 订单的当前状态，例如 &#39;待支付&#39;, &#39;已完成&#39;, &#39;已取消&#39; 等。
        /// </summary>
        /// <value>订单的当前状态，例如 &#39;待支付&#39;, &#39;已完成&#39;, &#39;已取消&#39; 等。</value>
        [JsonPropertyName("status")]
        public string Status { get { return this.StatusOption; } set { this.StatusOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ProductType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ProductTypeOption { get; private set; }

        /// <summary>
        /// 订单中商品的类型分类。
        /// </summary>
        /// <value>订单中商品的类型分类。</value>
        [JsonPropertyName("productType")]
        public string ProductType { get { return this.ProductTypeOption; } set { this.ProductTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ProductID
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ProductIDOption { get; private set; }

        /// <summary>
        /// 订单中商品的唯一标识符。
        /// </summary>
        /// <value>订单中商品的唯一标识符。</value>
        [JsonPropertyName("productID")]
        public string ProductID { get { return this.ProductIDOption; } set { this.ProductIDOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ProductName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ProductNameOption { get; private set; }

        /// <summary>
        /// 订单中商品的名称。
        /// </summary>
        /// <value>订单中商品的名称。</value>
        [JsonPropertyName("productName")]
        public string ProductName { get { return this.ProductNameOption; } set { this.ProductNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AllowRefund
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AllowRefundOption { get; private set; }

        /// <summary>
        /// 指示订单是否允许进行退款操作。
        /// </summary>
        /// <value>指示订单是否允许进行退款操作。</value>
        [JsonPropertyName("allowRefund")]
        public bool? AllowRefund { get { return this.AllowRefundOption; } set { this.AllowRefundOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of AllowRefundUntil
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> AllowRefundUntilOption { get; private set; }

        /// <summary>
        /// 订单允许进行退款操作的截止时间。
        /// </summary>
        /// <value>订单允许进行退款操作的截止时间。</value>
        [JsonPropertyName("allowRefundUntil")]
        public DateTime? AllowRefundUntil { get { return this.AllowRefundUntilOption; } set { this.AllowRefundUntilOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of Tags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TagsOption { get; private set; }

        /// <summary>
        /// 用于分类或标记订单的标签。
        /// </summary>
        /// <value>用于分类或标记订单的标签。</value>
        [JsonPropertyName("tags")]
        public string Tags { get { return this.TagsOption; } set { this.TagsOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Remark
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RemarkOption { get; private set; }

        /// <summary>
        /// 订单的额外备注信息。
        /// </summary>
        /// <value>订单的额外备注信息。</value>
        [JsonPropertyName("remark")]
        public string Remark { get { return this.RemarkOption; } set { this.RemarkOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DescriptionOption { get; private set; }

        /// <summary>
        /// 订单的详细描述信息。
        /// </summary>
        /// <value>订单的详细描述信息。</value>
        [JsonPropertyName("description")]
        public string Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OrderPayTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> OrderPayTimeOption { get; private set; }

        /// <summary>
        /// 订单完成支付的时间。
        /// </summary>
        /// <value>订单完成支付的时间。</value>
        [JsonPropertyName("orderPayTime")]
        public DateTime? OrderPayTime { get { return this.OrderPayTimeOption; } set { this.OrderPayTimeOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of ExpireTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> ExpireTimeOption { get; private set; }

        /// <summary>
        /// 订单的过期时间，超过该时间订单将自动取消。
        /// </summary>
        /// <value>订单的过期时间，超过该时间订单将自动取消。</value>
        [JsonPropertyName("expireTime")]
        public DateTime? ExpireTime { get { return this.ExpireTimeOption; } set { this.ExpireTimeOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of CreateDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreateDateOption { get; private set; }

        /// <summary>
        /// 订单的创建时间，默认为当前时间。
        /// </summary>
        /// <value>订单的创建时间，默认为当前时间。</value>
        [JsonPropertyName("createDate")]
        public DateTime? CreateDate { get { return this.CreateDateOption; } set { this.CreateDateOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of LastUpdate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastUpdateOption { get; private set; }

        /// <summary>
        /// 订单的最后更新时间，默认为当前时间。
        /// </summary>
        /// <value>订单的最后更新时间，默认为当前时间。</value>
        [JsonPropertyName("lastUpdate")]
        public DateTime? LastUpdate { get { return this.LastUpdateOption; } set { this.LastUpdateOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Order {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserID: ").Append(UserID).Append("\n");
            sb.Append("  PayType: ").Append(PayType).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  OrderNo: ").Append(OrderNo).Append("\n");
            sb.Append("  TradeNo: ").Append(TradeNo).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ProductType: ").Append(ProductType).Append("\n");
            sb.Append("  ProductID: ").Append(ProductID).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  AllowRefund: ").Append(AllowRefund).Append("\n");
            sb.Append("  AllowRefundUntil: ").Append(AllowRefundUntil).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Remark: ").Append(Remark).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  OrderPayTime: ").Append(OrderPayTime).Append("\n");
            sb.Append("  ExpireTime: ").Append(ExpireTime).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  LastUpdate: ").Append(LastUpdate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PayType (string) maxLength
            if (this.PayType != null && this.PayType.Length > 50)
            {
                yield return new ValidationResult("Invalid value for PayType, length must be less than 50.", new [] { "PayType" });
            }

            // OrderNo (string) maxLength
            if (this.OrderNo != null && this.OrderNo.Length > 50)
            {
                yield return new ValidationResult("Invalid value for OrderNo, length must be less than 50.", new [] { "OrderNo" });
            }

            // TradeNo (string) maxLength
            if (this.TradeNo != null && this.TradeNo.Length > 50)
            {
                yield return new ValidationResult("Invalid value for TradeNo, length must be less than 50.", new [] { "TradeNo" });
            }

            // Status (string) maxLength
            if (this.Status != null && this.Status.Length > 50)
            {
                yield return new ValidationResult("Invalid value for Status, length must be less than 50.", new [] { "Status" });
            }

            // ProductType (string) maxLength
            if (this.ProductType != null && this.ProductType.Length > 50)
            {
                yield return new ValidationResult("Invalid value for ProductType, length must be less than 50.", new [] { "ProductType" });
            }

            // ProductID (string) maxLength
            if (this.ProductID != null && this.ProductID.Length > 50)
            {
                yield return new ValidationResult("Invalid value for ProductID, length must be less than 50.", new [] { "ProductID" });
            }

            // ProductName (string) maxLength
            if (this.ProductName != null && this.ProductName.Length > 255)
            {
                yield return new ValidationResult("Invalid value for ProductName, length must be less than 255.", new [] { "ProductName" });
            }

            // Tags (string) maxLength
            if (this.Tags != null && this.Tags.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Tags, length must be less than 255.", new [] { "Tags" });
            }

            // Remark (string) maxLength
            if (this.Remark != null && this.Remark.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Remark, length must be less than 255.", new [] { "Remark" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Order" />
    /// </summary>
    public class OrderJsonConverter : JsonConverter<Order>
    {
        /// <summary>
        /// The format to use to serialize AllowRefundUntil
        /// </summary>
        public static string AllowRefundUntilFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize OrderPayTime
        /// </summary>
        public static string OrderPayTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize ExpireTime
        /// </summary>
        public static string ExpireTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize CreateDate
        /// </summary>
        public static string CreateDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize LastUpdate
        /// </summary>
        public static string LastUpdateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="Order" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Order Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> id = default;
            Option<long?> userID = default;
            Option<string> payType = default;
            Option<double?> amount = default;
            Option<string> orderNo = default;
            Option<string> tradeNo = default;
            Option<string> status = default;
            Option<string> productType = default;
            Option<string> productID = default;
            Option<string> productName = default;
            Option<bool?> allowRefund = default;
            Option<DateTime?> allowRefundUntil = default;
            Option<string> tags = default;
            Option<string> remark = default;
            Option<string> description = default;
            Option<DateTime?> orderPayTime = default;
            Option<DateTime?> expireTime = default;
            Option<DateTime?> createDate = default;
            Option<DateTime?> lastUpdate = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "userID":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                userID = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "payType":
                            payType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "amount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                amount = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "orderNo":
                            orderNo = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "tradeNo":
                            tradeNo = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "status":
                            status = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "productType":
                            productType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "productID":
                            productID = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "productName":
                            productName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "allowRefund":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                allowRefund = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "allowRefundUntil":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                allowRefundUntil = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "tags":
                            tags = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "remark":
                            remark = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "description":
                            description = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "orderPayTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                orderPayTime = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "expireTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                expireTime = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "createDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "lastUpdate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lastUpdate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Order.");

            if (userID.IsSet && userID.Value == null)
                throw new ArgumentNullException(nameof(userID), "Property is not nullable for class Order.");

            if (amount.IsSet && amount.Value == null)
                throw new ArgumentNullException(nameof(amount), "Property is not nullable for class Order.");

            if (allowRefund.IsSet && allowRefund.Value == null)
                throw new ArgumentNullException(nameof(allowRefund), "Property is not nullable for class Order.");

            if (allowRefundUntil.IsSet && allowRefundUntil.Value == null)
                throw new ArgumentNullException(nameof(allowRefundUntil), "Property is not nullable for class Order.");

            if (orderPayTime.IsSet && orderPayTime.Value == null)
                throw new ArgumentNullException(nameof(orderPayTime), "Property is not nullable for class Order.");

            if (expireTime.IsSet && expireTime.Value == null)
                throw new ArgumentNullException(nameof(expireTime), "Property is not nullable for class Order.");

            if (createDate.IsSet && createDate.Value == null)
                throw new ArgumentNullException(nameof(createDate), "Property is not nullable for class Order.");

            if (lastUpdate.IsSet && lastUpdate.Value == null)
                throw new ArgumentNullException(nameof(lastUpdate), "Property is not nullable for class Order.");

            return new Order(id, userID, payType, amount, orderNo, tradeNo, status, productType, productID, productName, allowRefund, allowRefundUntil, tags, remark, description, orderPayTime, expireTime, createDate, lastUpdate);
        }

        /// <summary>
        /// Serializes a <see cref="Order" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="order"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Order order, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, order, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Order" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="order"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Order order, JsonSerializerOptions jsonSerializerOptions)
        {
            if (order.IdOption.IsSet)
                writer.WriteNumber("id", order.IdOption.Value.Value);

            if (order.UserIDOption.IsSet)
                writer.WriteNumber("userID", order.UserIDOption.Value.Value);

            if (order.PayTypeOption.IsSet)
                if (order.PayTypeOption.Value != null)
                    writer.WriteString("payType", order.PayType);
                else
                    writer.WriteNull("payType");

            if (order.AmountOption.IsSet)
                writer.WriteNumber("amount", order.AmountOption.Value.Value);

            if (order.OrderNoOption.IsSet)
                if (order.OrderNoOption.Value != null)
                    writer.WriteString("orderNo", order.OrderNo);
                else
                    writer.WriteNull("orderNo");

            if (order.TradeNoOption.IsSet)
                if (order.TradeNoOption.Value != null)
                    writer.WriteString("tradeNo", order.TradeNo);
                else
                    writer.WriteNull("tradeNo");

            if (order.StatusOption.IsSet)
                if (order.StatusOption.Value != null)
                    writer.WriteString("status", order.Status);
                else
                    writer.WriteNull("status");

            if (order.ProductTypeOption.IsSet)
                if (order.ProductTypeOption.Value != null)
                    writer.WriteString("productType", order.ProductType);
                else
                    writer.WriteNull("productType");

            if (order.ProductIDOption.IsSet)
                if (order.ProductIDOption.Value != null)
                    writer.WriteString("productID", order.ProductID);
                else
                    writer.WriteNull("productID");

            if (order.ProductNameOption.IsSet)
                if (order.ProductNameOption.Value != null)
                    writer.WriteString("productName", order.ProductName);
                else
                    writer.WriteNull("productName");

            if (order.AllowRefundOption.IsSet)
                writer.WriteBoolean("allowRefund", order.AllowRefundOption.Value.Value);

            if (order.AllowRefundUntilOption.IsSet)
                writer.WriteString("allowRefundUntil", order.AllowRefundUntilOption.Value.Value.ToString(AllowRefundUntilFormat));

            if (order.TagsOption.IsSet)
                if (order.TagsOption.Value != null)
                    writer.WriteString("tags", order.Tags);
                else
                    writer.WriteNull("tags");

            if (order.RemarkOption.IsSet)
                if (order.RemarkOption.Value != null)
                    writer.WriteString("remark", order.Remark);
                else
                    writer.WriteNull("remark");

            if (order.DescriptionOption.IsSet)
                if (order.DescriptionOption.Value != null)
                    writer.WriteString("description", order.Description);
                else
                    writer.WriteNull("description");

            if (order.OrderPayTimeOption.IsSet)
                writer.WriteString("orderPayTime", order.OrderPayTimeOption.Value.Value.ToString(OrderPayTimeFormat));

            if (order.ExpireTimeOption.IsSet)
                writer.WriteString("expireTime", order.ExpireTimeOption.Value.Value.ToString(ExpireTimeFormat));

            if (order.CreateDateOption.IsSet)
                writer.WriteString("createDate", order.CreateDateOption.Value.Value.ToString(CreateDateFormat));

            if (order.LastUpdateOption.IsSet)
                writer.WriteString("lastUpdate", order.LastUpdateOption.Value.Value.ToString(LastUpdateFormat));
        }
    }
}
