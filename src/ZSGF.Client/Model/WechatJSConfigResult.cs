// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using ZSGF.Client.Client;

namespace ZSGF.Client.Model
{
    /// <summary>
    /// WechatJSConfigResult
    /// </summary>
    public partial class WechatJSConfigResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WechatJSConfigResult" /> class.
        /// </summary>
        /// <param name="noncestr">noncestr</param>
        /// <param name="timestamp">timestamp</param>
        /// <param name="signature">signature</param>
        /// <param name="appKey">appKey</param>
        /// <param name="jsApiList">jsApiList</param>
        [JsonConstructor]
        public WechatJSConfigResult(Option<string> noncestr = default, Option<string> timestamp = default, Option<string> signature = default, Option<string> appKey = default, Option<List<string>> jsApiList = default)
        {
            NoncestrOption = noncestr;
            TimestampOption = timestamp;
            SignatureOption = signature;
            AppKeyOption = appKey;
            JsApiListOption = jsApiList;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Noncestr
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NoncestrOption { get; private set; }

        /// <summary>
        /// Gets or Sets Noncestr
        /// </summary>
        [JsonPropertyName("noncestr")]
        public string Noncestr { get { return this.NoncestrOption; } set { this.NoncestrOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Timestamp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TimestampOption { get; private set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [JsonPropertyName("timestamp")]
        public string Timestamp { get { return this.TimestampOption; } set { this.TimestampOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Signature
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SignatureOption { get; private set; }

        /// <summary>
        /// Gets or Sets Signature
        /// </summary>
        [JsonPropertyName("signature")]
        public string Signature { get { return this.SignatureOption; } set { this.SignatureOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AppKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AppKeyOption { get; private set; }

        /// <summary>
        /// Gets or Sets AppKey
        /// </summary>
        [JsonPropertyName("appKey")]
        public string AppKey { get { return this.AppKeyOption; } set { this.AppKeyOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of JsApiList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> JsApiListOption { get; private set; }

        /// <summary>
        /// Gets or Sets JsApiList
        /// </summary>
        [JsonPropertyName("jsApiList")]
        public List<string> JsApiList { get { return this.JsApiListOption; } set { this.JsApiListOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WechatJSConfigResult {\n");
            sb.Append("  Noncestr: ").Append(Noncestr).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("  AppKey: ").Append(AppKey).Append("\n");
            sb.Append("  JsApiList: ").Append(JsApiList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WechatJSConfigResult" />
    /// </summary>
    public class WechatJSConfigResultJsonConverter : JsonConverter<WechatJSConfigResult>
    {
        /// <summary>
        /// Deserializes json to <see cref="WechatJSConfigResult" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WechatJSConfigResult Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> noncestr = default;
            Option<string> timestamp = default;
            Option<string> signature = default;
            Option<string> appKey = default;
            Option<List<string>> jsApiList = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "noncestr":
                            noncestr = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "timestamp":
                            timestamp = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "signature":
                            signature = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "appKey":
                            appKey = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "jsApiList":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                jsApiList = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            return new WechatJSConfigResult(noncestr, timestamp, signature, appKey, jsApiList);
        }

        /// <summary>
        /// Serializes a <see cref="WechatJSConfigResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="wechatJSConfigResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WechatJSConfigResult wechatJSConfigResult, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, wechatJSConfigResult, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WechatJSConfigResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="wechatJSConfigResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WechatJSConfigResult wechatJSConfigResult, JsonSerializerOptions jsonSerializerOptions)
        {
            if (wechatJSConfigResult.NoncestrOption.IsSet)
                if (wechatJSConfigResult.NoncestrOption.Value != null)
                    writer.WriteString("noncestr", wechatJSConfigResult.Noncestr);
                else
                    writer.WriteNull("noncestr");

            if (wechatJSConfigResult.TimestampOption.IsSet)
                if (wechatJSConfigResult.TimestampOption.Value != null)
                    writer.WriteString("timestamp", wechatJSConfigResult.Timestamp);
                else
                    writer.WriteNull("timestamp");

            if (wechatJSConfigResult.SignatureOption.IsSet)
                if (wechatJSConfigResult.SignatureOption.Value != null)
                    writer.WriteString("signature", wechatJSConfigResult.Signature);
                else
                    writer.WriteNull("signature");

            if (wechatJSConfigResult.AppKeyOption.IsSet)
                if (wechatJSConfigResult.AppKeyOption.Value != null)
                    writer.WriteString("appKey", wechatJSConfigResult.AppKey);
                else
                    writer.WriteNull("appKey");

            if (wechatJSConfigResult.JsApiListOption.IsSet)
                if (wechatJSConfigResult.JsApiListOption.Value != null)
                {
                    writer.WritePropertyName("jsApiList");
                    JsonSerializer.Serialize(writer, wechatJSConfigResult.JsApiList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("jsApiList");
        }
    }
}
