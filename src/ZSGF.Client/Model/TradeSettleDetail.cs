// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using ZSGF.Client.Client;

namespace ZSGF.Client.Model
{
    /// <summary>
    /// TradeSettleDetail
    /// </summary>
    public partial class TradeSettleDetail : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TradeSettleDetail" /> class.
        /// </summary>
        /// <param name="amount">amount</param>
        /// <param name="operationDt">operationDt</param>
        /// <param name="operationSerialNo">operationSerialNo</param>
        /// <param name="operationType">operationType</param>
        /// <param name="oriTransIn">oriTransIn</param>
        /// <param name="oriTransOut">oriTransOut</param>
        /// <param name="transIn">transIn</param>
        /// <param name="transOut">transOut</param>
        [JsonConstructor]
        public TradeSettleDetail(Option<string> amount = default, Option<string> operationDt = default, Option<string> operationSerialNo = default, Option<string> operationType = default, Option<string> oriTransIn = default, Option<string> oriTransOut = default, Option<string> transIn = default, Option<string> transOut = default)
        {
            AmountOption = amount;
            OperationDtOption = operationDt;
            OperationSerialNoOption = operationSerialNo;
            OperationTypeOption = operationType;
            OriTransInOption = oriTransIn;
            OriTransOutOption = oriTransOut;
            TransInOption = transIn;
            TransOutOption = transOut;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Amount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [JsonPropertyName("amount")]
        public string Amount { get { return this.AmountOption; } set { this.AmountOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OperationDt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OperationDtOption { get; private set; }

        /// <summary>
        /// Gets or Sets OperationDt
        /// </summary>
        [JsonPropertyName("operationDt")]
        public string OperationDt { get { return this.OperationDtOption; } set { this.OperationDtOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OperationSerialNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OperationSerialNoOption { get; private set; }

        /// <summary>
        /// Gets or Sets OperationSerialNo
        /// </summary>
        [JsonPropertyName("operationSerialNo")]
        public string OperationSerialNo { get { return this.OperationSerialNoOption; } set { this.OperationSerialNoOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OperationType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OperationTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets OperationType
        /// </summary>
        [JsonPropertyName("operationType")]
        public string OperationType { get { return this.OperationTypeOption; } set { this.OperationTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OriTransIn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OriTransInOption { get; private set; }

        /// <summary>
        /// Gets or Sets OriTransIn
        /// </summary>
        [JsonPropertyName("oriTransIn")]
        public string OriTransIn { get { return this.OriTransInOption; } set { this.OriTransInOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OriTransOut
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OriTransOutOption { get; private set; }

        /// <summary>
        /// Gets or Sets OriTransOut
        /// </summary>
        [JsonPropertyName("oriTransOut")]
        public string OriTransOut { get { return this.OriTransOutOption; } set { this.OriTransOutOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TransIn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TransInOption { get; private set; }

        /// <summary>
        /// Gets or Sets TransIn
        /// </summary>
        [JsonPropertyName("transIn")]
        public string TransIn { get { return this.TransInOption; } set { this.TransInOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TransOut
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TransOutOption { get; private set; }

        /// <summary>
        /// Gets or Sets TransOut
        /// </summary>
        [JsonPropertyName("transOut")]
        public string TransOut { get { return this.TransOutOption; } set { this.TransOutOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TradeSettleDetail {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  OperationDt: ").Append(OperationDt).Append("\n");
            sb.Append("  OperationSerialNo: ").Append(OperationSerialNo).Append("\n");
            sb.Append("  OperationType: ").Append(OperationType).Append("\n");
            sb.Append("  OriTransIn: ").Append(OriTransIn).Append("\n");
            sb.Append("  OriTransOut: ").Append(OriTransOut).Append("\n");
            sb.Append("  TransIn: ").Append(TransIn).Append("\n");
            sb.Append("  TransOut: ").Append(TransOut).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TradeSettleDetail" />
    /// </summary>
    public class TradeSettleDetailJsonConverter : JsonConverter<TradeSettleDetail>
    {
        /// <summary>
        /// Deserializes json to <see cref="TradeSettleDetail" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TradeSettleDetail Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> amount = default;
            Option<string> operationDt = default;
            Option<string> operationSerialNo = default;
            Option<string> operationType = default;
            Option<string> oriTransIn = default;
            Option<string> oriTransOut = default;
            Option<string> transIn = default;
            Option<string> transOut = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "amount":
                            amount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "operationDt":
                            operationDt = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "operationSerialNo":
                            operationSerialNo = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "operationType":
                            operationType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "oriTransIn":
                            oriTransIn = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "oriTransOut":
                            oriTransOut = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "transIn":
                            transIn = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "transOut":
                            transOut = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new TradeSettleDetail(amount, operationDt, operationSerialNo, operationType, oriTransIn, oriTransOut, transIn, transOut);
        }

        /// <summary>
        /// Serializes a <see cref="TradeSettleDetail" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tradeSettleDetail"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TradeSettleDetail tradeSettleDetail, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, tradeSettleDetail, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TradeSettleDetail" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tradeSettleDetail"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TradeSettleDetail tradeSettleDetail, JsonSerializerOptions jsonSerializerOptions)
        {
            if (tradeSettleDetail.AmountOption.IsSet)
                if (tradeSettleDetail.AmountOption.Value != null)
                    writer.WriteString("amount", tradeSettleDetail.Amount);
                else
                    writer.WriteNull("amount");

            if (tradeSettleDetail.OperationDtOption.IsSet)
                if (tradeSettleDetail.OperationDtOption.Value != null)
                    writer.WriteString("operationDt", tradeSettleDetail.OperationDt);
                else
                    writer.WriteNull("operationDt");

            if (tradeSettleDetail.OperationSerialNoOption.IsSet)
                if (tradeSettleDetail.OperationSerialNoOption.Value != null)
                    writer.WriteString("operationSerialNo", tradeSettleDetail.OperationSerialNo);
                else
                    writer.WriteNull("operationSerialNo");

            if (tradeSettleDetail.OperationTypeOption.IsSet)
                if (tradeSettleDetail.OperationTypeOption.Value != null)
                    writer.WriteString("operationType", tradeSettleDetail.OperationType);
                else
                    writer.WriteNull("operationType");

            if (tradeSettleDetail.OriTransInOption.IsSet)
                if (tradeSettleDetail.OriTransInOption.Value != null)
                    writer.WriteString("oriTransIn", tradeSettleDetail.OriTransIn);
                else
                    writer.WriteNull("oriTransIn");

            if (tradeSettleDetail.OriTransOutOption.IsSet)
                if (tradeSettleDetail.OriTransOutOption.Value != null)
                    writer.WriteString("oriTransOut", tradeSettleDetail.OriTransOut);
                else
                    writer.WriteNull("oriTransOut");

            if (tradeSettleDetail.TransInOption.IsSet)
                if (tradeSettleDetail.TransInOption.Value != null)
                    writer.WriteString("transIn", tradeSettleDetail.TransIn);
                else
                    writer.WriteNull("transIn");

            if (tradeSettleDetail.TransOutOption.IsSet)
                if (tradeSettleDetail.TransOutOption.Value != null)
                    writer.WriteString("transOut", tradeSettleDetail.TransOut);
                else
                    writer.WriteNull("transOut");
        }
    }
}
