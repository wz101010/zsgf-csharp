// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using ZSGF.Client.Client;

namespace ZSGF.Client.Model
{
    /// <summary>
    /// UserQRCodeScanResult
    /// </summary>
    public partial class UserQRCodeScanResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserQRCodeScanResult" /> class.
        /// </summary>
        /// <param name="appID">appID</param>
        /// <param name="name">name</param>
        /// <param name="logo">logo</param>
        /// <param name="website">website</param>
        /// <param name="description">description</param>
        /// <param name="tags">tags</param>
        /// <param name="scopes">scopes</param>
        /// <param name="remark">remark</param>
        /// <param name="scheme">scheme</param>
        [JsonConstructor]
        public UserQRCodeScanResult(Option<long?> appID = default, Option<string> name = default, Option<string> logo = default, Option<string> website = default, Option<string> description = default, Option<string> tags = default, Option<string> scopes = default, Option<string> remark = default, Option<string> scheme = default)
        {
            AppIDOption = appID;
            NameOption = name;
            LogoOption = logo;
            WebsiteOption = website;
            DescriptionOption = description;
            TagsOption = tags;
            ScopesOption = scopes;
            RemarkOption = remark;
            SchemeOption = scheme;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AppID
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> AppIDOption { get; private set; }

        /// <summary>
        /// Gets or Sets AppID
        /// </summary>
        [JsonPropertyName("appID")]
        public long? AppID { get { return this.AppIDOption; } set { this.AppIDOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Logo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LogoOption { get; private set; }

        /// <summary>
        /// Gets or Sets Logo
        /// </summary>
        [JsonPropertyName("logo")]
        public string Logo { get { return this.LogoOption; } set { this.LogoOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Website
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> WebsiteOption { get; private set; }

        /// <summary>
        /// Gets or Sets Website
        /// </summary>
        [JsonPropertyName("website")]
        public string Website { get { return this.WebsiteOption; } set { this.WebsiteOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Tags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TagsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [JsonPropertyName("tags")]
        public string Tags { get { return this.TagsOption; } set { this.TagsOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Scopes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ScopesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Scopes
        /// </summary>
        [JsonPropertyName("scopes")]
        public string Scopes { get { return this.ScopesOption; } set { this.ScopesOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Remark
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RemarkOption { get; private set; }

        /// <summary>
        /// Gets or Sets Remark
        /// </summary>
        [JsonPropertyName("remark")]
        public string Remark { get { return this.RemarkOption; } set { this.RemarkOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Scheme
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SchemeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Scheme
        /// </summary>
        [JsonPropertyName("scheme")]
        public string Scheme { get { return this.SchemeOption; } set { this.SchemeOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserQRCodeScanResult {\n");
            sb.Append("  AppID: ").Append(AppID).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Logo: ").Append(Logo).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Scopes: ").Append(Scopes).Append("\n");
            sb.Append("  Remark: ").Append(Remark).Append("\n");
            sb.Append("  Scheme: ").Append(Scheme).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserQRCodeScanResult" />
    /// </summary>
    public class UserQRCodeScanResultJsonConverter : JsonConverter<UserQRCodeScanResult>
    {
        /// <summary>
        /// Deserializes json to <see cref="UserQRCodeScanResult" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UserQRCodeScanResult Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> appID = default;
            Option<string> name = default;
            Option<string> logo = default;
            Option<string> website = default;
            Option<string> description = default;
            Option<string> tags = default;
            Option<string> scopes = default;
            Option<string> remark = default;
            Option<string> scheme = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "appID":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                appID = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "logo":
                            logo = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "website":
                            website = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "description":
                            description = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "tags":
                            tags = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "scopes":
                            scopes = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "remark":
                            remark = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "scheme":
                            scheme = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (appID.IsSet && appID.Value == null)
                throw new ArgumentNullException(nameof(appID), "Property is not nullable for class UserQRCodeScanResult.");

            return new UserQRCodeScanResult(appID, name, logo, website, description, tags, scopes, remark, scheme);
        }

        /// <summary>
        /// Serializes a <see cref="UserQRCodeScanResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userQRCodeScanResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UserQRCodeScanResult userQRCodeScanResult, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, userQRCodeScanResult, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UserQRCodeScanResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userQRCodeScanResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UserQRCodeScanResult userQRCodeScanResult, JsonSerializerOptions jsonSerializerOptions)
        {
            if (userQRCodeScanResult.AppIDOption.IsSet)
                writer.WriteNumber("appID", userQRCodeScanResult.AppIDOption.Value.Value);

            if (userQRCodeScanResult.NameOption.IsSet)
                if (userQRCodeScanResult.NameOption.Value != null)
                    writer.WriteString("name", userQRCodeScanResult.Name);
                else
                    writer.WriteNull("name");

            if (userQRCodeScanResult.LogoOption.IsSet)
                if (userQRCodeScanResult.LogoOption.Value != null)
                    writer.WriteString("logo", userQRCodeScanResult.Logo);
                else
                    writer.WriteNull("logo");

            if (userQRCodeScanResult.WebsiteOption.IsSet)
                if (userQRCodeScanResult.WebsiteOption.Value != null)
                    writer.WriteString("website", userQRCodeScanResult.Website);
                else
                    writer.WriteNull("website");

            if (userQRCodeScanResult.DescriptionOption.IsSet)
                if (userQRCodeScanResult.DescriptionOption.Value != null)
                    writer.WriteString("description", userQRCodeScanResult.Description);
                else
                    writer.WriteNull("description");

            if (userQRCodeScanResult.TagsOption.IsSet)
                if (userQRCodeScanResult.TagsOption.Value != null)
                    writer.WriteString("tags", userQRCodeScanResult.Tags);
                else
                    writer.WriteNull("tags");

            if (userQRCodeScanResult.ScopesOption.IsSet)
                if (userQRCodeScanResult.ScopesOption.Value != null)
                    writer.WriteString("scopes", userQRCodeScanResult.Scopes);
                else
                    writer.WriteNull("scopes");

            if (userQRCodeScanResult.RemarkOption.IsSet)
                if (userQRCodeScanResult.RemarkOption.Value != null)
                    writer.WriteString("remark", userQRCodeScanResult.Remark);
                else
                    writer.WriteNull("remark");

            if (userQRCodeScanResult.SchemeOption.IsSet)
                if (userQRCodeScanResult.SchemeOption.Value != null)
                    writer.WriteString("scheme", userQRCodeScanResult.Scheme);
                else
                    writer.WriteNull("scheme");
        }
    }
}
