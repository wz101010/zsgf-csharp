// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using ZSGF.Client.Client;

namespace ZSGF.Client.Model
{
    /// <summary>
    /// 请求更新访问令牌的模型
    /// </summary>
    public partial class AccessTokenPutRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccessTokenPutRequest" /> class.
        /// </summary>
        /// <param name="title">访问令牌的标题 (default to &quot;&quot;)</param>
        /// <param name="tags">访问令牌的标签 (default to &quot;&quot;)</param>
        /// <param name="description">访问令牌的描述 (default to &quot;&quot;)</param>
        /// <param name="permissions">访问令牌的权限 (default to &quot;&quot;)</param>
        /// <param name="enable">是否启用访问令牌</param>
        [JsonConstructor]
        public AccessTokenPutRequest(Option<string> title = default, Option<string> tags = default, Option<string> description = default, Option<string> permissions = default, Option<bool?> enable = default)
        {
            TitleOption = title;
            TagsOption = tags;
            DescriptionOption = description;
            PermissionsOption = permissions;
            EnableOption = enable;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TitleOption { get; private set; }

        /// <summary>
        /// 访问令牌的标题
        /// </summary>
        /// <value>访问令牌的标题</value>
        [JsonPropertyName("title")]
        public string Title { get { return this.TitleOption; } set { this.TitleOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Tags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TagsOption { get; private set; }

        /// <summary>
        /// 访问令牌的标签
        /// </summary>
        /// <value>访问令牌的标签</value>
        [JsonPropertyName("tags")]
        public string Tags { get { return this.TagsOption; } set { this.TagsOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DescriptionOption { get; private set; }

        /// <summary>
        /// 访问令牌的描述
        /// </summary>
        /// <value>访问令牌的描述</value>
        [JsonPropertyName("description")]
        public string Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Permissions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PermissionsOption { get; private set; }

        /// <summary>
        /// 访问令牌的权限
        /// </summary>
        /// <value>访问令牌的权限</value>
        [JsonPropertyName("permissions")]
        public string Permissions { get { return this.PermissionsOption; } set { this.PermissionsOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Enable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EnableOption { get; private set; }

        /// <summary>
        /// 是否启用访问令牌
        /// </summary>
        /// <value>是否启用访问令牌</value>
        [JsonPropertyName("enable")]
        public bool? Enable { get { return this.EnableOption; } set { this.EnableOption = new Option<bool?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccessTokenPutRequest {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AccessTokenPutRequest" />
    /// </summary>
    public class AccessTokenPutRequestJsonConverter : JsonConverter<AccessTokenPutRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="AccessTokenPutRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AccessTokenPutRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> title = default;
            Option<string> tags = default;
            Option<string> description = default;
            Option<string> permissions = default;
            Option<bool?> enable = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "title":
                            title = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "tags":
                            tags = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "description":
                            description = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "permissions":
                            permissions = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "enable":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                enable = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new AccessTokenPutRequest(title, tags, description, permissions, enable);
        }

        /// <summary>
        /// Serializes a <see cref="AccessTokenPutRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="accessTokenPutRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AccessTokenPutRequest accessTokenPutRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, accessTokenPutRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AccessTokenPutRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="accessTokenPutRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AccessTokenPutRequest accessTokenPutRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (accessTokenPutRequest.TitleOption.IsSet)
                if (accessTokenPutRequest.TitleOption.Value != null)
                    writer.WriteString("title", accessTokenPutRequest.Title);
                else
                    writer.WriteNull("title");

            if (accessTokenPutRequest.TagsOption.IsSet)
                if (accessTokenPutRequest.TagsOption.Value != null)
                    writer.WriteString("tags", accessTokenPutRequest.Tags);
                else
                    writer.WriteNull("tags");

            if (accessTokenPutRequest.DescriptionOption.IsSet)
                if (accessTokenPutRequest.DescriptionOption.Value != null)
                    writer.WriteString("description", accessTokenPutRequest.Description);
                else
                    writer.WriteNull("description");

            if (accessTokenPutRequest.PermissionsOption.IsSet)
                if (accessTokenPutRequest.PermissionsOption.Value != null)
                    writer.WriteString("permissions", accessTokenPutRequest.Permissions);
                else
                    writer.WriteNull("permissions");

            if (accessTokenPutRequest.EnableOption.IsSet)
                if (accessTokenPutRequest.EnableOption.Value != null)
                    writer.WriteBoolean("enable", accessTokenPutRequest.EnableOption.Value.Value);
                else
                    writer.WriteNull("enable");
        }
    }
}
