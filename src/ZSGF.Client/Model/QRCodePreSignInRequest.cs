// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using ZSGF.Client.Client;

namespace ZSGF.Client.Model
{
    /// <summary>
    /// QRCodePreSignInRequest
    /// </summary>
    public partial class QRCodePreSignInRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QRCodePreSignInRequest" /> class.
        /// </summary>
        /// <param name="scopes">授权范围，长度不能超过100个字符，只能包含字母、数字和逗号</param>
        /// <param name="remark">备注，长度不能超过200个字符</param>
        /// <param name="scheme">方案，长度不能超过50个字符，只能包含字母和数字</param>
        [JsonConstructor]
        public QRCodePreSignInRequest(Option<string> scopes = default, Option<string> remark = default, Option<string> scheme = default)
        {
            ScopesOption = scopes;
            RemarkOption = remark;
            SchemeOption = scheme;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Scopes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ScopesOption { get; private set; }

        /// <summary>
        /// 授权范围，长度不能超过100个字符，只能包含字母、数字和逗号
        /// </summary>
        /// <value>授权范围，长度不能超过100个字符，只能包含字母、数字和逗号</value>
        [JsonPropertyName("scopes")]
        public string Scopes { get { return this.ScopesOption; } set { this.ScopesOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Remark
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RemarkOption { get; private set; }

        /// <summary>
        /// 备注，长度不能超过200个字符
        /// </summary>
        /// <value>备注，长度不能超过200个字符</value>
        [JsonPropertyName("remark")]
        public string Remark { get { return this.RemarkOption; } set { this.RemarkOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Scheme
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SchemeOption { get; private set; }

        /// <summary>
        /// 方案，长度不能超过50个字符，只能包含字母和数字
        /// </summary>
        /// <value>方案，长度不能超过50个字符，只能包含字母和数字</value>
        [JsonPropertyName("scheme")]
        public string Scheme { get { return this.SchemeOption; } set { this.SchemeOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QRCodePreSignInRequest {\n");
            sb.Append("  Scopes: ").Append(Scopes).Append("\n");
            sb.Append("  Remark: ").Append(Remark).Append("\n");
            sb.Append("  Scheme: ").Append(Scheme).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Scopes (string) maxLength
            if (this.Scopes != null && this.Scopes.Length > 100)
            {
                yield return new ValidationResult("Invalid value for Scopes, length must be less than 100.", new [] { "Scopes" });
            }

            // Scopes (string) minLength
            if (this.Scopes != null && this.Scopes.Length < 0)
            {
                yield return new ValidationResult("Invalid value for Scopes, length must be greater than 0.", new [] { "Scopes" });
            }

            if (this.ScopesOption.Value != null) {
                // Scopes (string) pattern
                Regex regexScopes = new Regex(@"^[a-zA-Z0-9,]*$", RegexOptions.CultureInvariant);

                if (this.ScopesOption.Value != null &&!regexScopes.Match(this.ScopesOption.Value).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Scopes, must match a pattern of " + regexScopes, new [] { "Scopes" });
                }
            }

            // Remark (string) maxLength
            if (this.Remark != null && this.Remark.Length > 200)
            {
                yield return new ValidationResult("Invalid value for Remark, length must be less than 200.", new [] { "Remark" });
            }

            // Remark (string) minLength
            if (this.Remark != null && this.Remark.Length < 0)
            {
                yield return new ValidationResult("Invalid value for Remark, length must be greater than 0.", new [] { "Remark" });
            }

            // Scheme (string) maxLength
            if (this.Scheme != null && this.Scheme.Length > 50)
            {
                yield return new ValidationResult("Invalid value for Scheme, length must be less than 50.", new [] { "Scheme" });
            }

            // Scheme (string) minLength
            if (this.Scheme != null && this.Scheme.Length < 0)
            {
                yield return new ValidationResult("Invalid value for Scheme, length must be greater than 0.", new [] { "Scheme" });
            }

            if (this.SchemeOption.Value != null) {
                // Scheme (string) pattern
                Regex regexScheme = new Regex(@"^[a-zA-Z0-9]*$", RegexOptions.CultureInvariant);

                if (this.SchemeOption.Value != null &&!regexScheme.Match(this.SchemeOption.Value).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Scheme, must match a pattern of " + regexScheme, new [] { "Scheme" });
                }
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="QRCodePreSignInRequest" />
    /// </summary>
    public class QRCodePreSignInRequestJsonConverter : JsonConverter<QRCodePreSignInRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="QRCodePreSignInRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override QRCodePreSignInRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> scopes = default;
            Option<string> remark = default;
            Option<string> scheme = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "scopes":
                            scopes = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "remark":
                            remark = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "scheme":
                            scheme = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new QRCodePreSignInRequest(scopes, remark, scheme);
        }

        /// <summary>
        /// Serializes a <see cref="QRCodePreSignInRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="qRCodePreSignInRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, QRCodePreSignInRequest qRCodePreSignInRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, qRCodePreSignInRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="QRCodePreSignInRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="qRCodePreSignInRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, QRCodePreSignInRequest qRCodePreSignInRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (qRCodePreSignInRequest.ScopesOption.IsSet)
                if (qRCodePreSignInRequest.ScopesOption.Value != null)
                    writer.WriteString("scopes", qRCodePreSignInRequest.Scopes);
                else
                    writer.WriteNull("scopes");

            if (qRCodePreSignInRequest.RemarkOption.IsSet)
                if (qRCodePreSignInRequest.RemarkOption.Value != null)
                    writer.WriteString("remark", qRCodePreSignInRequest.Remark);
                else
                    writer.WriteNull("remark");

            if (qRCodePreSignInRequest.SchemeOption.IsSet)
                if (qRCodePreSignInRequest.SchemeOption.Value != null)
                    writer.WriteString("scheme", qRCodePreSignInRequest.Scheme);
                else
                    writer.WriteNull("scheme");
        }
    }
}
