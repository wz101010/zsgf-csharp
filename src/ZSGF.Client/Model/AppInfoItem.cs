// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using ZSGF.Client.Client;

namespace ZSGF.Client.Model
{
    /// <summary>
    /// AppInfoItem
    /// </summary>
    public partial class AppInfoItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppInfoItem" /> class.
        /// </summary>
        /// <param name="appKey">appKey</param>
        /// <param name="id">id</param>
        /// <param name="name">name</param>
        /// <param name="logo">logo</param>
        /// <param name="tags">tags</param>
        /// <param name="website">website</param>
        /// <param name="description">description</param>
        /// <param name="projectID">projectID</param>
        [JsonConstructor]
        public AppInfoItem(Option<string> appKey = default, Option<long?> id = default, Option<string> name = default, Option<string> logo = default, Option<string> tags = default, Option<string> website = default, Option<string> description = default, Option<long?> projectID = default)
        {
            AppKeyOption = appKey;
            IdOption = id;
            NameOption = name;
            LogoOption = logo;
            TagsOption = tags;
            WebsiteOption = website;
            DescriptionOption = description;
            ProjectIDOption = projectID;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AppKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AppKeyOption { get; private set; }

        /// <summary>
        /// Gets or Sets AppKey
        /// </summary>
        [JsonPropertyName("appKey")]
        public string AppKey { get { return this.AppKeyOption; } set { this.AppKeyOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public long? Id { get { return this.IdOption; } set { this.IdOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Logo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LogoOption { get; private set; }

        /// <summary>
        /// Gets or Sets Logo
        /// </summary>
        [JsonPropertyName("logo")]
        public string Logo { get { return this.LogoOption; } set { this.LogoOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Tags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TagsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [JsonPropertyName("tags")]
        public string Tags { get { return this.TagsOption; } set { this.TagsOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Website
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> WebsiteOption { get; private set; }

        /// <summary>
        /// Gets or Sets Website
        /// </summary>
        [JsonPropertyName("website")]
        public string Website { get { return this.WebsiteOption; } set { this.WebsiteOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ProjectID
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ProjectIDOption { get; private set; }

        /// <summary>
        /// Gets or Sets ProjectID
        /// </summary>
        [JsonPropertyName("projectID")]
        public long? ProjectID { get { return this.ProjectIDOption; } set { this.ProjectIDOption = new Option<long?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AppInfoItem {\n");
            sb.Append("  AppKey: ").Append(AppKey).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Logo: ").Append(Logo).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ProjectID: ").Append(ProjectID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AppInfoItem" />
    /// </summary>
    public class AppInfoItemJsonConverter : JsonConverter<AppInfoItem>
    {
        /// <summary>
        /// Deserializes json to <see cref="AppInfoItem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AppInfoItem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> appKey = default;
            Option<long?> id = default;
            Option<string> name = default;
            Option<string> logo = default;
            Option<string> tags = default;
            Option<string> website = default;
            Option<string> description = default;
            Option<long?> projectID = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "appKey":
                            appKey = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "logo":
                            logo = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "tags":
                            tags = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "website":
                            website = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "description":
                            description = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "projectID":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                projectID = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class AppInfoItem.");

            if (projectID.IsSet && projectID.Value == null)
                throw new ArgumentNullException(nameof(projectID), "Property is not nullable for class AppInfoItem.");

            return new AppInfoItem(appKey, id, name, logo, tags, website, description, projectID);
        }

        /// <summary>
        /// Serializes a <see cref="AppInfoItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="appInfoItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AppInfoItem appInfoItem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, appInfoItem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AppInfoItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="appInfoItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AppInfoItem appInfoItem, JsonSerializerOptions jsonSerializerOptions)
        {
            if (appInfoItem.AppKeyOption.IsSet)
                if (appInfoItem.AppKeyOption.Value != null)
                    writer.WriteString("appKey", appInfoItem.AppKey);
                else
                    writer.WriteNull("appKey");

            if (appInfoItem.IdOption.IsSet)
                writer.WriteNumber("id", appInfoItem.IdOption.Value.Value);

            if (appInfoItem.NameOption.IsSet)
                if (appInfoItem.NameOption.Value != null)
                    writer.WriteString("name", appInfoItem.Name);
                else
                    writer.WriteNull("name");

            if (appInfoItem.LogoOption.IsSet)
                if (appInfoItem.LogoOption.Value != null)
                    writer.WriteString("logo", appInfoItem.Logo);
                else
                    writer.WriteNull("logo");

            if (appInfoItem.TagsOption.IsSet)
                if (appInfoItem.TagsOption.Value != null)
                    writer.WriteString("tags", appInfoItem.Tags);
                else
                    writer.WriteNull("tags");

            if (appInfoItem.WebsiteOption.IsSet)
                if (appInfoItem.WebsiteOption.Value != null)
                    writer.WriteString("website", appInfoItem.Website);
                else
                    writer.WriteNull("website");

            if (appInfoItem.DescriptionOption.IsSet)
                if (appInfoItem.DescriptionOption.Value != null)
                    writer.WriteString("description", appInfoItem.Description);
                else
                    writer.WriteNull("description");

            if (appInfoItem.ProjectIDOption.IsSet)
                writer.WriteNumber("projectID", appInfoItem.ProjectIDOption.Value.Value);
        }
    }
}
