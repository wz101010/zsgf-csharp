// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using ZSGF.Client.Client;

namespace ZSGF.Client.Model
{
    /// <summary>
    /// AppUserConsentModel
    /// </summary>
    public partial class AppUserConsentModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppUserConsentModel" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="createDate">createDate</param>
        /// <param name="lastUpdate">lastUpdate</param>
        /// <param name="grantType">grantType</param>
        /// <param name="redirectUri">redirectUri</param>
        /// <param name="remark">remark</param>
        /// <param name="scopes">scopes</param>
        [JsonConstructor]
        public AppUserConsentModel(Option<long?> id = default, Option<DateTime?> createDate = default, Option<DateTime?> lastUpdate = default, Option<string> grantType = default, Option<string> redirectUri = default, Option<string> remark = default, Option<string> scopes = default)
        {
            IdOption = id;
            CreateDateOption = createDate;
            LastUpdateOption = lastUpdate;
            GrantTypeOption = grantType;
            RedirectUriOption = redirectUri;
            RemarkOption = remark;
            ScopesOption = scopes;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public long? Id { get { return this.IdOption; } set { this.IdOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of CreateDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreateDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [JsonPropertyName("createDate")]
        public DateTime? CreateDate { get { return this.CreateDateOption; } set { this.CreateDateOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of LastUpdate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastUpdateOption { get; private set; }

        /// <summary>
        /// Gets or Sets LastUpdate
        /// </summary>
        [JsonPropertyName("lastUpdate")]
        public DateTime? LastUpdate { get { return this.LastUpdateOption; } set { this.LastUpdateOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of GrantType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> GrantTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets GrantType
        /// </summary>
        [JsonPropertyName("grantType")]
        public string GrantType { get { return this.GrantTypeOption; } set { this.GrantTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RedirectUri
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RedirectUriOption { get; private set; }

        /// <summary>
        /// Gets or Sets RedirectUri
        /// </summary>
        [JsonPropertyName("redirectUri")]
        public string RedirectUri { get { return this.RedirectUriOption; } set { this.RedirectUriOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Remark
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RemarkOption { get; private set; }

        /// <summary>
        /// Gets or Sets Remark
        /// </summary>
        [JsonPropertyName("remark")]
        public string Remark { get { return this.RemarkOption; } set { this.RemarkOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Scopes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ScopesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Scopes
        /// </summary>
        [JsonPropertyName("scopes")]
        public string Scopes { get { return this.ScopesOption; } set { this.ScopesOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AppUserConsentModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  LastUpdate: ").Append(LastUpdate).Append("\n");
            sb.Append("  GrantType: ").Append(GrantType).Append("\n");
            sb.Append("  RedirectUri: ").Append(RedirectUri).Append("\n");
            sb.Append("  Remark: ").Append(Remark).Append("\n");
            sb.Append("  Scopes: ").Append(Scopes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AppUserConsentModel" />
    /// </summary>
    public class AppUserConsentModelJsonConverter : JsonConverter<AppUserConsentModel>
    {
        /// <summary>
        /// The format to use to serialize CreateDate
        /// </summary>
        public static string CreateDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize LastUpdate
        /// </summary>
        public static string LastUpdateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="AppUserConsentModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AppUserConsentModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> id = default;
            Option<DateTime?> createDate = default;
            Option<DateTime?> lastUpdate = default;
            Option<string> grantType = default;
            Option<string> redirectUri = default;
            Option<string> remark = default;
            Option<string> scopes = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "createDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "lastUpdate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lastUpdate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "grantType":
                            grantType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "redirectUri":
                            redirectUri = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "remark":
                            remark = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "scopes":
                            scopes = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class AppUserConsentModel.");

            if (createDate.IsSet && createDate.Value == null)
                throw new ArgumentNullException(nameof(createDate), "Property is not nullable for class AppUserConsentModel.");

            if (lastUpdate.IsSet && lastUpdate.Value == null)
                throw new ArgumentNullException(nameof(lastUpdate), "Property is not nullable for class AppUserConsentModel.");

            return new AppUserConsentModel(id, createDate, lastUpdate, grantType, redirectUri, remark, scopes);
        }

        /// <summary>
        /// Serializes a <see cref="AppUserConsentModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="appUserConsentModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AppUserConsentModel appUserConsentModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, appUserConsentModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AppUserConsentModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="appUserConsentModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AppUserConsentModel appUserConsentModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (appUserConsentModel.IdOption.IsSet)
                writer.WriteNumber("id", appUserConsentModel.IdOption.Value.Value);

            if (appUserConsentModel.CreateDateOption.IsSet)
                writer.WriteString("createDate", appUserConsentModel.CreateDateOption.Value.Value.ToString(CreateDateFormat));

            if (appUserConsentModel.LastUpdateOption.IsSet)
                writer.WriteString("lastUpdate", appUserConsentModel.LastUpdateOption.Value.Value.ToString(LastUpdateFormat));

            if (appUserConsentModel.GrantTypeOption.IsSet)
                if (appUserConsentModel.GrantTypeOption.Value != null)
                    writer.WriteString("grantType", appUserConsentModel.GrantType);
                else
                    writer.WriteNull("grantType");

            if (appUserConsentModel.RedirectUriOption.IsSet)
                if (appUserConsentModel.RedirectUriOption.Value != null)
                    writer.WriteString("redirectUri", appUserConsentModel.RedirectUri);
                else
                    writer.WriteNull("redirectUri");

            if (appUserConsentModel.RemarkOption.IsSet)
                if (appUserConsentModel.RemarkOption.Value != null)
                    writer.WriteString("remark", appUserConsentModel.Remark);
                else
                    writer.WriteNull("remark");

            if (appUserConsentModel.ScopesOption.IsSet)
                if (appUserConsentModel.ScopesOption.Value != null)
                    writer.WriteString("scopes", appUserConsentModel.Scopes);
                else
                    writer.WriteNull("scopes");
        }
    }
}
