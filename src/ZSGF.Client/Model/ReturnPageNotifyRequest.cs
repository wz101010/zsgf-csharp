// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using ZSGF.Client.Client;

namespace ZSGF.Client.Model
{
    /// <summary>
    /// 支付宝返回页面通知请求
    /// </summary>
    public partial class ReturnPageNotifyRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReturnPageNotifyRequest" /> class.
        /// </summary>
        /// <param name="appId">应用ID</param>
        /// <param name="authAppId">授权应用ID</param>
        /// <param name="charset">字符集</param>
        /// <param name="method">接口名称</param>
        /// <param name="outTradeNo">商户订单号</param>
        /// <param name="sellerId">卖家支付宝用户号</param>
        /// <param name="sign">签名</param>
        /// <param name="signType">签名类型</param>
        /// <param name="timestamp">时间戳</param>
        /// <param name="totalAmount">订单总金额</param>
        /// <param name="tradeNo">支付宝交易号</param>
        /// <param name="varVersion">接口版本</param>
        [JsonConstructor]
        public ReturnPageNotifyRequest(Option<string> appId = default, Option<string> authAppId = default, Option<string> charset = default, Option<string> method = default, Option<string> outTradeNo = default, Option<string> sellerId = default, Option<string> sign = default, Option<string> signType = default, Option<string> timestamp = default, Option<string> totalAmount = default, Option<string> tradeNo = default, Option<string> varVersion = default)
        {
            AppIdOption = appId;
            AuthAppIdOption = authAppId;
            CharsetOption = charset;
            MethodOption = method;
            OutTradeNoOption = outTradeNo;
            SellerIdOption = sellerId;
            SignOption = sign;
            SignTypeOption = signType;
            TimestampOption = timestamp;
            TotalAmountOption = totalAmount;
            TradeNoOption = tradeNo;
            VarVersionOption = varVersion;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AppId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AppIdOption { get; private set; }

        /// <summary>
        /// 应用ID
        /// </summary>
        /// <value>应用ID</value>
        [JsonPropertyName("app_id")]
        public string AppId { get { return this.AppIdOption; } set { this.AppIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AuthAppId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AuthAppIdOption { get; private set; }

        /// <summary>
        /// 授权应用ID
        /// </summary>
        /// <value>授权应用ID</value>
        [JsonPropertyName("auth_app_id")]
        public string AuthAppId { get { return this.AuthAppIdOption; } set { this.AuthAppIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Charset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CharsetOption { get; private set; }

        /// <summary>
        /// 字符集
        /// </summary>
        /// <value>字符集</value>
        [JsonPropertyName("charset")]
        public string Charset { get { return this.CharsetOption; } set { this.CharsetOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Method
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MethodOption { get; private set; }

        /// <summary>
        /// 接口名称
        /// </summary>
        /// <value>接口名称</value>
        [JsonPropertyName("method")]
        public string Method { get { return this.MethodOption; } set { this.MethodOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OutTradeNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OutTradeNoOption { get; private set; }

        /// <summary>
        /// 商户订单号
        /// </summary>
        /// <value>商户订单号</value>
        [JsonPropertyName("out_trade_no")]
        public string OutTradeNo { get { return this.OutTradeNoOption; } set { this.OutTradeNoOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SellerId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SellerIdOption { get; private set; }

        /// <summary>
        /// 卖家支付宝用户号
        /// </summary>
        /// <value>卖家支付宝用户号</value>
        [JsonPropertyName("seller_id")]
        public string SellerId { get { return this.SellerIdOption; } set { this.SellerIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Sign
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SignOption { get; private set; }

        /// <summary>
        /// 签名
        /// </summary>
        /// <value>签名</value>
        [JsonPropertyName("sign")]
        public string Sign { get { return this.SignOption; } set { this.SignOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SignType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SignTypeOption { get; private set; }

        /// <summary>
        /// 签名类型
        /// </summary>
        /// <value>签名类型</value>
        [JsonPropertyName("sign_type")]
        public string SignType { get { return this.SignTypeOption; } set { this.SignTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Timestamp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TimestampOption { get; private set; }

        /// <summary>
        /// 时间戳
        /// </summary>
        /// <value>时间戳</value>
        [JsonPropertyName("timestamp")]
        public string Timestamp { get { return this.TimestampOption; } set { this.TimestampOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TotalAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TotalAmountOption { get; private set; }

        /// <summary>
        /// 订单总金额
        /// </summary>
        /// <value>订单总金额</value>
        [JsonPropertyName("total_amount")]
        public string TotalAmount { get { return this.TotalAmountOption; } set { this.TotalAmountOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TradeNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TradeNoOption { get; private set; }

        /// <summary>
        /// 支付宝交易号
        /// </summary>
        /// <value>支付宝交易号</value>
        [JsonPropertyName("trade_no")]
        public string TradeNo { get { return this.TradeNoOption; } set { this.TradeNoOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of VarVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> VarVersionOption { get; private set; }

        /// <summary>
        /// 接口版本
        /// </summary>
        /// <value>接口版本</value>
        [JsonPropertyName("version")]
        public string VarVersion { get { return this.VarVersionOption; } set { this.VarVersionOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReturnPageNotifyRequest {\n");
            sb.Append("  AppId: ").Append(AppId).Append("\n");
            sb.Append("  AuthAppId: ").Append(AuthAppId).Append("\n");
            sb.Append("  Charset: ").Append(Charset).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  OutTradeNo: ").Append(OutTradeNo).Append("\n");
            sb.Append("  SellerId: ").Append(SellerId).Append("\n");
            sb.Append("  Sign: ").Append(Sign).Append("\n");
            sb.Append("  SignType: ").Append(SignType).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  TradeNo: ").Append(TradeNo).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ReturnPageNotifyRequest" />
    /// </summary>
    public class ReturnPageNotifyRequestJsonConverter : JsonConverter<ReturnPageNotifyRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="ReturnPageNotifyRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ReturnPageNotifyRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> appId = default;
            Option<string> authAppId = default;
            Option<string> charset = default;
            Option<string> method = default;
            Option<string> outTradeNo = default;
            Option<string> sellerId = default;
            Option<string> sign = default;
            Option<string> signType = default;
            Option<string> timestamp = default;
            Option<string> totalAmount = default;
            Option<string> tradeNo = default;
            Option<string> varVersion = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "app_id":
                            appId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "auth_app_id":
                            authAppId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "charset":
                            charset = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "method":
                            method = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "out_trade_no":
                            outTradeNo = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "seller_id":
                            sellerId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "sign":
                            sign = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "sign_type":
                            signType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "timestamp":
                            timestamp = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "total_amount":
                            totalAmount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "trade_no":
                            tradeNo = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "version":
                            varVersion = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new ReturnPageNotifyRequest(appId, authAppId, charset, method, outTradeNo, sellerId, sign, signType, timestamp, totalAmount, tradeNo, varVersion);
        }

        /// <summary>
        /// Serializes a <see cref="ReturnPageNotifyRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="returnPageNotifyRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ReturnPageNotifyRequest returnPageNotifyRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, returnPageNotifyRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ReturnPageNotifyRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="returnPageNotifyRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ReturnPageNotifyRequest returnPageNotifyRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (returnPageNotifyRequest.AppIdOption.IsSet)
                if (returnPageNotifyRequest.AppIdOption.Value != null)
                    writer.WriteString("app_id", returnPageNotifyRequest.AppId);
                else
                    writer.WriteNull("app_id");

            if (returnPageNotifyRequest.AuthAppIdOption.IsSet)
                if (returnPageNotifyRequest.AuthAppIdOption.Value != null)
                    writer.WriteString("auth_app_id", returnPageNotifyRequest.AuthAppId);
                else
                    writer.WriteNull("auth_app_id");

            if (returnPageNotifyRequest.CharsetOption.IsSet)
                if (returnPageNotifyRequest.CharsetOption.Value != null)
                    writer.WriteString("charset", returnPageNotifyRequest.Charset);
                else
                    writer.WriteNull("charset");

            if (returnPageNotifyRequest.MethodOption.IsSet)
                if (returnPageNotifyRequest.MethodOption.Value != null)
                    writer.WriteString("method", returnPageNotifyRequest.Method);
                else
                    writer.WriteNull("method");

            if (returnPageNotifyRequest.OutTradeNoOption.IsSet)
                if (returnPageNotifyRequest.OutTradeNoOption.Value != null)
                    writer.WriteString("out_trade_no", returnPageNotifyRequest.OutTradeNo);
                else
                    writer.WriteNull("out_trade_no");

            if (returnPageNotifyRequest.SellerIdOption.IsSet)
                if (returnPageNotifyRequest.SellerIdOption.Value != null)
                    writer.WriteString("seller_id", returnPageNotifyRequest.SellerId);
                else
                    writer.WriteNull("seller_id");

            if (returnPageNotifyRequest.SignOption.IsSet)
                if (returnPageNotifyRequest.SignOption.Value != null)
                    writer.WriteString("sign", returnPageNotifyRequest.Sign);
                else
                    writer.WriteNull("sign");

            if (returnPageNotifyRequest.SignTypeOption.IsSet)
                if (returnPageNotifyRequest.SignTypeOption.Value != null)
                    writer.WriteString("sign_type", returnPageNotifyRequest.SignType);
                else
                    writer.WriteNull("sign_type");

            if (returnPageNotifyRequest.TimestampOption.IsSet)
                if (returnPageNotifyRequest.TimestampOption.Value != null)
                    writer.WriteString("timestamp", returnPageNotifyRequest.Timestamp);
                else
                    writer.WriteNull("timestamp");

            if (returnPageNotifyRequest.TotalAmountOption.IsSet)
                if (returnPageNotifyRequest.TotalAmountOption.Value != null)
                    writer.WriteString("total_amount", returnPageNotifyRequest.TotalAmount);
                else
                    writer.WriteNull("total_amount");

            if (returnPageNotifyRequest.TradeNoOption.IsSet)
                if (returnPageNotifyRequest.TradeNoOption.Value != null)
                    writer.WriteString("trade_no", returnPageNotifyRequest.TradeNo);
                else
                    writer.WriteNull("trade_no");

            if (returnPageNotifyRequest.VarVersionOption.IsSet)
                if (returnPageNotifyRequest.VarVersionOption.Value != null)
                    writer.WriteString("version", returnPageNotifyRequest.VarVersion);
                else
                    writer.WriteNull("version");
        }
    }
}
