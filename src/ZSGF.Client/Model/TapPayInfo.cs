// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using ZSGF.Client.Client;

namespace ZSGF.Client.Model
{
    /// <summary>
    /// TapPayInfo
    /// </summary>
    public partial class TapPayInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TapPayInfo" /> class.
        /// </summary>
        /// <param name="paymentMediumType">paymentMediumType</param>
        /// <param name="totalDiscountAmount">totalDiscountAmount</param>
        /// <param name="totalDiscountName">totalDiscountName</param>
        [JsonConstructor]
        public TapPayInfo(Option<string> paymentMediumType = default, Option<string> totalDiscountAmount = default, Option<string> totalDiscountName = default)
        {
            PaymentMediumTypeOption = paymentMediumType;
            TotalDiscountAmountOption = totalDiscountAmount;
            TotalDiscountNameOption = totalDiscountName;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of PaymentMediumType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PaymentMediumTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets PaymentMediumType
        /// </summary>
        [JsonPropertyName("paymentMediumType")]
        public string PaymentMediumType { get { return this.PaymentMediumTypeOption; } set { this.PaymentMediumTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TotalDiscountAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TotalDiscountAmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets TotalDiscountAmount
        /// </summary>
        [JsonPropertyName("totalDiscountAmount")]
        public string TotalDiscountAmount { get { return this.TotalDiscountAmountOption; } set { this.TotalDiscountAmountOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TotalDiscountName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TotalDiscountNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets TotalDiscountName
        /// </summary>
        [JsonPropertyName("totalDiscountName")]
        public string TotalDiscountName { get { return this.TotalDiscountNameOption; } set { this.TotalDiscountNameOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TapPayInfo {\n");
            sb.Append("  PaymentMediumType: ").Append(PaymentMediumType).Append("\n");
            sb.Append("  TotalDiscountAmount: ").Append(TotalDiscountAmount).Append("\n");
            sb.Append("  TotalDiscountName: ").Append(TotalDiscountName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TapPayInfo" />
    /// </summary>
    public class TapPayInfoJsonConverter : JsonConverter<TapPayInfo>
    {
        /// <summary>
        /// Deserializes json to <see cref="TapPayInfo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TapPayInfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> paymentMediumType = default;
            Option<string> totalDiscountAmount = default;
            Option<string> totalDiscountName = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "paymentMediumType":
                            paymentMediumType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "totalDiscountAmount":
                            totalDiscountAmount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "totalDiscountName":
                            totalDiscountName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new TapPayInfo(paymentMediumType, totalDiscountAmount, totalDiscountName);
        }

        /// <summary>
        /// Serializes a <see cref="TapPayInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tapPayInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TapPayInfo tapPayInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, tapPayInfo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TapPayInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tapPayInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TapPayInfo tapPayInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (tapPayInfo.PaymentMediumTypeOption.IsSet)
                if (tapPayInfo.PaymentMediumTypeOption.Value != null)
                    writer.WriteString("paymentMediumType", tapPayInfo.PaymentMediumType);
                else
                    writer.WriteNull("paymentMediumType");

            if (tapPayInfo.TotalDiscountAmountOption.IsSet)
                if (tapPayInfo.TotalDiscountAmountOption.Value != null)
                    writer.WriteString("totalDiscountAmount", tapPayInfo.TotalDiscountAmount);
                else
                    writer.WriteNull("totalDiscountAmount");

            if (tapPayInfo.TotalDiscountNameOption.IsSet)
                if (tapPayInfo.TotalDiscountNameOption.Value != null)
                    writer.WriteString("totalDiscountName", tapPayInfo.TotalDiscountName);
                else
                    writer.WriteNull("totalDiscountName");
        }
    }
}
