// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using ZSGF.Client.Client;

namespace ZSGF.Client.Model
{
    /// <summary>
    /// CreateOrderRequest
    /// </summary>
    public partial class CreateOrderRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateOrderRequest" /> class.
        /// </summary>
        /// <param name="amount">amount</param>
        /// <param name="productName">productName</param>
        /// <param name="productType">productType</param>
        /// <param name="productID">productID</param>
        [JsonConstructor]
        public CreateOrderRequest(double amount, string productName, string productType, string productID)
        {
            Amount = amount;
            ProductName = productName;
            ProductType = productType;
            ProductID = productID;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [JsonPropertyName("amount")]
        public double Amount { get; set; }

        /// <summary>
        /// Gets or Sets ProductName
        /// </summary>
        [JsonPropertyName("productName")]
        public string ProductName { get; set; }

        /// <summary>
        /// Gets or Sets ProductType
        /// </summary>
        [JsonPropertyName("productType")]
        public string ProductType { get; set; }

        /// <summary>
        /// Gets or Sets ProductID
        /// </summary>
        [JsonPropertyName("productID")]
        public string ProductID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateOrderRequest {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  ProductType: ").Append(ProductType).Append("\n");
            sb.Append("  ProductID: ").Append(ProductID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Amount (double) minimum
            if (this.Amount < (double)0.01)
            {
                yield return new ValidationResult("Invalid value for Amount, must be a value greater than or equal to 0.01.", new [] { "Amount" });
            }

            // ProductName (string) minLength
            if (this.ProductName != null && this.ProductName.Length < 1)
            {
                yield return new ValidationResult("Invalid value for ProductName, length must be greater than 1.", new [] { "ProductName" });
            }

            // ProductType (string) minLength
            if (this.ProductType != null && this.ProductType.Length < 1)
            {
                yield return new ValidationResult("Invalid value for ProductType, length must be greater than 1.", new [] { "ProductType" });
            }

            // ProductID (string) minLength
            if (this.ProductID != null && this.ProductID.Length < 1)
            {
                yield return new ValidationResult("Invalid value for ProductID, length must be greater than 1.", new [] { "ProductID" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateOrderRequest" />
    /// </summary>
    public class CreateOrderRequestJsonConverter : JsonConverter<CreateOrderRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateOrderRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateOrderRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<double?> amount = default;
            Option<string> productName = default;
            Option<string> productType = default;
            Option<string> productID = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "amount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                amount = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "productName":
                            productName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "productType":
                            productType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "productID":
                            productID = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!amount.IsSet)
                throw new ArgumentException("Property is required for class CreateOrderRequest.", nameof(amount));

            if (!productName.IsSet)
                throw new ArgumentException("Property is required for class CreateOrderRequest.", nameof(productName));

            if (!productType.IsSet)
                throw new ArgumentException("Property is required for class CreateOrderRequest.", nameof(productType));

            if (!productID.IsSet)
                throw new ArgumentException("Property is required for class CreateOrderRequest.", nameof(productID));

            if (amount.IsSet && amount.Value == null)
                throw new ArgumentNullException(nameof(amount), "Property is not nullable for class CreateOrderRequest.");

            if (productName.IsSet && productName.Value == null)
                throw new ArgumentNullException(nameof(productName), "Property is not nullable for class CreateOrderRequest.");

            if (productType.IsSet && productType.Value == null)
                throw new ArgumentNullException(nameof(productType), "Property is not nullable for class CreateOrderRequest.");

            if (productID.IsSet && productID.Value == null)
                throw new ArgumentNullException(nameof(productID), "Property is not nullable for class CreateOrderRequest.");

            return new CreateOrderRequest(amount.Value.Value, productName.Value, productType.Value, productID.Value);
        }

        /// <summary>
        /// Serializes a <see cref="CreateOrderRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createOrderRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateOrderRequest createOrderRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createOrderRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateOrderRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createOrderRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateOrderRequest createOrderRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createOrderRequest.ProductName == null)
                throw new ArgumentNullException(nameof(createOrderRequest.ProductName), "Property is required for class CreateOrderRequest.");

            if (createOrderRequest.ProductType == null)
                throw new ArgumentNullException(nameof(createOrderRequest.ProductType), "Property is required for class CreateOrderRequest.");

            if (createOrderRequest.ProductID == null)
                throw new ArgumentNullException(nameof(createOrderRequest.ProductID), "Property is required for class CreateOrderRequest.");

            writer.WriteNumber("amount", createOrderRequest.Amount);

            writer.WriteString("productName", createOrderRequest.ProductName);

            writer.WriteString("productType", createOrderRequest.ProductType);

            writer.WriteString("productID", createOrderRequest.ProductID);
        }
    }
}
