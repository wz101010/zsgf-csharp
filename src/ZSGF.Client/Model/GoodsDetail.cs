// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using ZSGF.Client.Client;

namespace ZSGF.Client.Model
{
    /// <summary>
    /// GoodsDetail
    /// </summary>
    public partial class GoodsDetail : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GoodsDetail" /> class.
        /// </summary>
        /// <param name="alipayGoodsId">alipayGoodsId</param>
        /// <param name="body">body</param>
        /// <param name="categoriesTree">categoriesTree</param>
        /// <param name="goodsCategory">goodsCategory</param>
        /// <param name="goodsId">goodsId</param>
        /// <param name="goodsName">goodsName</param>
        /// <param name="outItemId">outItemId</param>
        /// <param name="outSkuId">outSkuId</param>
        /// <param name="price">price</param>
        /// <param name="quantity">quantity</param>
        /// <param name="showUrl">showUrl</param>
        [JsonConstructor]
        public GoodsDetail(Option<string> alipayGoodsId = default, Option<string> body = default, Option<string> categoriesTree = default, Option<string> goodsCategory = default, Option<string> goodsId = default, Option<string> goodsName = default, Option<string> outItemId = default, Option<string> outSkuId = default, Option<string> price = default, Option<long?> quantity = default, Option<string> showUrl = default)
        {
            AlipayGoodsIdOption = alipayGoodsId;
            BodyOption = body;
            CategoriesTreeOption = categoriesTree;
            GoodsCategoryOption = goodsCategory;
            GoodsIdOption = goodsId;
            GoodsNameOption = goodsName;
            OutItemIdOption = outItemId;
            OutSkuIdOption = outSkuId;
            PriceOption = price;
            QuantityOption = quantity;
            ShowUrlOption = showUrl;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AlipayGoodsId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AlipayGoodsIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets AlipayGoodsId
        /// </summary>
        [JsonPropertyName("alipayGoodsId")]
        public string AlipayGoodsId { get { return this.AlipayGoodsIdOption; } set { this.AlipayGoodsIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Body
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BodyOption { get; private set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [JsonPropertyName("body")]
        public string Body { get { return this.BodyOption; } set { this.BodyOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CategoriesTree
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CategoriesTreeOption { get; private set; }

        /// <summary>
        /// Gets or Sets CategoriesTree
        /// </summary>
        [JsonPropertyName("categoriesTree")]
        public string CategoriesTree { get { return this.CategoriesTreeOption; } set { this.CategoriesTreeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of GoodsCategory
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> GoodsCategoryOption { get; private set; }

        /// <summary>
        /// Gets or Sets GoodsCategory
        /// </summary>
        [JsonPropertyName("goodsCategory")]
        public string GoodsCategory { get { return this.GoodsCategoryOption; } set { this.GoodsCategoryOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of GoodsId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> GoodsIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets GoodsId
        /// </summary>
        [JsonPropertyName("goodsId")]
        public string GoodsId { get { return this.GoodsIdOption; } set { this.GoodsIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of GoodsName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> GoodsNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets GoodsName
        /// </summary>
        [JsonPropertyName("goodsName")]
        public string GoodsName { get { return this.GoodsNameOption; } set { this.GoodsNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OutItemId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OutItemIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets OutItemId
        /// </summary>
        [JsonPropertyName("outItemId")]
        public string OutItemId { get { return this.OutItemIdOption; } set { this.OutItemIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OutSkuId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OutSkuIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets OutSkuId
        /// </summary>
        [JsonPropertyName("outSkuId")]
        public string OutSkuId { get { return this.OutSkuIdOption; } set { this.OutSkuIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Price
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PriceOption { get; private set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [JsonPropertyName("price")]
        public string Price { get { return this.PriceOption; } set { this.PriceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Quantity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> QuantityOption { get; private set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [JsonPropertyName("quantity")]
        public long? Quantity { get { return this.QuantityOption; } set { this.QuantityOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of ShowUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShowUrlOption { get; private set; }

        /// <summary>
        /// Gets or Sets ShowUrl
        /// </summary>
        [JsonPropertyName("showUrl")]
        public string ShowUrl { get { return this.ShowUrlOption; } set { this.ShowUrlOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GoodsDetail {\n");
            sb.Append("  AlipayGoodsId: ").Append(AlipayGoodsId).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  CategoriesTree: ").Append(CategoriesTree).Append("\n");
            sb.Append("  GoodsCategory: ").Append(GoodsCategory).Append("\n");
            sb.Append("  GoodsId: ").Append(GoodsId).Append("\n");
            sb.Append("  GoodsName: ").Append(GoodsName).Append("\n");
            sb.Append("  OutItemId: ").Append(OutItemId).Append("\n");
            sb.Append("  OutSkuId: ").Append(OutSkuId).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  ShowUrl: ").Append(ShowUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GoodsDetail" />
    /// </summary>
    public class GoodsDetailJsonConverter : JsonConverter<GoodsDetail>
    {
        /// <summary>
        /// Deserializes json to <see cref="GoodsDetail" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GoodsDetail Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> alipayGoodsId = default;
            Option<string> body = default;
            Option<string> categoriesTree = default;
            Option<string> goodsCategory = default;
            Option<string> goodsId = default;
            Option<string> goodsName = default;
            Option<string> outItemId = default;
            Option<string> outSkuId = default;
            Option<string> price = default;
            Option<long?> quantity = default;
            Option<string> showUrl = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "alipayGoodsId":
                            alipayGoodsId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "body":
                            body = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "categoriesTree":
                            categoriesTree = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "goodsCategory":
                            goodsCategory = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "goodsId":
                            goodsId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "goodsName":
                            goodsName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "outItemId":
                            outItemId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "outSkuId":
                            outSkuId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "price":
                            price = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "quantity":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                quantity = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "showUrl":
                            showUrl = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (quantity.IsSet && quantity.Value == null)
                throw new ArgumentNullException(nameof(quantity), "Property is not nullable for class GoodsDetail.");

            return new GoodsDetail(alipayGoodsId, body, categoriesTree, goodsCategory, goodsId, goodsName, outItemId, outSkuId, price, quantity, showUrl);
        }

        /// <summary>
        /// Serializes a <see cref="GoodsDetail" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="goodsDetail"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GoodsDetail goodsDetail, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, goodsDetail, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GoodsDetail" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="goodsDetail"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GoodsDetail goodsDetail, JsonSerializerOptions jsonSerializerOptions)
        {
            if (goodsDetail.AlipayGoodsIdOption.IsSet)
                if (goodsDetail.AlipayGoodsIdOption.Value != null)
                    writer.WriteString("alipayGoodsId", goodsDetail.AlipayGoodsId);
                else
                    writer.WriteNull("alipayGoodsId");

            if (goodsDetail.BodyOption.IsSet)
                if (goodsDetail.BodyOption.Value != null)
                    writer.WriteString("body", goodsDetail.Body);
                else
                    writer.WriteNull("body");

            if (goodsDetail.CategoriesTreeOption.IsSet)
                if (goodsDetail.CategoriesTreeOption.Value != null)
                    writer.WriteString("categoriesTree", goodsDetail.CategoriesTree);
                else
                    writer.WriteNull("categoriesTree");

            if (goodsDetail.GoodsCategoryOption.IsSet)
                if (goodsDetail.GoodsCategoryOption.Value != null)
                    writer.WriteString("goodsCategory", goodsDetail.GoodsCategory);
                else
                    writer.WriteNull("goodsCategory");

            if (goodsDetail.GoodsIdOption.IsSet)
                if (goodsDetail.GoodsIdOption.Value != null)
                    writer.WriteString("goodsId", goodsDetail.GoodsId);
                else
                    writer.WriteNull("goodsId");

            if (goodsDetail.GoodsNameOption.IsSet)
                if (goodsDetail.GoodsNameOption.Value != null)
                    writer.WriteString("goodsName", goodsDetail.GoodsName);
                else
                    writer.WriteNull("goodsName");

            if (goodsDetail.OutItemIdOption.IsSet)
                if (goodsDetail.OutItemIdOption.Value != null)
                    writer.WriteString("outItemId", goodsDetail.OutItemId);
                else
                    writer.WriteNull("outItemId");

            if (goodsDetail.OutSkuIdOption.IsSet)
                if (goodsDetail.OutSkuIdOption.Value != null)
                    writer.WriteString("outSkuId", goodsDetail.OutSkuId);
                else
                    writer.WriteNull("outSkuId");

            if (goodsDetail.PriceOption.IsSet)
                if (goodsDetail.PriceOption.Value != null)
                    writer.WriteString("price", goodsDetail.Price);
                else
                    writer.WriteNull("price");

            if (goodsDetail.QuantityOption.IsSet)
                writer.WriteNumber("quantity", goodsDetail.QuantityOption.Value.Value);

            if (goodsDetail.ShowUrlOption.IsSet)
                if (goodsDetail.ShowUrlOption.Value != null)
                    writer.WriteString("showUrl", goodsDetail.ShowUrl);
                else
                    writer.WriteNull("showUrl");
        }
    }
}
