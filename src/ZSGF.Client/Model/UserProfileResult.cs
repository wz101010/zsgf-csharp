// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using ZSGF.Client.Client;

namespace ZSGF.Client.Model
{
    /// <summary>
    /// UserProfileResult
    /// </summary>
    public partial class UserProfileResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserProfileResult" /> class.
        /// </summary>
        /// <param name="user">user</param>
        /// <param name="currencies">currencies</param>
        /// <param name="role">role</param>
        [JsonConstructor]
        public UserProfileResult(Option<User> user = default, Option<List<UserCurrency>> currencies = default, Option<string> role = default)
        {
            UserOption = user;
            CurrenciesOption = currencies;
            RoleOption = role;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of User
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<User> UserOption { get; private set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [JsonPropertyName("user")]
        public User User { get { return this.UserOption; } set { this.UserOption = new Option<User>(value); } }

        /// <summary>
        /// Used to track the state of Currencies
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<UserCurrency>> CurrenciesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Currencies
        /// </summary>
        [JsonPropertyName("currencies")]
        public List<UserCurrency> Currencies { get { return this.CurrenciesOption; } set { this.CurrenciesOption = new Option<List<UserCurrency>>(value); } }

        /// <summary>
        /// Used to track the state of Role
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RoleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [JsonPropertyName("role")]
        public string Role { get { return this.RoleOption; } set { this.RoleOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserProfileResult {\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Currencies: ").Append(Currencies).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserProfileResult" />
    /// </summary>
    public class UserProfileResultJsonConverter : JsonConverter<UserProfileResult>
    {
        /// <summary>
        /// Deserializes json to <see cref="UserProfileResult" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UserProfileResult Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<User> user = default;
            Option<List<UserCurrency>> currencies = default;
            Option<string> role = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "user":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                user = new Option<User>(JsonSerializer.Deserialize<User>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "currencies":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                currencies = new Option<List<UserCurrency>>(JsonSerializer.Deserialize<List<UserCurrency>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "role":
                            role = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (user.IsSet && user.Value == null)
                throw new ArgumentNullException(nameof(user), "Property is not nullable for class UserProfileResult.");

            return new UserProfileResult(user, currencies, role);
        }

        /// <summary>
        /// Serializes a <see cref="UserProfileResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userProfileResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UserProfileResult userProfileResult, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, userProfileResult, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UserProfileResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userProfileResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UserProfileResult userProfileResult, JsonSerializerOptions jsonSerializerOptions)
        {
            if (userProfileResult.UserOption.IsSet && userProfileResult.User == null)
                throw new ArgumentNullException(nameof(userProfileResult.User), "Property is required for class UserProfileResult.");

            if (userProfileResult.UserOption.IsSet)
            {
                writer.WritePropertyName("user");
                JsonSerializer.Serialize(writer, userProfileResult.User, jsonSerializerOptions);
            }
            if (userProfileResult.CurrenciesOption.IsSet)
                if (userProfileResult.CurrenciesOption.Value != null)
                {
                    writer.WritePropertyName("currencies");
                    JsonSerializer.Serialize(writer, userProfileResult.Currencies, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("currencies");
            if (userProfileResult.RoleOption.IsSet)
                if (userProfileResult.RoleOption.Value != null)
                    writer.WriteString("role", userProfileResult.Role);
                else
                    writer.WriteNull("role");
        }
    }
}
