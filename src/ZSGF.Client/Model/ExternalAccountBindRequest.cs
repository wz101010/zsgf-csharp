// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using ZSGF.Client.Client;

namespace ZSGF.Client.Model
{
    /// <summary>
    /// ExternalAccountBindRequest
    /// </summary>
    public partial class ExternalAccountBindRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalAccountBindRequest" /> class.
        /// </summary>
        /// <param name="unionID">unionID</param>
        /// <param name="platform">platform</param>
        /// <param name="platformName">platformName</param>
        /// <param name="avatar">avatar</param>
        /// <param name="data">data</param>
        [JsonConstructor]
        public ExternalAccountBindRequest(string unionID, string platform, string platformName, Option<string> avatar = default, Option<string> data = default)
        {
            UnionID = unionID;
            Platform = platform;
            PlatformName = platformName;
            AvatarOption = avatar;
            DataOption = data;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets UnionID
        /// </summary>
        [JsonPropertyName("unionID")]
        public string UnionID { get; set; }

        /// <summary>
        /// Gets or Sets Platform
        /// </summary>
        [JsonPropertyName("platform")]
        public string Platform { get; set; }

        /// <summary>
        /// Gets or Sets PlatformName
        /// </summary>
        [JsonPropertyName("platformName")]
        public string PlatformName { get; set; }

        /// <summary>
        /// Used to track the state of Avatar
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AvatarOption { get; private set; }

        /// <summary>
        /// Gets or Sets Avatar
        /// </summary>
        [JsonPropertyName("avatar")]
        public string Avatar { get { return this.AvatarOption; } set { this.AvatarOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Data
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DataOption { get; private set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [JsonPropertyName("data")]
        public string Data { get { return this.DataOption; } set { this.DataOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExternalAccountBindRequest {\n");
            sb.Append("  UnionID: ").Append(UnionID).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  PlatformName: ").Append(PlatformName).Append("\n");
            sb.Append("  Avatar: ").Append(Avatar).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // UnionID (string) minLength
            if (this.UnionID != null && this.UnionID.Length < 1)
            {
                yield return new ValidationResult("Invalid value for UnionID, length must be greater than 1.", new [] { "UnionID" });
            }

            // Platform (string) minLength
            if (this.Platform != null && this.Platform.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Platform, length must be greater than 1.", new [] { "Platform" });
            }

            // PlatformName (string) minLength
            if (this.PlatformName != null && this.PlatformName.Length < 1)
            {
                yield return new ValidationResult("Invalid value for PlatformName, length must be greater than 1.", new [] { "PlatformName" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ExternalAccountBindRequest" />
    /// </summary>
    public class ExternalAccountBindRequestJsonConverter : JsonConverter<ExternalAccountBindRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="ExternalAccountBindRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ExternalAccountBindRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> unionID = default;
            Option<string> platform = default;
            Option<string> platformName = default;
            Option<string> avatar = default;
            Option<string> data = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "unionID":
                            unionID = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "platform":
                            platform = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "platformName":
                            platformName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "avatar":
                            avatar = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "data":
                            data = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!unionID.IsSet)
                throw new ArgumentException("Property is required for class ExternalAccountBindRequest.", nameof(unionID));

            if (!platform.IsSet)
                throw new ArgumentException("Property is required for class ExternalAccountBindRequest.", nameof(platform));

            if (!platformName.IsSet)
                throw new ArgumentException("Property is required for class ExternalAccountBindRequest.", nameof(platformName));

            if (unionID.IsSet && unionID.Value == null)
                throw new ArgumentNullException(nameof(unionID), "Property is not nullable for class ExternalAccountBindRequest.");

            if (platform.IsSet && platform.Value == null)
                throw new ArgumentNullException(nameof(platform), "Property is not nullable for class ExternalAccountBindRequest.");

            if (platformName.IsSet && platformName.Value == null)
                throw new ArgumentNullException(nameof(platformName), "Property is not nullable for class ExternalAccountBindRequest.");

            return new ExternalAccountBindRequest(unionID.Value, platform.Value, platformName.Value, avatar, data);
        }

        /// <summary>
        /// Serializes a <see cref="ExternalAccountBindRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="externalAccountBindRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ExternalAccountBindRequest externalAccountBindRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, externalAccountBindRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ExternalAccountBindRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="externalAccountBindRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ExternalAccountBindRequest externalAccountBindRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (externalAccountBindRequest.UnionID == null)
                throw new ArgumentNullException(nameof(externalAccountBindRequest.UnionID), "Property is required for class ExternalAccountBindRequest.");

            if (externalAccountBindRequest.Platform == null)
                throw new ArgumentNullException(nameof(externalAccountBindRequest.Platform), "Property is required for class ExternalAccountBindRequest.");

            if (externalAccountBindRequest.PlatformName == null)
                throw new ArgumentNullException(nameof(externalAccountBindRequest.PlatformName), "Property is required for class ExternalAccountBindRequest.");

            writer.WriteString("unionID", externalAccountBindRequest.UnionID);

            writer.WriteString("platform", externalAccountBindRequest.Platform);

            writer.WriteString("platformName", externalAccountBindRequest.PlatformName);

            if (externalAccountBindRequest.AvatarOption.IsSet)
                if (externalAccountBindRequest.AvatarOption.Value != null)
                    writer.WriteString("avatar", externalAccountBindRequest.Avatar);
                else
                    writer.WriteNull("avatar");

            if (externalAccountBindRequest.DataOption.IsSet)
                if (externalAccountBindRequest.DataOption.Value != null)
                    writer.WriteString("data", externalAccountBindRequest.Data);
                else
                    writer.WriteNull("data");
        }
    }
}
