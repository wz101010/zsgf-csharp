// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using ZSGF.Client.Client;

namespace ZSGF.Client.Model
{
    /// <summary>
    /// EnterprisePayInfo
    /// </summary>
    public partial class EnterprisePayInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnterprisePayInfo" /> class.
        /// </summary>
        /// <param name="bizInfo">bizInfo</param>
        /// <param name="invoiceAmount">invoiceAmount</param>
        /// <param name="isUseEnterprisePay">isUseEnterprisePay</param>
        [JsonConstructor]
        public EnterprisePayInfo(Option<string> bizInfo = default, Option<string> invoiceAmount = default, Option<bool?> isUseEnterprisePay = default)
        {
            BizInfoOption = bizInfo;
            InvoiceAmountOption = invoiceAmount;
            IsUseEnterprisePayOption = isUseEnterprisePay;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of BizInfo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BizInfoOption { get; private set; }

        /// <summary>
        /// Gets or Sets BizInfo
        /// </summary>
        [JsonPropertyName("bizInfo")]
        public string BizInfo { get { return this.BizInfoOption; } set { this.BizInfoOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of InvoiceAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> InvoiceAmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets InvoiceAmount
        /// </summary>
        [JsonPropertyName("invoiceAmount")]
        public string InvoiceAmount { get { return this.InvoiceAmountOption; } set { this.InvoiceAmountOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of IsUseEnterprisePay
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsUseEnterprisePayOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsUseEnterprisePay
        /// </summary>
        [JsonPropertyName("isUseEnterprisePay")]
        public bool? IsUseEnterprisePay { get { return this.IsUseEnterprisePayOption; } set { this.IsUseEnterprisePayOption = new Option<bool?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EnterprisePayInfo {\n");
            sb.Append("  BizInfo: ").Append(BizInfo).Append("\n");
            sb.Append("  InvoiceAmount: ").Append(InvoiceAmount).Append("\n");
            sb.Append("  IsUseEnterprisePay: ").Append(IsUseEnterprisePay).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EnterprisePayInfo" />
    /// </summary>
    public class EnterprisePayInfoJsonConverter : JsonConverter<EnterprisePayInfo>
    {
        /// <summary>
        /// Deserializes json to <see cref="EnterprisePayInfo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EnterprisePayInfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> bizInfo = default;
            Option<string> invoiceAmount = default;
            Option<bool?> isUseEnterprisePay = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "bizInfo":
                            bizInfo = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "invoiceAmount":
                            invoiceAmount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "isUseEnterprisePay":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isUseEnterprisePay = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (isUseEnterprisePay.IsSet && isUseEnterprisePay.Value == null)
                throw new ArgumentNullException(nameof(isUseEnterprisePay), "Property is not nullable for class EnterprisePayInfo.");

            return new EnterprisePayInfo(bizInfo, invoiceAmount, isUseEnterprisePay);
        }

        /// <summary>
        /// Serializes a <see cref="EnterprisePayInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="enterprisePayInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EnterprisePayInfo enterprisePayInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, enterprisePayInfo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EnterprisePayInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="enterprisePayInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EnterprisePayInfo enterprisePayInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (enterprisePayInfo.BizInfoOption.IsSet)
                if (enterprisePayInfo.BizInfoOption.Value != null)
                    writer.WriteString("bizInfo", enterprisePayInfo.BizInfo);
                else
                    writer.WriteNull("bizInfo");

            if (enterprisePayInfo.InvoiceAmountOption.IsSet)
                if (enterprisePayInfo.InvoiceAmountOption.Value != null)
                    writer.WriteString("invoiceAmount", enterprisePayInfo.InvoiceAmount);
                else
                    writer.WriteNull("invoiceAmount");

            if (enterprisePayInfo.IsUseEnterprisePayOption.IsSet)
                writer.WriteBoolean("isUseEnterprisePay", enterprisePayInfo.IsUseEnterprisePayOption.Value.Value);
        }
    }
}
