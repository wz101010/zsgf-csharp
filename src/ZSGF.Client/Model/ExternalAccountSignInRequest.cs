// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using ZSGF.Client.Client;

namespace ZSGF.Client.Model
{
    /// <summary>
    /// ExternalAccountSignInRequest
    /// </summary>
    public partial class ExternalAccountSignInRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalAccountSignInRequest" /> class.
        /// </summary>
        /// <param name="unionID">UnionID，长度必须在1到50个字符之间，只能包含字母、数字、下划线和连字符</param>
        /// <param name="platform">平台，长度必须在1到20个字符之间，只能包含字母和数字</param>
        /// <param name="twoFactorCode">双因素认证代码，如果启用双因素认证登录，则必填，长度必须为6个字符，只能包含数字</param>
        [JsonConstructor]
        public ExternalAccountSignInRequest(string unionID, string platform, Option<string> twoFactorCode = default)
        {
            UnionID = unionID;
            Platform = platform;
            TwoFactorCodeOption = twoFactorCode;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// UnionID，长度必须在1到50个字符之间，只能包含字母、数字、下划线和连字符
        /// </summary>
        /// <value>UnionID，长度必须在1到50个字符之间，只能包含字母、数字、下划线和连字符</value>
        [JsonPropertyName("unionID")]
        public string UnionID { get; set; }

        /// <summary>
        /// 平台，长度必须在1到20个字符之间，只能包含字母和数字
        /// </summary>
        /// <value>平台，长度必须在1到20个字符之间，只能包含字母和数字</value>
        [JsonPropertyName("platform")]
        public string Platform { get; set; }

        /// <summary>
        /// Used to track the state of TwoFactorCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TwoFactorCodeOption { get; private set; }

        /// <summary>
        /// 双因素认证代码，如果启用双因素认证登录，则必填，长度必须为6个字符，只能包含数字
        /// </summary>
        /// <value>双因素认证代码，如果启用双因素认证登录，则必填，长度必须为6个字符，只能包含数字</value>
        [JsonPropertyName("twoFactorCode")]
        public string TwoFactorCode { get { return this.TwoFactorCodeOption; } set { this.TwoFactorCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExternalAccountSignInRequest {\n");
            sb.Append("  UnionID: ").Append(UnionID).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  TwoFactorCode: ").Append(TwoFactorCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // UnionID (string) maxLength
            if (this.UnionID != null && this.UnionID.Length > 50)
            {
                yield return new ValidationResult("Invalid value for UnionID, length must be less than 50.", new [] { "UnionID" });
            }

            // UnionID (string) minLength
            if (this.UnionID != null && this.UnionID.Length < 1)
            {
                yield return new ValidationResult("Invalid value for UnionID, length must be greater than 1.", new [] { "UnionID" });
            }

            if (this.UnionID != null) {
                // UnionID (string) pattern
                Regex regexUnionID = new Regex(@"^[a-zA-Z0-9_-]*$", RegexOptions.CultureInvariant);

                if (!regexUnionID.Match(this.UnionID).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UnionID, must match a pattern of " + regexUnionID, new [] { "UnionID" });
                }
            }

            // Platform (string) maxLength
            if (this.Platform != null && this.Platform.Length > 20)
            {
                yield return new ValidationResult("Invalid value for Platform, length must be less than 20.", new [] { "Platform" });
            }

            // Platform (string) minLength
            if (this.Platform != null && this.Platform.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Platform, length must be greater than 1.", new [] { "Platform" });
            }

            if (this.Platform != null) {
                // Platform (string) pattern
                Regex regexPlatform = new Regex(@"^[a-zA-Z0-9]*$", RegexOptions.CultureInvariant);

                if (!regexPlatform.Match(this.Platform).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Platform, must match a pattern of " + regexPlatform, new [] { "Platform" });
                }
            }

            // TwoFactorCode (string) maxLength
            if (this.TwoFactorCode != null && this.TwoFactorCode.Length > 6)
            {
                yield return new ValidationResult("Invalid value for TwoFactorCode, length must be less than 6.", new [] { "TwoFactorCode" });
            }

            // TwoFactorCode (string) minLength
            if (this.TwoFactorCode != null && this.TwoFactorCode.Length < 6)
            {
                yield return new ValidationResult("Invalid value for TwoFactorCode, length must be greater than 6.", new [] { "TwoFactorCode" });
            }

            if (this.TwoFactorCodeOption.Value != null) {
                // TwoFactorCode (string) pattern
                Regex regexTwoFactorCode = new Regex(@"^[0-9]*$", RegexOptions.CultureInvariant);

                if (this.TwoFactorCodeOption.Value != null &&!regexTwoFactorCode.Match(this.TwoFactorCodeOption.Value).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TwoFactorCode, must match a pattern of " + regexTwoFactorCode, new [] { "TwoFactorCode" });
                }
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ExternalAccountSignInRequest" />
    /// </summary>
    public class ExternalAccountSignInRequestJsonConverter : JsonConverter<ExternalAccountSignInRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="ExternalAccountSignInRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ExternalAccountSignInRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> unionID = default;
            Option<string> platform = default;
            Option<string> twoFactorCode = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "unionID":
                            unionID = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "platform":
                            platform = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "twoFactorCode":
                            twoFactorCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!unionID.IsSet)
                throw new ArgumentException("Property is required for class ExternalAccountSignInRequest.", nameof(unionID));

            if (!platform.IsSet)
                throw new ArgumentException("Property is required for class ExternalAccountSignInRequest.", nameof(platform));

            if (unionID.IsSet && unionID.Value == null)
                throw new ArgumentNullException(nameof(unionID), "Property is not nullable for class ExternalAccountSignInRequest.");

            if (platform.IsSet && platform.Value == null)
                throw new ArgumentNullException(nameof(platform), "Property is not nullable for class ExternalAccountSignInRequest.");

            return new ExternalAccountSignInRequest(unionID.Value, platform.Value, twoFactorCode);
        }

        /// <summary>
        /// Serializes a <see cref="ExternalAccountSignInRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="externalAccountSignInRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ExternalAccountSignInRequest externalAccountSignInRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, externalAccountSignInRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ExternalAccountSignInRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="externalAccountSignInRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ExternalAccountSignInRequest externalAccountSignInRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (externalAccountSignInRequest.UnionID == null)
                throw new ArgumentNullException(nameof(externalAccountSignInRequest.UnionID), "Property is required for class ExternalAccountSignInRequest.");

            if (externalAccountSignInRequest.Platform == null)
                throw new ArgumentNullException(nameof(externalAccountSignInRequest.Platform), "Property is required for class ExternalAccountSignInRequest.");

            writer.WriteString("unionID", externalAccountSignInRequest.UnionID);

            writer.WriteString("platform", externalAccountSignInRequest.Platform);

            if (externalAccountSignInRequest.TwoFactorCodeOption.IsSet)
                if (externalAccountSignInRequest.TwoFactorCodeOption.Value != null)
                    writer.WriteString("twoFactorCode", externalAccountSignInRequest.TwoFactorCode);
                else
                    writer.WriteNull("twoFactorCode");
        }
    }
}
