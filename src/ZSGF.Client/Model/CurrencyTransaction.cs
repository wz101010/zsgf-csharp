// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using ZSGF.Client.Client;

namespace ZSGF.Client.Model
{
    /// <summary>
    /// 货币交易记录实体，用于记录用户的货币交易详情。
    /// </summary>
    public partial class CurrencyTransaction : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrencyTransaction" /> class.
        /// </summary>
        /// <param name="id">货币交易记录的唯一标识符。</param>
        /// <param name="fromUserID">发起交易的发送方用户ID，若为转账交易时必填。</param>
        /// <param name="userID">进行货币交易的用户ID。</param>
        /// <param name="transactionType">货币交易的类型，例如 &#39;消费&#39;, &#39;奖励&#39;, &#39;兑换&#39;, &#39;转账&#39; 等。</param>
        /// <param name="currencyType">交易的货币类型，例如 &#39;USD&#39;, &#39;CNY&#39; 等。</param>
        /// <param name="currencyChange">货币的变动数量，正数表示增加，负数表示减少。</param>
        /// <param name="currencyBalance">交易完成后的货币余额。</param>
        /// <param name="description">描述货币变动的具体原因或相关交易详情。</param>
        /// <param name="status">货币交易的当前状态，例如 &#39;成功&#39;, &#39;失败&#39;, &#39;待审核&#39; 等。</param>
        /// <param name="remark">交易的额外信息或管理员的备注。</param>
        /// <param name="tags">用于分类或标记交易的标签。</param>
        /// <param name="createDate">货币交易发生的时间，默认为当前时间。</param>
        [JsonConstructor]
        public CurrencyTransaction(Option<long?> id = default, Option<long?> fromUserID = default, Option<long?> userID = default, Option<string> transactionType = default, Option<string> currencyType = default, Option<long?> currencyChange = default, Option<double?> currencyBalance = default, Option<string> description = default, Option<string> status = default, Option<string> remark = default, Option<string> tags = default, Option<DateTime?> createDate = default)
        {
            IdOption = id;
            FromUserIDOption = fromUserID;
            UserIDOption = userID;
            TransactionTypeOption = transactionType;
            CurrencyTypeOption = currencyType;
            CurrencyChangeOption = currencyChange;
            CurrencyBalanceOption = currencyBalance;
            DescriptionOption = description;
            StatusOption = status;
            RemarkOption = remark;
            TagsOption = tags;
            CreateDateOption = createDate;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> IdOption { get; private set; }

        /// <summary>
        /// 货币交易记录的唯一标识符。
        /// </summary>
        /// <value>货币交易记录的唯一标识符。</value>
        [JsonPropertyName("id")]
        public long? Id { get { return this.IdOption; } set { this.IdOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of FromUserID
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> FromUserIDOption { get; private set; }

        /// <summary>
        /// 发起交易的发送方用户ID，若为转账交易时必填。
        /// </summary>
        /// <value>发起交易的发送方用户ID，若为转账交易时必填。</value>
        [JsonPropertyName("fromUserID")]
        public long? FromUserID { get { return this.FromUserIDOption; } set { this.FromUserIDOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of UserID
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> UserIDOption { get; private set; }

        /// <summary>
        /// 进行货币交易的用户ID。
        /// </summary>
        /// <value>进行货币交易的用户ID。</value>
        [JsonPropertyName("userID")]
        public long? UserID { get { return this.UserIDOption; } set { this.UserIDOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of TransactionType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TransactionTypeOption { get; private set; }

        /// <summary>
        /// 货币交易的类型，例如 &#39;消费&#39;, &#39;奖励&#39;, &#39;兑换&#39;, &#39;转账&#39; 等。
        /// </summary>
        /// <value>货币交易的类型，例如 &#39;消费&#39;, &#39;奖励&#39;, &#39;兑换&#39;, &#39;转账&#39; 等。</value>
        [JsonPropertyName("transactionType")]
        public string TransactionType { get { return this.TransactionTypeOption; } set { this.TransactionTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CurrencyType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CurrencyTypeOption { get; private set; }

        /// <summary>
        /// 交易的货币类型，例如 &#39;USD&#39;, &#39;CNY&#39; 等。
        /// </summary>
        /// <value>交易的货币类型，例如 &#39;USD&#39;, &#39;CNY&#39; 等。</value>
        [JsonPropertyName("currencyType")]
        public string CurrencyType { get { return this.CurrencyTypeOption; } set { this.CurrencyTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CurrencyChange
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> CurrencyChangeOption { get; private set; }

        /// <summary>
        /// 货币的变动数量，正数表示增加，负数表示减少。
        /// </summary>
        /// <value>货币的变动数量，正数表示增加，负数表示减少。</value>
        [JsonPropertyName("currencyChange")]
        public long? CurrencyChange { get { return this.CurrencyChangeOption; } set { this.CurrencyChangeOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of CurrencyBalance
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> CurrencyBalanceOption { get; private set; }

        /// <summary>
        /// 交易完成后的货币余额。
        /// </summary>
        /// <value>交易完成后的货币余额。</value>
        [JsonPropertyName("currencyBalance")]
        public double? CurrencyBalance { get { return this.CurrencyBalanceOption; } set { this.CurrencyBalanceOption = new Option<double?>(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DescriptionOption { get; private set; }

        /// <summary>
        /// 描述货币变动的具体原因或相关交易详情。
        /// </summary>
        /// <value>描述货币变动的具体原因或相关交易详情。</value>
        [JsonPropertyName("description")]
        public string Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> StatusOption { get; private set; }

        /// <summary>
        /// 货币交易的当前状态，例如 &#39;成功&#39;, &#39;失败&#39;, &#39;待审核&#39; 等。
        /// </summary>
        /// <value>货币交易的当前状态，例如 &#39;成功&#39;, &#39;失败&#39;, &#39;待审核&#39; 等。</value>
        [JsonPropertyName("status")]
        public string Status { get { return this.StatusOption; } set { this.StatusOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Remark
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RemarkOption { get; private set; }

        /// <summary>
        /// 交易的额外信息或管理员的备注。
        /// </summary>
        /// <value>交易的额外信息或管理员的备注。</value>
        [JsonPropertyName("remark")]
        public string Remark { get { return this.RemarkOption; } set { this.RemarkOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Tags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TagsOption { get; private set; }

        /// <summary>
        /// 用于分类或标记交易的标签。
        /// </summary>
        /// <value>用于分类或标记交易的标签。</value>
        [JsonPropertyName("tags")]
        public string Tags { get { return this.TagsOption; } set { this.TagsOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CreateDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreateDateOption { get; private set; }

        /// <summary>
        /// 货币交易发生的时间，默认为当前时间。
        /// </summary>
        /// <value>货币交易发生的时间，默认为当前时间。</value>
        [JsonPropertyName("createDate")]
        public DateTime? CreateDate { get { return this.CreateDateOption; } set { this.CreateDateOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CurrencyTransaction {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FromUserID: ").Append(FromUserID).Append("\n");
            sb.Append("  UserID: ").Append(UserID).Append("\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("  CurrencyType: ").Append(CurrencyType).Append("\n");
            sb.Append("  CurrencyChange: ").Append(CurrencyChange).Append("\n");
            sb.Append("  CurrencyBalance: ").Append(CurrencyBalance).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Remark: ").Append(Remark).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // TransactionType (string) maxLength
            if (this.TransactionType != null && this.TransactionType.Length > 50)
            {
                yield return new ValidationResult("Invalid value for TransactionType, length must be less than 50.", new [] { "TransactionType" });
            }

            // CurrencyType (string) maxLength
            if (this.CurrencyType != null && this.CurrencyType.Length > 50)
            {
                yield return new ValidationResult("Invalid value for CurrencyType, length must be less than 50.", new [] { "CurrencyType" });
            }

            // Status (string) maxLength
            if (this.Status != null && this.Status.Length > 50)
            {
                yield return new ValidationResult("Invalid value for Status, length must be less than 50.", new [] { "Status" });
            }

            // Remark (string) maxLength
            if (this.Remark != null && this.Remark.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Remark, length must be less than 255.", new [] { "Remark" });
            }

            // Tags (string) maxLength
            if (this.Tags != null && this.Tags.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Tags, length must be less than 255.", new [] { "Tags" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CurrencyTransaction" />
    /// </summary>
    public class CurrencyTransactionJsonConverter : JsonConverter<CurrencyTransaction>
    {
        /// <summary>
        /// The format to use to serialize CreateDate
        /// </summary>
        public static string CreateDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="CurrencyTransaction" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CurrencyTransaction Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> id = default;
            Option<long?> fromUserID = default;
            Option<long?> userID = default;
            Option<string> transactionType = default;
            Option<string> currencyType = default;
            Option<long?> currencyChange = default;
            Option<double?> currencyBalance = default;
            Option<string> description = default;
            Option<string> status = default;
            Option<string> remark = default;
            Option<string> tags = default;
            Option<DateTime?> createDate = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "fromUserID":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fromUserID = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "userID":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                userID = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "transactionType":
                            transactionType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "currencyType":
                            currencyType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "currencyChange":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                currencyChange = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "currencyBalance":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                currencyBalance = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "description":
                            description = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "status":
                            status = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "remark":
                            remark = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "tags":
                            tags = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "createDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class CurrencyTransaction.");

            if (fromUserID.IsSet && fromUserID.Value == null)
                throw new ArgumentNullException(nameof(fromUserID), "Property is not nullable for class CurrencyTransaction.");

            if (userID.IsSet && userID.Value == null)
                throw new ArgumentNullException(nameof(userID), "Property is not nullable for class CurrencyTransaction.");

            if (currencyChange.IsSet && currencyChange.Value == null)
                throw new ArgumentNullException(nameof(currencyChange), "Property is not nullable for class CurrencyTransaction.");

            if (currencyBalance.IsSet && currencyBalance.Value == null)
                throw new ArgumentNullException(nameof(currencyBalance), "Property is not nullable for class CurrencyTransaction.");

            if (createDate.IsSet && createDate.Value == null)
                throw new ArgumentNullException(nameof(createDate), "Property is not nullable for class CurrencyTransaction.");

            return new CurrencyTransaction(id, fromUserID, userID, transactionType, currencyType, currencyChange, currencyBalance, description, status, remark, tags, createDate);
        }

        /// <summary>
        /// Serializes a <see cref="CurrencyTransaction" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="currencyTransaction"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CurrencyTransaction currencyTransaction, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, currencyTransaction, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CurrencyTransaction" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="currencyTransaction"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CurrencyTransaction currencyTransaction, JsonSerializerOptions jsonSerializerOptions)
        {
            if (currencyTransaction.IdOption.IsSet)
                writer.WriteNumber("id", currencyTransaction.IdOption.Value.Value);

            if (currencyTransaction.FromUserIDOption.IsSet)
                writer.WriteNumber("fromUserID", currencyTransaction.FromUserIDOption.Value.Value);

            if (currencyTransaction.UserIDOption.IsSet)
                writer.WriteNumber("userID", currencyTransaction.UserIDOption.Value.Value);

            if (currencyTransaction.TransactionTypeOption.IsSet)
                if (currencyTransaction.TransactionTypeOption.Value != null)
                    writer.WriteString("transactionType", currencyTransaction.TransactionType);
                else
                    writer.WriteNull("transactionType");

            if (currencyTransaction.CurrencyTypeOption.IsSet)
                if (currencyTransaction.CurrencyTypeOption.Value != null)
                    writer.WriteString("currencyType", currencyTransaction.CurrencyType);
                else
                    writer.WriteNull("currencyType");

            if (currencyTransaction.CurrencyChangeOption.IsSet)
                writer.WriteNumber("currencyChange", currencyTransaction.CurrencyChangeOption.Value.Value);

            if (currencyTransaction.CurrencyBalanceOption.IsSet)
                writer.WriteNumber("currencyBalance", currencyTransaction.CurrencyBalanceOption.Value.Value);

            if (currencyTransaction.DescriptionOption.IsSet)
                if (currencyTransaction.DescriptionOption.Value != null)
                    writer.WriteString("description", currencyTransaction.Description);
                else
                    writer.WriteNull("description");

            if (currencyTransaction.StatusOption.IsSet)
                if (currencyTransaction.StatusOption.Value != null)
                    writer.WriteString("status", currencyTransaction.Status);
                else
                    writer.WriteNull("status");

            if (currencyTransaction.RemarkOption.IsSet)
                if (currencyTransaction.RemarkOption.Value != null)
                    writer.WriteString("remark", currencyTransaction.Remark);
                else
                    writer.WriteNull("remark");

            if (currencyTransaction.TagsOption.IsSet)
                if (currencyTransaction.TagsOption.Value != null)
                    writer.WriteString("tags", currencyTransaction.Tags);
                else
                    writer.WriteNull("tags");

            if (currencyTransaction.CreateDateOption.IsSet)
                writer.WriteString("createDate", currencyTransaction.CreateDateOption.Value.Value.ToString(CreateDateFormat));
        }
    }
}
