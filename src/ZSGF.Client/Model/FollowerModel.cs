// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using ZSGF.Client.Client;

namespace ZSGF.Client.Model
{
    /// <summary>
    /// FollowerModel
    /// </summary>
    public partial class FollowerModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FollowerModel" /> class.
        /// </summary>
        /// <param name="id">用户ID</param>
        /// <param name="targetUserID">目标用户ID</param>
        /// <param name="alias">别名</param>
        /// <param name="nickName">昵称</param>
        /// <param name="avatar">头像</param>
        /// <param name="isMutual">是否互相关注</param>
        /// <param name="closenessScore">亲密度分数</param>
        /// <param name="attentionScore">关注度分数</param>
        /// <param name="tags">标签</param>
        /// <param name="status">状态</param>
        /// <param name="remark">备注</param>
        /// <param name="createDate">创建日期</param>
        [JsonConstructor]
        public FollowerModel(Option<long?> id = default, Option<long?> targetUserID = default, Option<string> alias = default, Option<string> nickName = default, Option<string> avatar = default, Option<bool?> isMutual = default, Option<long?> closenessScore = default, Option<long?> attentionScore = default, Option<string> tags = default, Option<string> status = default, Option<string> remark = default, Option<DateTime?> createDate = default)
        {
            IdOption = id;
            TargetUserIDOption = targetUserID;
            AliasOption = alias;
            NickNameOption = nickName;
            AvatarOption = avatar;
            IsMutualOption = isMutual;
            ClosenessScoreOption = closenessScore;
            AttentionScoreOption = attentionScore;
            TagsOption = tags;
            StatusOption = status;
            RemarkOption = remark;
            CreateDateOption = createDate;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> IdOption { get; private set; }

        /// <summary>
        /// 用户ID
        /// </summary>
        /// <value>用户ID</value>
        [JsonPropertyName("id")]
        public long? Id { get { return this.IdOption; } set { this.IdOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of TargetUserID
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> TargetUserIDOption { get; private set; }

        /// <summary>
        /// 目标用户ID
        /// </summary>
        /// <value>目标用户ID</value>
        [JsonPropertyName("targetUserID")]
        public long? TargetUserID { get { return this.TargetUserIDOption; } set { this.TargetUserIDOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of Alias
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AliasOption { get; private set; }

        /// <summary>
        /// 别名
        /// </summary>
        /// <value>别名</value>
        [JsonPropertyName("alias")]
        public string Alias { get { return this.AliasOption; } set { this.AliasOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of NickName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NickNameOption { get; private set; }

        /// <summary>
        /// 昵称
        /// </summary>
        /// <value>昵称</value>
        [JsonPropertyName("nickName")]
        public string NickName { get { return this.NickNameOption; } set { this.NickNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Avatar
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AvatarOption { get; private set; }

        /// <summary>
        /// 头像
        /// </summary>
        /// <value>头像</value>
        [JsonPropertyName("avatar")]
        public string Avatar { get { return this.AvatarOption; } set { this.AvatarOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of IsMutual
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsMutualOption { get; private set; }

        /// <summary>
        /// 是否互相关注
        /// </summary>
        /// <value>是否互相关注</value>
        [JsonPropertyName("isMutual")]
        public bool? IsMutual { get { return this.IsMutualOption; } set { this.IsMutualOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of ClosenessScore
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ClosenessScoreOption { get; private set; }

        /// <summary>
        /// 亲密度分数
        /// </summary>
        /// <value>亲密度分数</value>
        [JsonPropertyName("closenessScore")]
        public long? ClosenessScore { get { return this.ClosenessScoreOption; } set { this.ClosenessScoreOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of AttentionScore
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> AttentionScoreOption { get; private set; }

        /// <summary>
        /// 关注度分数
        /// </summary>
        /// <value>关注度分数</value>
        [JsonPropertyName("attentionScore")]
        public long? AttentionScore { get { return this.AttentionScoreOption; } set { this.AttentionScoreOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of Tags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TagsOption { get; private set; }

        /// <summary>
        /// 标签
        /// </summary>
        /// <value>标签</value>
        [JsonPropertyName("tags")]
        public string Tags { get { return this.TagsOption; } set { this.TagsOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> StatusOption { get; private set; }

        /// <summary>
        /// 状态
        /// </summary>
        /// <value>状态</value>
        [JsonPropertyName("status")]
        public string Status { get { return this.StatusOption; } set { this.StatusOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Remark
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RemarkOption { get; private set; }

        /// <summary>
        /// 备注
        /// </summary>
        /// <value>备注</value>
        [JsonPropertyName("remark")]
        public string Remark { get { return this.RemarkOption; } set { this.RemarkOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CreateDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreateDateOption { get; private set; }

        /// <summary>
        /// 创建日期
        /// </summary>
        /// <value>创建日期</value>
        [JsonPropertyName("createDate")]
        public DateTime? CreateDate { get { return this.CreateDateOption; } set { this.CreateDateOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FollowerModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TargetUserID: ").Append(TargetUserID).Append("\n");
            sb.Append("  Alias: ").Append(Alias).Append("\n");
            sb.Append("  NickName: ").Append(NickName).Append("\n");
            sb.Append("  Avatar: ").Append(Avatar).Append("\n");
            sb.Append("  IsMutual: ").Append(IsMutual).Append("\n");
            sb.Append("  ClosenessScore: ").Append(ClosenessScore).Append("\n");
            sb.Append("  AttentionScore: ").Append(AttentionScore).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Remark: ").Append(Remark).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FollowerModel" />
    /// </summary>
    public class FollowerModelJsonConverter : JsonConverter<FollowerModel>
    {
        /// <summary>
        /// The format to use to serialize CreateDate
        /// </summary>
        public static string CreateDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="FollowerModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FollowerModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> id = default;
            Option<long?> targetUserID = default;
            Option<string> alias = default;
            Option<string> nickName = default;
            Option<string> avatar = default;
            Option<bool?> isMutual = default;
            Option<long?> closenessScore = default;
            Option<long?> attentionScore = default;
            Option<string> tags = default;
            Option<string> status = default;
            Option<string> remark = default;
            Option<DateTime?> createDate = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "targetUserID":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                targetUserID = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "alias":
                            alias = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "nickName":
                            nickName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "avatar":
                            avatar = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "isMutual":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isMutual = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "closenessScore":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                closenessScore = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "attentionScore":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                attentionScore = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "tags":
                            tags = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "status":
                            status = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "remark":
                            remark = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "createDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class FollowerModel.");

            if (targetUserID.IsSet && targetUserID.Value == null)
                throw new ArgumentNullException(nameof(targetUserID), "Property is not nullable for class FollowerModel.");

            if (isMutual.IsSet && isMutual.Value == null)
                throw new ArgumentNullException(nameof(isMutual), "Property is not nullable for class FollowerModel.");

            if (closenessScore.IsSet && closenessScore.Value == null)
                throw new ArgumentNullException(nameof(closenessScore), "Property is not nullable for class FollowerModel.");

            if (attentionScore.IsSet && attentionScore.Value == null)
                throw new ArgumentNullException(nameof(attentionScore), "Property is not nullable for class FollowerModel.");

            if (createDate.IsSet && createDate.Value == null)
                throw new ArgumentNullException(nameof(createDate), "Property is not nullable for class FollowerModel.");

            return new FollowerModel(id, targetUserID, alias, nickName, avatar, isMutual, closenessScore, attentionScore, tags, status, remark, createDate);
        }

        /// <summary>
        /// Serializes a <see cref="FollowerModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="followerModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FollowerModel followerModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, followerModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FollowerModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="followerModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FollowerModel followerModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (followerModel.IdOption.IsSet)
                writer.WriteNumber("id", followerModel.IdOption.Value.Value);

            if (followerModel.TargetUserIDOption.IsSet)
                writer.WriteNumber("targetUserID", followerModel.TargetUserIDOption.Value.Value);

            if (followerModel.AliasOption.IsSet)
                if (followerModel.AliasOption.Value != null)
                    writer.WriteString("alias", followerModel.Alias);
                else
                    writer.WriteNull("alias");

            if (followerModel.NickNameOption.IsSet)
                if (followerModel.NickNameOption.Value != null)
                    writer.WriteString("nickName", followerModel.NickName);
                else
                    writer.WriteNull("nickName");

            if (followerModel.AvatarOption.IsSet)
                if (followerModel.AvatarOption.Value != null)
                    writer.WriteString("avatar", followerModel.Avatar);
                else
                    writer.WriteNull("avatar");

            if (followerModel.IsMutualOption.IsSet)
                writer.WriteBoolean("isMutual", followerModel.IsMutualOption.Value.Value);

            if (followerModel.ClosenessScoreOption.IsSet)
                writer.WriteNumber("closenessScore", followerModel.ClosenessScoreOption.Value.Value);

            if (followerModel.AttentionScoreOption.IsSet)
                writer.WriteNumber("attentionScore", followerModel.AttentionScoreOption.Value.Value);

            if (followerModel.TagsOption.IsSet)
                if (followerModel.TagsOption.Value != null)
                    writer.WriteString("tags", followerModel.Tags);
                else
                    writer.WriteNull("tags");

            if (followerModel.StatusOption.IsSet)
                if (followerModel.StatusOption.Value != null)
                    writer.WriteString("status", followerModel.Status);
                else
                    writer.WriteNull("status");

            if (followerModel.RemarkOption.IsSet)
                if (followerModel.RemarkOption.Value != null)
                    writer.WriteString("remark", followerModel.Remark);
                else
                    writer.WriteNull("remark");

            if (followerModel.CreateDateOption.IsSet)
                writer.WriteString("createDate", followerModel.CreateDateOption.Value.Value.ToString(CreateDateFormat));
        }
    }
}
