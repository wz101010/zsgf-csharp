// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using ZSGF.Client.Client;

namespace ZSGF.Client.Model
{
    /// <summary>
    /// 用户资产实体，用于记录用户的货币余额和相关信息。
    /// </summary>
    public partial class UserCurrency : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserCurrency" /> class.
        /// </summary>
        /// <param name="id">用户资产的唯一标识符。</param>
        /// <param name="userID">与用户资产关联的用户ID。</param>
        /// <param name="currencyCode">用户资产的货币代码，例如 &#39;USD&#39;, &#39;CNY&#39; 等。</param>
        /// <param name="balance">用户的账户余额，表示当前持有的货币数量。</param>
        [JsonConstructor]
        public UserCurrency(Option<long?> id = default, Option<long?> userID = default, Option<string> currencyCode = default, Option<long?> balance = default)
        {
            IdOption = id;
            UserIDOption = userID;
            CurrencyCodeOption = currencyCode;
            BalanceOption = balance;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> IdOption { get; private set; }

        /// <summary>
        /// 用户资产的唯一标识符。
        /// </summary>
        /// <value>用户资产的唯一标识符。</value>
        [JsonPropertyName("id")]
        public long? Id { get { return this.IdOption; } set { this.IdOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of UserID
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> UserIDOption { get; private set; }

        /// <summary>
        /// 与用户资产关联的用户ID。
        /// </summary>
        /// <value>与用户资产关联的用户ID。</value>
        [JsonPropertyName("userID")]
        public long? UserID { get { return this.UserIDOption; } set { this.UserIDOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of CurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CurrencyCodeOption { get; private set; }

        /// <summary>
        /// 用户资产的货币代码，例如 &#39;USD&#39;, &#39;CNY&#39; 等。
        /// </summary>
        /// <value>用户资产的货币代码，例如 &#39;USD&#39;, &#39;CNY&#39; 等。</value>
        [JsonPropertyName("currencyCode")]
        public string CurrencyCode { get { return this.CurrencyCodeOption; } set { this.CurrencyCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Balance
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> BalanceOption { get; private set; }

        /// <summary>
        /// 用户的账户余额，表示当前持有的货币数量。
        /// </summary>
        /// <value>用户的账户余额，表示当前持有的货币数量。</value>
        [JsonPropertyName("balance")]
        public long? Balance { get { return this.BalanceOption; } set { this.BalanceOption = new Option<long?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserCurrency {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserID: ").Append(UserID).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CurrencyCode (string) maxLength
            if (this.CurrencyCode != null && this.CurrencyCode.Length > 50)
            {
                yield return new ValidationResult("Invalid value for CurrencyCode, length must be less than 50.", new [] { "CurrencyCode" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserCurrency" />
    /// </summary>
    public class UserCurrencyJsonConverter : JsonConverter<UserCurrency>
    {
        /// <summary>
        /// Deserializes json to <see cref="UserCurrency" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UserCurrency Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> id = default;
            Option<long?> userID = default;
            Option<string> currencyCode = default;
            Option<long?> balance = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "userID":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                userID = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "currencyCode":
                            currencyCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "balance":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                balance = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class UserCurrency.");

            if (userID.IsSet && userID.Value == null)
                throw new ArgumentNullException(nameof(userID), "Property is not nullable for class UserCurrency.");

            if (balance.IsSet && balance.Value == null)
                throw new ArgumentNullException(nameof(balance), "Property is not nullable for class UserCurrency.");

            return new UserCurrency(id, userID, currencyCode, balance);
        }

        /// <summary>
        /// Serializes a <see cref="UserCurrency" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userCurrency"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UserCurrency userCurrency, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, userCurrency, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UserCurrency" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userCurrency"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UserCurrency userCurrency, JsonSerializerOptions jsonSerializerOptions)
        {
            if (userCurrency.IdOption.IsSet)
                writer.WriteNumber("id", userCurrency.IdOption.Value.Value);

            if (userCurrency.UserIDOption.IsSet)
                writer.WriteNumber("userID", userCurrency.UserIDOption.Value.Value);

            if (userCurrency.CurrencyCodeOption.IsSet)
                if (userCurrency.CurrencyCodeOption.Value != null)
                    writer.WriteString("currencyCode", userCurrency.CurrencyCode);
                else
                    writer.WriteNull("currencyCode");

            if (userCurrency.BalanceOption.IsSet)
                writer.WriteNumber("balance", userCurrency.BalanceOption.Value.Value);
        }
    }
}
