// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using ZSGF.Client.Client;

namespace ZSGF.Client.Model
{
    /// <summary>
    /// EmailSignUpRequest
    /// </summary>
    public partial class EmailSignUpRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailSignUpRequest" /> class.
        /// </summary>
        /// <param name="email">用户邮箱地址</param>
        /// <param name="pwd">用户密码，长度为6到32个字符</param>
        /// <param name="emailCode">邮箱验证码</param>
        /// <param name="phone">手机号，必须为11位数字</param>
        /// <param name="phoneCode">手机验证码（只有启用的手机验证码功能时，才需要传入）</param>
        /// <param name="nickName">用户昵称</param>
        /// <param name="avatar">用户头像URL</param>
        /// <param name="data">自定义数据</param>
        [JsonConstructor]
        public EmailSignUpRequest(string email, string pwd, Option<string> emailCode = default, Option<string> phone = default, Option<string> phoneCode = default, Option<string> nickName = default, Option<string> avatar = default, Option<string> data = default)
        {
            Email = email;
            Pwd = pwd;
            EmailCodeOption = emailCode;
            PhoneOption = phone;
            PhoneCodeOption = phoneCode;
            NickNameOption = nickName;
            AvatarOption = avatar;
            DataOption = data;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// 用户邮箱地址
        /// </summary>
        /// <value>用户邮箱地址</value>
        [JsonPropertyName("email")]
        public string Email { get; set; }

        /// <summary>
        /// 用户密码，长度为6到32个字符
        /// </summary>
        /// <value>用户密码，长度为6到32个字符</value>
        [JsonPropertyName("pwd")]
        public string Pwd { get; set; }

        /// <summary>
        /// Used to track the state of EmailCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EmailCodeOption { get; private set; }

        /// <summary>
        /// 邮箱验证码
        /// </summary>
        /// <value>邮箱验证码</value>
        [JsonPropertyName("emailCode")]
        public string EmailCode { get { return this.EmailCodeOption; } set { this.EmailCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Phone
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PhoneOption { get; private set; }

        /// <summary>
        /// 手机号，必须为11位数字
        /// </summary>
        /// <value>手机号，必须为11位数字</value>
        [JsonPropertyName("phone")]
        public string Phone { get { return this.PhoneOption; } set { this.PhoneOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PhoneCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PhoneCodeOption { get; private set; }

        /// <summary>
        /// 手机验证码（只有启用的手机验证码功能时，才需要传入）
        /// </summary>
        /// <value>手机验证码（只有启用的手机验证码功能时，才需要传入）</value>
        [JsonPropertyName("phoneCode")]
        public string PhoneCode { get { return this.PhoneCodeOption; } set { this.PhoneCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of NickName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NickNameOption { get; private set; }

        /// <summary>
        /// 用户昵称
        /// </summary>
        /// <value>用户昵称</value>
        [JsonPropertyName("nickName")]
        public string NickName { get { return this.NickNameOption; } set { this.NickNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Avatar
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AvatarOption { get; private set; }

        /// <summary>
        /// 用户头像URL
        /// </summary>
        /// <value>用户头像URL</value>
        [JsonPropertyName("avatar")]
        public string Avatar { get { return this.AvatarOption; } set { this.AvatarOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Data
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DataOption { get; private set; }

        /// <summary>
        /// 自定义数据
        /// </summary>
        /// <value>自定义数据</value>
        [JsonPropertyName("data")]
        public string Data { get { return this.DataOption; } set { this.DataOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailSignUpRequest {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Pwd: ").Append(Pwd).Append("\n");
            sb.Append("  EmailCode: ").Append(EmailCode).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  PhoneCode: ").Append(PhoneCode).Append("\n");
            sb.Append("  NickName: ").Append(NickName).Append("\n");
            sb.Append("  Avatar: ").Append(Avatar).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Email (string) minLength
            if (this.Email != null && this.Email.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Email, length must be greater than 1.", new [] { "Email" });
            }

            // Pwd (string) maxLength
            if (this.Pwd != null && this.Pwd.Length > 32)
            {
                yield return new ValidationResult("Invalid value for Pwd, length must be less than 32.", new [] { "Pwd" });
            }

            // Pwd (string) minLength
            if (this.Pwd != null && this.Pwd.Length < 6)
            {
                yield return new ValidationResult("Invalid value for Pwd, length must be greater than 6.", new [] { "Pwd" });
            }

            if (this.Pwd != null) {
                // Pwd (string) pattern
                Regex regexPwd = new Regex(@"^[a-zA-Z0-9_\-!@#$%^&*()]*$", RegexOptions.CultureInvariant);

                if (!regexPwd.Match(this.Pwd).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Pwd, must match a pattern of " + regexPwd, new [] { "Pwd" });
                }
            }

            if (this.EmailCodeOption.Value != null) {
                // EmailCode (string) pattern
                Regex regexEmailCode = new Regex(@"\d{4,8}$", RegexOptions.CultureInvariant);

                if (this.EmailCodeOption.Value != null &&!regexEmailCode.Match(this.EmailCodeOption.Value).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EmailCode, must match a pattern of " + regexEmailCode, new [] { "EmailCode" });
                }
            }

            if (this.PhoneOption.Value != null) {
                // Phone (string) pattern
                Regex regexPhone = new Regex(@"^(\d{11})?$", RegexOptions.CultureInvariant);

                if (this.PhoneOption.Value != null &&!regexPhone.Match(this.PhoneOption.Value).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Phone, must match a pattern of " + regexPhone, new [] { "Phone" });
                }
            }

            if (this.PhoneCodeOption.Value != null) {
                // PhoneCode (string) pattern
                Regex regexPhoneCode = new Regex(@"\d{4,8}$", RegexOptions.CultureInvariant);

                if (this.PhoneCodeOption.Value != null &&!regexPhoneCode.Match(this.PhoneCodeOption.Value).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PhoneCode, must match a pattern of " + regexPhoneCode, new [] { "PhoneCode" });
                }
            }

            // NickName (string) maxLength
            if (this.NickName != null && this.NickName.Length > 32)
            {
                yield return new ValidationResult("Invalid value for NickName, length must be less than 32.", new [] { "NickName" });
            }

            // NickName (string) minLength
            if (this.NickName != null && this.NickName.Length < 4)
            {
                yield return new ValidationResult("Invalid value for NickName, length must be greater than 4.", new [] { "NickName" });
            }

            // Avatar (string) maxLength
            if (this.Avatar != null && this.Avatar.Length > 999)
            {
                yield return new ValidationResult("Invalid value for Avatar, length must be less than 999.", new [] { "Avatar" });
            }

            // Data (string) maxLength
            if (this.Data != null && this.Data.Length > 9999)
            {
                yield return new ValidationResult("Invalid value for Data, length must be less than 9999.", new [] { "Data" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EmailSignUpRequest" />
    /// </summary>
    public class EmailSignUpRequestJsonConverter : JsonConverter<EmailSignUpRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="EmailSignUpRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EmailSignUpRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> email = default;
            Option<string> pwd = default;
            Option<string> emailCode = default;
            Option<string> phone = default;
            Option<string> phoneCode = default;
            Option<string> nickName = default;
            Option<string> avatar = default;
            Option<string> data = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "email":
                            email = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "pwd":
                            pwd = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "emailCode":
                            emailCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "phone":
                            phone = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "phoneCode":
                            phoneCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "nickName":
                            nickName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "avatar":
                            avatar = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "data":
                            data = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!email.IsSet)
                throw new ArgumentException("Property is required for class EmailSignUpRequest.", nameof(email));

            if (!pwd.IsSet)
                throw new ArgumentException("Property is required for class EmailSignUpRequest.", nameof(pwd));

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class EmailSignUpRequest.");

            if (pwd.IsSet && pwd.Value == null)
                throw new ArgumentNullException(nameof(pwd), "Property is not nullable for class EmailSignUpRequest.");

            return new EmailSignUpRequest(email.Value, pwd.Value, emailCode, phone, phoneCode, nickName, avatar, data);
        }

        /// <summary>
        /// Serializes a <see cref="EmailSignUpRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emailSignUpRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EmailSignUpRequest emailSignUpRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, emailSignUpRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EmailSignUpRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emailSignUpRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EmailSignUpRequest emailSignUpRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (emailSignUpRequest.Email == null)
                throw new ArgumentNullException(nameof(emailSignUpRequest.Email), "Property is required for class EmailSignUpRequest.");

            if (emailSignUpRequest.Pwd == null)
                throw new ArgumentNullException(nameof(emailSignUpRequest.Pwd), "Property is required for class EmailSignUpRequest.");

            writer.WriteString("email", emailSignUpRequest.Email);

            writer.WriteString("pwd", emailSignUpRequest.Pwd);

            if (emailSignUpRequest.EmailCodeOption.IsSet)
                if (emailSignUpRequest.EmailCodeOption.Value != null)
                    writer.WriteString("emailCode", emailSignUpRequest.EmailCode);
                else
                    writer.WriteNull("emailCode");

            if (emailSignUpRequest.PhoneOption.IsSet)
                if (emailSignUpRequest.PhoneOption.Value != null)
                    writer.WriteString("phone", emailSignUpRequest.Phone);
                else
                    writer.WriteNull("phone");

            if (emailSignUpRequest.PhoneCodeOption.IsSet)
                if (emailSignUpRequest.PhoneCodeOption.Value != null)
                    writer.WriteString("phoneCode", emailSignUpRequest.PhoneCode);
                else
                    writer.WriteNull("phoneCode");

            if (emailSignUpRequest.NickNameOption.IsSet)
                if (emailSignUpRequest.NickNameOption.Value != null)
                    writer.WriteString("nickName", emailSignUpRequest.NickName);
                else
                    writer.WriteNull("nickName");

            if (emailSignUpRequest.AvatarOption.IsSet)
                if (emailSignUpRequest.AvatarOption.Value != null)
                    writer.WriteString("avatar", emailSignUpRequest.Avatar);
                else
                    writer.WriteNull("avatar");

            if (emailSignUpRequest.DataOption.IsSet)
                if (emailSignUpRequest.DataOption.Value != null)
                    writer.WriteString("data", emailSignUpRequest.Data);
                else
                    writer.WriteNull("data");
        }
    }
}
