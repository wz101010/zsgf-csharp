// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using ZSGF.Client.Client;

namespace ZSGF.Client.Model
{
    /// <summary>
    /// 用户
    /// </summary>
    public partial class User : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="User" /> class.
        /// </summary>
        /// <param name="id">用户唯一标识</param>
        /// <param name="platform">用户所在平台</param>
        /// <param name="unionID">用户所在平台的唯一标识</param>
        /// <param name="nickName">昵称</param>
        /// <param name="avatar">头像</param>
        /// <param name="data">其他数据</param>
        /// <param name="userName">用户名</param>
        /// <param name="pwd">用户密码</param>
        /// <param name="email">邮箱地址</param>
        /// <param name="emailIsValid">邮箱已验证</param>
        /// <param name="phone">手机号码</param>
        /// <param name="phoneIsValid">手机号码已验证</param>
        /// <param name="relationChain">关系链</param>
        /// <param name="interestTags">兴趣标签</param>
        /// <param name="biography">个人简介</param>
        /// <param name="gender">性别</param>
        /// <param name="birthday">生日</param>
        /// <param name="occupation">职业</param>
        /// <param name="education">学历</param>
        /// <param name="contact">联系方式</param>
        /// <param name="languages">语言</param>
        /// <param name="socialLinks">社交网络链接</param>
        /// <param name="relationshipStatus">婚姻状态</param>
        /// <param name="company">公司</param>
        /// <param name="industry">行业</param>
        /// <param name="companyPosition">行业职位</param>
        /// <param name="privateSettings">私密设置</param>
        /// <param name="isLock">账户是否锁定</param>
        /// <param name="lockUntil">账户锁定截止时间</param>
        /// <param name="enableUserNameSignIn">能使用用户名登录</param>
        /// <param name="enableEmailSignIn">能使用邮箱登录</param>
        /// <param name="enablePhoneSignIn">能使用电话号码登录</param>
        /// <param name="enableUnionIDSignIn">能使用联合身份标识登录</param>
        /// <param name="enableOAuth">能使用OAuth认证方式登录</param>
        /// <param name="enable2FAAuth">启用双因素认证登录</param>
        /// <param name="createDate">创建时间</param>
        /// <param name="lastUpdate">最后更新时间</param>
        [JsonConstructor]
        public User(Option<long?> id = default, Option<string> platform = default, Option<string> unionID = default, Option<string> nickName = default, Option<string> avatar = default, Option<string> data = default, Option<string> userName = default, Option<string> pwd = default, Option<string> email = default, Option<bool?> emailIsValid = default, Option<string> phone = default, Option<bool?> phoneIsValid = default, Option<string> relationChain = default, Option<string> interestTags = default, Option<string> biography = default, Option<string> gender = default, Option<DateTime?> birthday = default, Option<string> occupation = default, Option<string> education = default, Option<string> contact = default, Option<string> languages = default, Option<string> socialLinks = default, Option<string> relationshipStatus = default, Option<string> company = default, Option<string> industry = default, Option<string> companyPosition = default, Option<string> privateSettings = default, Option<bool?> isLock = default, Option<DateTime?> lockUntil = default, Option<bool?> enableUserNameSignIn = default, Option<bool?> enableEmailSignIn = default, Option<bool?> enablePhoneSignIn = default, Option<bool?> enableUnionIDSignIn = default, Option<bool?> enableOAuth = default, Option<bool?> enable2FAAuth = default, Option<DateTime?> createDate = default, Option<DateTime?> lastUpdate = default)
        {
            IdOption = id;
            PlatformOption = platform;
            UnionIDOption = unionID;
            NickNameOption = nickName;
            AvatarOption = avatar;
            DataOption = data;
            UserNameOption = userName;
            PwdOption = pwd;
            EmailOption = email;
            EmailIsValidOption = emailIsValid;
            PhoneOption = phone;
            PhoneIsValidOption = phoneIsValid;
            RelationChainOption = relationChain;
            InterestTagsOption = interestTags;
            BiographyOption = biography;
            GenderOption = gender;
            BirthdayOption = birthday;
            OccupationOption = occupation;
            EducationOption = education;
            ContactOption = contact;
            LanguagesOption = languages;
            SocialLinksOption = socialLinks;
            RelationshipStatusOption = relationshipStatus;
            CompanyOption = company;
            IndustryOption = industry;
            CompanyPositionOption = companyPosition;
            PrivateSettingsOption = privateSettings;
            IsLockOption = isLock;
            LockUntilOption = lockUntil;
            EnableUserNameSignInOption = enableUserNameSignIn;
            EnableEmailSignInOption = enableEmailSignIn;
            EnablePhoneSignInOption = enablePhoneSignIn;
            EnableUnionIDSignInOption = enableUnionIDSignIn;
            EnableOAuthOption = enableOAuth;
            Enable2FAAuthOption = enable2FAAuth;
            CreateDateOption = createDate;
            LastUpdateOption = lastUpdate;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> IdOption { get; private set; }

        /// <summary>
        /// 用户唯一标识
        /// </summary>
        /// <value>用户唯一标识</value>
        [JsonPropertyName("id")]
        public long? Id { get { return this.IdOption; } set { this.IdOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of Platform
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PlatformOption { get; private set; }

        /// <summary>
        /// 用户所在平台
        /// </summary>
        /// <value>用户所在平台</value>
        [JsonPropertyName("platform")]
        public string Platform { get { return this.PlatformOption; } set { this.PlatformOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of UnionID
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> UnionIDOption { get; private set; }

        /// <summary>
        /// 用户所在平台的唯一标识
        /// </summary>
        /// <value>用户所在平台的唯一标识</value>
        [JsonPropertyName("unionID")]
        public string UnionID { get { return this.UnionIDOption; } set { this.UnionIDOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of NickName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NickNameOption { get; private set; }

        /// <summary>
        /// 昵称
        /// </summary>
        /// <value>昵称</value>
        [JsonPropertyName("nickName")]
        public string NickName { get { return this.NickNameOption; } set { this.NickNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Avatar
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AvatarOption { get; private set; }

        /// <summary>
        /// 头像
        /// </summary>
        /// <value>头像</value>
        [JsonPropertyName("avatar")]
        public string Avatar { get { return this.AvatarOption; } set { this.AvatarOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Data
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DataOption { get; private set; }

        /// <summary>
        /// 其他数据
        /// </summary>
        /// <value>其他数据</value>
        [JsonPropertyName("data")]
        public string Data { get { return this.DataOption; } set { this.DataOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of UserName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> UserNameOption { get; private set; }

        /// <summary>
        /// 用户名
        /// </summary>
        /// <value>用户名</value>
        [JsonPropertyName("userName")]
        public string UserName { get { return this.UserNameOption; } set { this.UserNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Pwd
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PwdOption { get; private set; }

        /// <summary>
        /// 用户密码
        /// </summary>
        /// <value>用户密码</value>
        [JsonPropertyName("pwd")]
        public string Pwd { get { return this.PwdOption; } set { this.PwdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Email
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EmailOption { get; private set; }

        /// <summary>
        /// 邮箱地址
        /// </summary>
        /// <value>邮箱地址</value>
        [JsonPropertyName("email")]
        public string Email { get { return this.EmailOption; } set { this.EmailOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EmailIsValid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EmailIsValidOption { get; private set; }

        /// <summary>
        /// 邮箱已验证
        /// </summary>
        /// <value>邮箱已验证</value>
        [JsonPropertyName("emailIsValid")]
        public bool? EmailIsValid { get { return this.EmailIsValidOption; } set { this.EmailIsValidOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Phone
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PhoneOption { get; private set; }

        /// <summary>
        /// 手机号码
        /// </summary>
        /// <value>手机号码</value>
        [JsonPropertyName("phone")]
        public string Phone { get { return this.PhoneOption; } set { this.PhoneOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PhoneIsValid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PhoneIsValidOption { get; private set; }

        /// <summary>
        /// 手机号码已验证
        /// </summary>
        /// <value>手机号码已验证</value>
        [JsonPropertyName("phoneIsValid")]
        public bool? PhoneIsValid { get { return this.PhoneIsValidOption; } set { this.PhoneIsValidOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of RelationChain
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RelationChainOption { get; private set; }

        /// <summary>
        /// 关系链
        /// </summary>
        /// <value>关系链</value>
        [JsonPropertyName("relationChain")]
        public string RelationChain { get { return this.RelationChainOption; } set { this.RelationChainOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of InterestTags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> InterestTagsOption { get; private set; }

        /// <summary>
        /// 兴趣标签
        /// </summary>
        /// <value>兴趣标签</value>
        [JsonPropertyName("interestTags")]
        public string InterestTags { get { return this.InterestTagsOption; } set { this.InterestTagsOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Biography
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BiographyOption { get; private set; }

        /// <summary>
        /// 个人简介
        /// </summary>
        /// <value>个人简介</value>
        [JsonPropertyName("biography")]
        public string Biography { get { return this.BiographyOption; } set { this.BiographyOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Gender
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> GenderOption { get; private set; }

        /// <summary>
        /// 性别
        /// </summary>
        /// <value>性别</value>
        [JsonPropertyName("gender")]
        public string Gender { get { return this.GenderOption; } set { this.GenderOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Birthday
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> BirthdayOption { get; private set; }

        /// <summary>
        /// 生日
        /// </summary>
        /// <value>生日</value>
        [JsonPropertyName("birthday")]
        public DateTime? Birthday { get { return this.BirthdayOption; } set { this.BirthdayOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of Occupation
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OccupationOption { get; private set; }

        /// <summary>
        /// 职业
        /// </summary>
        /// <value>职业</value>
        [JsonPropertyName("occupation")]
        public string Occupation { get { return this.OccupationOption; } set { this.OccupationOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Education
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EducationOption { get; private set; }

        /// <summary>
        /// 学历
        /// </summary>
        /// <value>学历</value>
        [JsonPropertyName("education")]
        public string Education { get { return this.EducationOption; } set { this.EducationOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Contact
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ContactOption { get; private set; }

        /// <summary>
        /// 联系方式
        /// </summary>
        /// <value>联系方式</value>
        [JsonPropertyName("contact")]
        public string Contact { get { return this.ContactOption; } set { this.ContactOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Languages
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LanguagesOption { get; private set; }

        /// <summary>
        /// 语言
        /// </summary>
        /// <value>语言</value>
        [JsonPropertyName("languages")]
        public string Languages { get { return this.LanguagesOption; } set { this.LanguagesOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SocialLinks
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SocialLinksOption { get; private set; }

        /// <summary>
        /// 社交网络链接
        /// </summary>
        /// <value>社交网络链接</value>
        [JsonPropertyName("socialLinks")]
        public string SocialLinks { get { return this.SocialLinksOption; } set { this.SocialLinksOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RelationshipStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RelationshipStatusOption { get; private set; }

        /// <summary>
        /// 婚姻状态
        /// </summary>
        /// <value>婚姻状态</value>
        [JsonPropertyName("relationshipStatus")]
        public string RelationshipStatus { get { return this.RelationshipStatusOption; } set { this.RelationshipStatusOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Company
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CompanyOption { get; private set; }

        /// <summary>
        /// 公司
        /// </summary>
        /// <value>公司</value>
        [JsonPropertyName("company")]
        public string Company { get { return this.CompanyOption; } set { this.CompanyOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Industry
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> IndustryOption { get; private set; }

        /// <summary>
        /// 行业
        /// </summary>
        /// <value>行业</value>
        [JsonPropertyName("industry")]
        public string Industry { get { return this.IndustryOption; } set { this.IndustryOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CompanyPosition
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CompanyPositionOption { get; private set; }

        /// <summary>
        /// 行业职位
        /// </summary>
        /// <value>行业职位</value>
        [JsonPropertyName("companyPosition")]
        public string CompanyPosition { get { return this.CompanyPositionOption; } set { this.CompanyPositionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PrivateSettings
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PrivateSettingsOption { get; private set; }

        /// <summary>
        /// 私密设置
        /// </summary>
        /// <value>私密设置</value>
        [JsonPropertyName("privateSettings")]
        public string PrivateSettings { get { return this.PrivateSettingsOption; } set { this.PrivateSettingsOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of IsLock
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsLockOption { get; private set; }

        /// <summary>
        /// 账户是否锁定
        /// </summary>
        /// <value>账户是否锁定</value>
        [JsonPropertyName("isLock")]
        public bool? IsLock { get { return this.IsLockOption; } set { this.IsLockOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of LockUntil
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LockUntilOption { get; private set; }

        /// <summary>
        /// 账户锁定截止时间
        /// </summary>
        /// <value>账户锁定截止时间</value>
        [JsonPropertyName("lockUntil")]
        public DateTime? LockUntil { get { return this.LockUntilOption; } set { this.LockUntilOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of EnableUserNameSignIn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EnableUserNameSignInOption { get; private set; }

        /// <summary>
        /// 能使用用户名登录
        /// </summary>
        /// <value>能使用用户名登录</value>
        [JsonPropertyName("enableUserNameSignIn")]
        public bool? EnableUserNameSignIn { get { return this.EnableUserNameSignInOption; } set { this.EnableUserNameSignInOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of EnableEmailSignIn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EnableEmailSignInOption { get; private set; }

        /// <summary>
        /// 能使用邮箱登录
        /// </summary>
        /// <value>能使用邮箱登录</value>
        [JsonPropertyName("enableEmailSignIn")]
        public bool? EnableEmailSignIn { get { return this.EnableEmailSignInOption; } set { this.EnableEmailSignInOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of EnablePhoneSignIn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EnablePhoneSignInOption { get; private set; }

        /// <summary>
        /// 能使用电话号码登录
        /// </summary>
        /// <value>能使用电话号码登录</value>
        [JsonPropertyName("enablePhoneSignIn")]
        public bool? EnablePhoneSignIn { get { return this.EnablePhoneSignInOption; } set { this.EnablePhoneSignInOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of EnableUnionIDSignIn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EnableUnionIDSignInOption { get; private set; }

        /// <summary>
        /// 能使用联合身份标识登录
        /// </summary>
        /// <value>能使用联合身份标识登录</value>
        [JsonPropertyName("enableUnionIDSignIn")]
        public bool? EnableUnionIDSignIn { get { return this.EnableUnionIDSignInOption; } set { this.EnableUnionIDSignInOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of EnableOAuth
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EnableOAuthOption { get; private set; }

        /// <summary>
        /// 能使用OAuth认证方式登录
        /// </summary>
        /// <value>能使用OAuth认证方式登录</value>
        [JsonPropertyName("enableOAuth")]
        public bool? EnableOAuth { get { return this.EnableOAuthOption; } set { this.EnableOAuthOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Enable2FAAuth
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> Enable2FAAuthOption { get; private set; }

        /// <summary>
        /// 启用双因素认证登录
        /// </summary>
        /// <value>启用双因素认证登录</value>
        [JsonPropertyName("enable2FAAuth")]
        public bool? Enable2FAAuth { get { return this.Enable2FAAuthOption; } set { this.Enable2FAAuthOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of CreateDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreateDateOption { get; private set; }

        /// <summary>
        /// 创建时间
        /// </summary>
        /// <value>创建时间</value>
        [JsonPropertyName("createDate")]
        public DateTime? CreateDate { get { return this.CreateDateOption; } set { this.CreateDateOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of LastUpdate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastUpdateOption { get; private set; }

        /// <summary>
        /// 最后更新时间
        /// </summary>
        /// <value>最后更新时间</value>
        [JsonPropertyName("lastUpdate")]
        public DateTime? LastUpdate { get { return this.LastUpdateOption; } set { this.LastUpdateOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class User {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  UnionID: ").Append(UnionID).Append("\n");
            sb.Append("  NickName: ").Append(NickName).Append("\n");
            sb.Append("  Avatar: ").Append(Avatar).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  Pwd: ").Append(Pwd).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  EmailIsValid: ").Append(EmailIsValid).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  PhoneIsValid: ").Append(PhoneIsValid).Append("\n");
            sb.Append("  RelationChain: ").Append(RelationChain).Append("\n");
            sb.Append("  InterestTags: ").Append(InterestTags).Append("\n");
            sb.Append("  Biography: ").Append(Biography).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  Birthday: ").Append(Birthday).Append("\n");
            sb.Append("  Occupation: ").Append(Occupation).Append("\n");
            sb.Append("  Education: ").Append(Education).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  Languages: ").Append(Languages).Append("\n");
            sb.Append("  SocialLinks: ").Append(SocialLinks).Append("\n");
            sb.Append("  RelationshipStatus: ").Append(RelationshipStatus).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  Industry: ").Append(Industry).Append("\n");
            sb.Append("  CompanyPosition: ").Append(CompanyPosition).Append("\n");
            sb.Append("  PrivateSettings: ").Append(PrivateSettings).Append("\n");
            sb.Append("  IsLock: ").Append(IsLock).Append("\n");
            sb.Append("  LockUntil: ").Append(LockUntil).Append("\n");
            sb.Append("  EnableUserNameSignIn: ").Append(EnableUserNameSignIn).Append("\n");
            sb.Append("  EnableEmailSignIn: ").Append(EnableEmailSignIn).Append("\n");
            sb.Append("  EnablePhoneSignIn: ").Append(EnablePhoneSignIn).Append("\n");
            sb.Append("  EnableUnionIDSignIn: ").Append(EnableUnionIDSignIn).Append("\n");
            sb.Append("  EnableOAuth: ").Append(EnableOAuth).Append("\n");
            sb.Append("  Enable2FAAuth: ").Append(Enable2FAAuth).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  LastUpdate: ").Append(LastUpdate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Platform (string) maxLength
            if (this.Platform != null && this.Platform.Length > 50)
            {
                yield return new ValidationResult("Invalid value for Platform, length must be less than 50.", new [] { "Platform" });
            }

            // UnionID (string) maxLength
            if (this.UnionID != null && this.UnionID.Length > 100)
            {
                yield return new ValidationResult("Invalid value for UnionID, length must be less than 100.", new [] { "UnionID" });
            }

            // NickName (string) maxLength
            if (this.NickName != null && this.NickName.Length > 50)
            {
                yield return new ValidationResult("Invalid value for NickName, length must be less than 50.", new [] { "NickName" });
            }

            // Avatar (string) maxLength
            if (this.Avatar != null && this.Avatar.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Avatar, length must be less than 255.", new [] { "Avatar" });
            }

            // UserName (string) maxLength
            if (this.UserName != null && this.UserName.Length > 50)
            {
                yield return new ValidationResult("Invalid value for UserName, length must be less than 50.", new [] { "UserName" });
            }

            // Pwd (string) maxLength
            if (this.Pwd != null && this.Pwd.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Pwd, length must be less than 255.", new [] { "Pwd" });
            }

            // Email (string) maxLength
            if (this.Email != null && this.Email.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Email, length must be less than 255.", new [] { "Email" });
            }

            // Phone (string) maxLength
            if (this.Phone != null && this.Phone.Length > 20)
            {
                yield return new ValidationResult("Invalid value for Phone, length must be less than 20.", new [] { "Phone" });
            }

            // Biography (string) maxLength
            if (this.Biography != null && this.Biography.Length > 500)
            {
                yield return new ValidationResult("Invalid value for Biography, length must be less than 500.", new [] { "Biography" });
            }

            // Gender (string) maxLength
            if (this.Gender != null && this.Gender.Length > 15)
            {
                yield return new ValidationResult("Invalid value for Gender, length must be less than 15.", new [] { "Gender" });
            }

            // Occupation (string) maxLength
            if (this.Occupation != null && this.Occupation.Length > 50)
            {
                yield return new ValidationResult("Invalid value for Occupation, length must be less than 50.", new [] { "Occupation" });
            }

            // Education (string) maxLength
            if (this.Education != null && this.Education.Length > 50)
            {
                yield return new ValidationResult("Invalid value for Education, length must be less than 50.", new [] { "Education" });
            }

            // Contact (string) maxLength
            if (this.Contact != null && this.Contact.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Contact, length must be less than 255.", new [] { "Contact" });
            }

            // Languages (string) maxLength
            if (this.Languages != null && this.Languages.Length > 50)
            {
                yield return new ValidationResult("Invalid value for Languages, length must be less than 50.", new [] { "Languages" });
            }

            // SocialLinks (string) maxLength
            if (this.SocialLinks != null && this.SocialLinks.Length > 255)
            {
                yield return new ValidationResult("Invalid value for SocialLinks, length must be less than 255.", new [] { "SocialLinks" });
            }

            // RelationshipStatus (string) maxLength
            if (this.RelationshipStatus != null && this.RelationshipStatus.Length > 20)
            {
                yield return new ValidationResult("Invalid value for RelationshipStatus, length must be less than 20.", new [] { "RelationshipStatus" });
            }

            // Company (string) maxLength
            if (this.Company != null && this.Company.Length > 100)
            {
                yield return new ValidationResult("Invalid value for Company, length must be less than 100.", new [] { "Company" });
            }

            // Industry (string) maxLength
            if (this.Industry != null && this.Industry.Length > 50)
            {
                yield return new ValidationResult("Invalid value for Industry, length must be less than 50.", new [] { "Industry" });
            }

            // CompanyPosition (string) maxLength
            if (this.CompanyPosition != null && this.CompanyPosition.Length > 50)
            {
                yield return new ValidationResult("Invalid value for CompanyPosition, length must be less than 50.", new [] { "CompanyPosition" });
            }

            // PrivateSettings (string) maxLength
            if (this.PrivateSettings != null && this.PrivateSettings.Length > 500)
            {
                yield return new ValidationResult("Invalid value for PrivateSettings, length must be less than 500.", new [] { "PrivateSettings" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="User" />
    /// </summary>
    public class UserJsonConverter : JsonConverter<User>
    {
        /// <summary>
        /// The format to use to serialize Birthday
        /// </summary>
        public static string BirthdayFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize LockUntil
        /// </summary>
        public static string LockUntilFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize CreateDate
        /// </summary>
        public static string CreateDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize LastUpdate
        /// </summary>
        public static string LastUpdateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="User" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override User Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> id = default;
            Option<string> platform = default;
            Option<string> unionID = default;
            Option<string> nickName = default;
            Option<string> avatar = default;
            Option<string> data = default;
            Option<string> userName = default;
            Option<string> pwd = default;
            Option<string> email = default;
            Option<bool?> emailIsValid = default;
            Option<string> phone = default;
            Option<bool?> phoneIsValid = default;
            Option<string> relationChain = default;
            Option<string> interestTags = default;
            Option<string> biography = default;
            Option<string> gender = default;
            Option<DateTime?> birthday = default;
            Option<string> occupation = default;
            Option<string> education = default;
            Option<string> contact = default;
            Option<string> languages = default;
            Option<string> socialLinks = default;
            Option<string> relationshipStatus = default;
            Option<string> company = default;
            Option<string> industry = default;
            Option<string> companyPosition = default;
            Option<string> privateSettings = default;
            Option<bool?> isLock = default;
            Option<DateTime?> lockUntil = default;
            Option<bool?> enableUserNameSignIn = default;
            Option<bool?> enableEmailSignIn = default;
            Option<bool?> enablePhoneSignIn = default;
            Option<bool?> enableUnionIDSignIn = default;
            Option<bool?> enableOAuth = default;
            Option<bool?> enable2FAAuth = default;
            Option<DateTime?> createDate = default;
            Option<DateTime?> lastUpdate = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "platform":
                            platform = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "unionID":
                            unionID = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "nickName":
                            nickName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "avatar":
                            avatar = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "data":
                            data = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "userName":
                            userName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "pwd":
                            pwd = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "email":
                            email = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "emailIsValid":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                emailIsValid = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "phone":
                            phone = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "phoneIsValid":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                phoneIsValid = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "relationChain":
                            relationChain = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "interestTags":
                            interestTags = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "biography":
                            biography = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "gender":
                            gender = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "birthday":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                birthday = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "occupation":
                            occupation = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "education":
                            education = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "contact":
                            contact = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "languages":
                            languages = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "socialLinks":
                            socialLinks = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "relationshipStatus":
                            relationshipStatus = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "company":
                            company = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "industry":
                            industry = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "companyPosition":
                            companyPosition = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "privateSettings":
                            privateSettings = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "isLock":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isLock = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "lockUntil":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lockUntil = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "enableUserNameSignIn":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                enableUserNameSignIn = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "enableEmailSignIn":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                enableEmailSignIn = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "enablePhoneSignIn":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                enablePhoneSignIn = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "enableUnionIDSignIn":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                enableUnionIDSignIn = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "enableOAuth":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                enableOAuth = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "enable2FAAuth":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                enable2FAAuth = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "createDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "lastUpdate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lastUpdate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class User.");

            if (emailIsValid.IsSet && emailIsValid.Value == null)
                throw new ArgumentNullException(nameof(emailIsValid), "Property is not nullable for class User.");

            if (phoneIsValid.IsSet && phoneIsValid.Value == null)
                throw new ArgumentNullException(nameof(phoneIsValid), "Property is not nullable for class User.");

            if (isLock.IsSet && isLock.Value == null)
                throw new ArgumentNullException(nameof(isLock), "Property is not nullable for class User.");

            if (lockUntil.IsSet && lockUntil.Value == null)
                throw new ArgumentNullException(nameof(lockUntil), "Property is not nullable for class User.");

            if (enableUserNameSignIn.IsSet && enableUserNameSignIn.Value == null)
                throw new ArgumentNullException(nameof(enableUserNameSignIn), "Property is not nullable for class User.");

            if (enableEmailSignIn.IsSet && enableEmailSignIn.Value == null)
                throw new ArgumentNullException(nameof(enableEmailSignIn), "Property is not nullable for class User.");

            if (enablePhoneSignIn.IsSet && enablePhoneSignIn.Value == null)
                throw new ArgumentNullException(nameof(enablePhoneSignIn), "Property is not nullable for class User.");

            if (enableUnionIDSignIn.IsSet && enableUnionIDSignIn.Value == null)
                throw new ArgumentNullException(nameof(enableUnionIDSignIn), "Property is not nullable for class User.");

            if (enableOAuth.IsSet && enableOAuth.Value == null)
                throw new ArgumentNullException(nameof(enableOAuth), "Property is not nullable for class User.");

            if (enable2FAAuth.IsSet && enable2FAAuth.Value == null)
                throw new ArgumentNullException(nameof(enable2FAAuth), "Property is not nullable for class User.");

            if (createDate.IsSet && createDate.Value == null)
                throw new ArgumentNullException(nameof(createDate), "Property is not nullable for class User.");

            if (lastUpdate.IsSet && lastUpdate.Value == null)
                throw new ArgumentNullException(nameof(lastUpdate), "Property is not nullable for class User.");

            return new User(id, platform, unionID, nickName, avatar, data, userName, pwd, email, emailIsValid, phone, phoneIsValid, relationChain, interestTags, biography, gender, birthday, occupation, education, contact, languages, socialLinks, relationshipStatus, company, industry, companyPosition, privateSettings, isLock, lockUntil, enableUserNameSignIn, enableEmailSignIn, enablePhoneSignIn, enableUnionIDSignIn, enableOAuth, enable2FAAuth, createDate, lastUpdate);
        }

        /// <summary>
        /// Serializes a <see cref="User" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="user"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, User user, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, user, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="User" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="user"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, User user, JsonSerializerOptions jsonSerializerOptions)
        {
            if (user.IdOption.IsSet)
                writer.WriteNumber("id", user.IdOption.Value.Value);

            if (user.PlatformOption.IsSet)
                if (user.PlatformOption.Value != null)
                    writer.WriteString("platform", user.Platform);
                else
                    writer.WriteNull("platform");

            if (user.UnionIDOption.IsSet)
                if (user.UnionIDOption.Value != null)
                    writer.WriteString("unionID", user.UnionID);
                else
                    writer.WriteNull("unionID");

            if (user.NickNameOption.IsSet)
                if (user.NickNameOption.Value != null)
                    writer.WriteString("nickName", user.NickName);
                else
                    writer.WriteNull("nickName");

            if (user.AvatarOption.IsSet)
                if (user.AvatarOption.Value != null)
                    writer.WriteString("avatar", user.Avatar);
                else
                    writer.WriteNull("avatar");

            if (user.DataOption.IsSet)
                if (user.DataOption.Value != null)
                    writer.WriteString("data", user.Data);
                else
                    writer.WriteNull("data");

            if (user.UserNameOption.IsSet)
                if (user.UserNameOption.Value != null)
                    writer.WriteString("userName", user.UserName);
                else
                    writer.WriteNull("userName");

            if (user.PwdOption.IsSet)
                if (user.PwdOption.Value != null)
                    writer.WriteString("pwd", user.Pwd);
                else
                    writer.WriteNull("pwd");

            if (user.EmailOption.IsSet)
                if (user.EmailOption.Value != null)
                    writer.WriteString("email", user.Email);
                else
                    writer.WriteNull("email");

            if (user.EmailIsValidOption.IsSet)
                writer.WriteBoolean("emailIsValid", user.EmailIsValidOption.Value.Value);

            if (user.PhoneOption.IsSet)
                if (user.PhoneOption.Value != null)
                    writer.WriteString("phone", user.Phone);
                else
                    writer.WriteNull("phone");

            if (user.PhoneIsValidOption.IsSet)
                writer.WriteBoolean("phoneIsValid", user.PhoneIsValidOption.Value.Value);

            if (user.RelationChainOption.IsSet)
                if (user.RelationChainOption.Value != null)
                    writer.WriteString("relationChain", user.RelationChain);
                else
                    writer.WriteNull("relationChain");

            if (user.InterestTagsOption.IsSet)
                if (user.InterestTagsOption.Value != null)
                    writer.WriteString("interestTags", user.InterestTags);
                else
                    writer.WriteNull("interestTags");

            if (user.BiographyOption.IsSet)
                if (user.BiographyOption.Value != null)
                    writer.WriteString("biography", user.Biography);
                else
                    writer.WriteNull("biography");

            if (user.GenderOption.IsSet)
                if (user.GenderOption.Value != null)
                    writer.WriteString("gender", user.Gender);
                else
                    writer.WriteNull("gender");

            if (user.BirthdayOption.IsSet)
                if (user.BirthdayOption.Value != null)
                    writer.WriteString("birthday", user.BirthdayOption.Value.Value.ToString(BirthdayFormat));
                else
                    writer.WriteNull("birthday");

            if (user.OccupationOption.IsSet)
                if (user.OccupationOption.Value != null)
                    writer.WriteString("occupation", user.Occupation);
                else
                    writer.WriteNull("occupation");

            if (user.EducationOption.IsSet)
                if (user.EducationOption.Value != null)
                    writer.WriteString("education", user.Education);
                else
                    writer.WriteNull("education");

            if (user.ContactOption.IsSet)
                if (user.ContactOption.Value != null)
                    writer.WriteString("contact", user.Contact);
                else
                    writer.WriteNull("contact");

            if (user.LanguagesOption.IsSet)
                if (user.LanguagesOption.Value != null)
                    writer.WriteString("languages", user.Languages);
                else
                    writer.WriteNull("languages");

            if (user.SocialLinksOption.IsSet)
                if (user.SocialLinksOption.Value != null)
                    writer.WriteString("socialLinks", user.SocialLinks);
                else
                    writer.WriteNull("socialLinks");

            if (user.RelationshipStatusOption.IsSet)
                if (user.RelationshipStatusOption.Value != null)
                    writer.WriteString("relationshipStatus", user.RelationshipStatus);
                else
                    writer.WriteNull("relationshipStatus");

            if (user.CompanyOption.IsSet)
                if (user.CompanyOption.Value != null)
                    writer.WriteString("company", user.Company);
                else
                    writer.WriteNull("company");

            if (user.IndustryOption.IsSet)
                if (user.IndustryOption.Value != null)
                    writer.WriteString("industry", user.Industry);
                else
                    writer.WriteNull("industry");

            if (user.CompanyPositionOption.IsSet)
                if (user.CompanyPositionOption.Value != null)
                    writer.WriteString("companyPosition", user.CompanyPosition);
                else
                    writer.WriteNull("companyPosition");

            if (user.PrivateSettingsOption.IsSet)
                if (user.PrivateSettingsOption.Value != null)
                    writer.WriteString("privateSettings", user.PrivateSettings);
                else
                    writer.WriteNull("privateSettings");

            if (user.IsLockOption.IsSet)
                writer.WriteBoolean("isLock", user.IsLockOption.Value.Value);

            if (user.LockUntilOption.IsSet)
                writer.WriteString("lockUntil", user.LockUntilOption.Value.Value.ToString(LockUntilFormat));

            if (user.EnableUserNameSignInOption.IsSet)
                writer.WriteBoolean("enableUserNameSignIn", user.EnableUserNameSignInOption.Value.Value);

            if (user.EnableEmailSignInOption.IsSet)
                writer.WriteBoolean("enableEmailSignIn", user.EnableEmailSignInOption.Value.Value);

            if (user.EnablePhoneSignInOption.IsSet)
                writer.WriteBoolean("enablePhoneSignIn", user.EnablePhoneSignInOption.Value.Value);

            if (user.EnableUnionIDSignInOption.IsSet)
                writer.WriteBoolean("enableUnionIDSignIn", user.EnableUnionIDSignInOption.Value.Value);

            if (user.EnableOAuthOption.IsSet)
                writer.WriteBoolean("enableOAuth", user.EnableOAuthOption.Value.Value);

            if (user.Enable2FAAuthOption.IsSet)
                writer.WriteBoolean("enable2FAAuth", user.Enable2FAAuthOption.Value.Value);

            if (user.CreateDateOption.IsSet)
                writer.WriteString("createDate", user.CreateDateOption.Value.Value.ToString(CreateDateFormat));

            if (user.LastUpdateOption.IsSet)
                writer.WriteString("lastUpdate", user.LastUpdateOption.Value.Value.ToString(LastUpdateFormat));
        }
    }
}
