// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using ZSGF.Client.Client;

namespace ZSGF.Client.Model
{
    /// <summary>
    /// ProfileResult
    /// </summary>
    public partial class ProfileResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileResult" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="unionID">unionID</param>
        /// <param name="phone">phone</param>
        /// <param name="createDate">createDate</param>
        /// <param name="userName">userName</param>
        /// <param name="phoneIsValid">phoneIsValid</param>
        /// <param name="data">data</param>
        /// <param name="email">email</param>
        /// <param name="emailIsValid">emailIsValid</param>
        /// <param name="lastUpdate">lastUpdate</param>
        /// <param name="nickName">nickName</param>
        /// <param name="avatar">avatar</param>
        /// <param name="role">role</param>
        /// <param name="permission">permission</param>
        [JsonConstructor]
        public ProfileResult(Option<long?> id = default, Option<string> unionID = default, Option<string> phone = default, Option<DateTime?> createDate = default, Option<string> userName = default, Option<bool?> phoneIsValid = default, Option<string> data = default, Option<string> email = default, Option<bool?> emailIsValid = default, Option<DateTime?> lastUpdate = default, Option<string> nickName = default, Option<string> avatar = default, Option<string> role = default, Option<string> permission = default)
        {
            IdOption = id;
            UnionIDOption = unionID;
            PhoneOption = phone;
            CreateDateOption = createDate;
            UserNameOption = userName;
            PhoneIsValidOption = phoneIsValid;
            DataOption = data;
            EmailOption = email;
            EmailIsValidOption = emailIsValid;
            LastUpdateOption = lastUpdate;
            NickNameOption = nickName;
            AvatarOption = avatar;
            RoleOption = role;
            PermissionOption = permission;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public long? Id { get { return this.IdOption; } set { this.IdOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of UnionID
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> UnionIDOption { get; private set; }

        /// <summary>
        /// Gets or Sets UnionID
        /// </summary>
        [JsonPropertyName("unionID")]
        public string UnionID { get { return this.UnionIDOption; } set { this.UnionIDOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Phone
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PhoneOption { get; private set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [JsonPropertyName("phone")]
        public string Phone { get { return this.PhoneOption; } set { this.PhoneOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CreateDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreateDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [JsonPropertyName("createDate")]
        public DateTime? CreateDate { get { return this.CreateDateOption; } set { this.CreateDateOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of UserName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> UserNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [JsonPropertyName("userName")]
        public string UserName { get { return this.UserNameOption; } set { this.UserNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PhoneIsValid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PhoneIsValidOption { get; private set; }

        /// <summary>
        /// Gets or Sets PhoneIsValid
        /// </summary>
        [JsonPropertyName("phoneIsValid")]
        public bool? PhoneIsValid { get { return this.PhoneIsValidOption; } set { this.PhoneIsValidOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Data
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DataOption { get; private set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [JsonPropertyName("data")]
        public string Data { get { return this.DataOption; } set { this.DataOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Email
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EmailOption { get; private set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [JsonPropertyName("email")]
        public string Email { get { return this.EmailOption; } set { this.EmailOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EmailIsValid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EmailIsValidOption { get; private set; }

        /// <summary>
        /// Gets or Sets EmailIsValid
        /// </summary>
        [JsonPropertyName("emailIsValid")]
        public bool? EmailIsValid { get { return this.EmailIsValidOption; } set { this.EmailIsValidOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of LastUpdate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastUpdateOption { get; private set; }

        /// <summary>
        /// Gets or Sets LastUpdate
        /// </summary>
        [JsonPropertyName("lastUpdate")]
        public DateTime? LastUpdate { get { return this.LastUpdateOption; } set { this.LastUpdateOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of NickName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NickNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets NickName
        /// </summary>
        [JsonPropertyName("nickName")]
        public string NickName { get { return this.NickNameOption; } set { this.NickNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Avatar
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AvatarOption { get; private set; }

        /// <summary>
        /// Gets or Sets Avatar
        /// </summary>
        [JsonPropertyName("avatar")]
        public string Avatar { get { return this.AvatarOption; } set { this.AvatarOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Role
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RoleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [JsonPropertyName("role")]
        public string Role { get { return this.RoleOption; } set { this.RoleOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Permission
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PermissionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Permission
        /// </summary>
        [JsonPropertyName("permission")]
        public string Permission { get { return this.PermissionOption; } set { this.PermissionOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProfileResult {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UnionID: ").Append(UnionID).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  PhoneIsValid: ").Append(PhoneIsValid).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  EmailIsValid: ").Append(EmailIsValid).Append("\n");
            sb.Append("  LastUpdate: ").Append(LastUpdate).Append("\n");
            sb.Append("  NickName: ").Append(NickName).Append("\n");
            sb.Append("  Avatar: ").Append(Avatar).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  Permission: ").Append(Permission).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ProfileResult" />
    /// </summary>
    public class ProfileResultJsonConverter : JsonConverter<ProfileResult>
    {
        /// <summary>
        /// The format to use to serialize CreateDate
        /// </summary>
        public static string CreateDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize LastUpdate
        /// </summary>
        public static string LastUpdateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="ProfileResult" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ProfileResult Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> id = default;
            Option<string> unionID = default;
            Option<string> phone = default;
            Option<DateTime?> createDate = default;
            Option<string> userName = default;
            Option<bool?> phoneIsValid = default;
            Option<string> data = default;
            Option<string> email = default;
            Option<bool?> emailIsValid = default;
            Option<DateTime?> lastUpdate = default;
            Option<string> nickName = default;
            Option<string> avatar = default;
            Option<string> role = default;
            Option<string> permission = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "unionID":
                            unionID = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "phone":
                            phone = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "createDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "userName":
                            userName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "phoneIsValid":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                phoneIsValid = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "data":
                            data = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "email":
                            email = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "emailIsValid":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                emailIsValid = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "lastUpdate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lastUpdate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "nickName":
                            nickName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "avatar":
                            avatar = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "role":
                            role = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "permission":
                            permission = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ProfileResult.");

            if (createDate.IsSet && createDate.Value == null)
                throw new ArgumentNullException(nameof(createDate), "Property is not nullable for class ProfileResult.");

            if (phoneIsValid.IsSet && phoneIsValid.Value == null)
                throw new ArgumentNullException(nameof(phoneIsValid), "Property is not nullable for class ProfileResult.");

            if (emailIsValid.IsSet && emailIsValid.Value == null)
                throw new ArgumentNullException(nameof(emailIsValid), "Property is not nullable for class ProfileResult.");

            if (lastUpdate.IsSet && lastUpdate.Value == null)
                throw new ArgumentNullException(nameof(lastUpdate), "Property is not nullable for class ProfileResult.");

            return new ProfileResult(id, unionID, phone, createDate, userName, phoneIsValid, data, email, emailIsValid, lastUpdate, nickName, avatar, role, permission);
        }

        /// <summary>
        /// Serializes a <see cref="ProfileResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="profileResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ProfileResult profileResult, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, profileResult, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ProfileResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="profileResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ProfileResult profileResult, JsonSerializerOptions jsonSerializerOptions)
        {
            if (profileResult.IdOption.IsSet)
                writer.WriteNumber("id", profileResult.IdOption.Value.Value);

            if (profileResult.UnionIDOption.IsSet)
                if (profileResult.UnionIDOption.Value != null)
                    writer.WriteString("unionID", profileResult.UnionID);
                else
                    writer.WriteNull("unionID");

            if (profileResult.PhoneOption.IsSet)
                if (profileResult.PhoneOption.Value != null)
                    writer.WriteString("phone", profileResult.Phone);
                else
                    writer.WriteNull("phone");

            if (profileResult.CreateDateOption.IsSet)
                writer.WriteString("createDate", profileResult.CreateDateOption.Value.Value.ToString(CreateDateFormat));

            if (profileResult.UserNameOption.IsSet)
                if (profileResult.UserNameOption.Value != null)
                    writer.WriteString("userName", profileResult.UserName);
                else
                    writer.WriteNull("userName");

            if (profileResult.PhoneIsValidOption.IsSet)
                writer.WriteBoolean("phoneIsValid", profileResult.PhoneIsValidOption.Value.Value);

            if (profileResult.DataOption.IsSet)
                if (profileResult.DataOption.Value != null)
                    writer.WriteString("data", profileResult.Data);
                else
                    writer.WriteNull("data");

            if (profileResult.EmailOption.IsSet)
                if (profileResult.EmailOption.Value != null)
                    writer.WriteString("email", profileResult.Email);
                else
                    writer.WriteNull("email");

            if (profileResult.EmailIsValidOption.IsSet)
                writer.WriteBoolean("emailIsValid", profileResult.EmailIsValidOption.Value.Value);

            if (profileResult.LastUpdateOption.IsSet)
                writer.WriteString("lastUpdate", profileResult.LastUpdateOption.Value.Value.ToString(LastUpdateFormat));

            if (profileResult.NickNameOption.IsSet)
                if (profileResult.NickNameOption.Value != null)
                    writer.WriteString("nickName", profileResult.NickName);
                else
                    writer.WriteNull("nickName");

            if (profileResult.AvatarOption.IsSet)
                if (profileResult.AvatarOption.Value != null)
                    writer.WriteString("avatar", profileResult.Avatar);
                else
                    writer.WriteNull("avatar");

            if (profileResult.RoleOption.IsSet)
                if (profileResult.RoleOption.Value != null)
                    writer.WriteString("role", profileResult.Role);
                else
                    writer.WriteNull("role");

            if (profileResult.PermissionOption.IsSet)
                if (profileResult.PermissionOption.Value != null)
                    writer.WriteString("permission", profileResult.Permission);
                else
                    writer.WriteNull("permission");
        }
    }
}
