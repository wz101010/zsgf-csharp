// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using ZSGF.Client.Client;

namespace ZSGF.Client.Model
{
    /// <summary>
    /// AlipayTradeRefundResponse
    /// </summary>
    public partial class AlipayTradeRefundResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlipayTradeRefundResponse" /> class.
        /// </summary>
        /// <param name="code">code</param>
        /// <param name="msg">msg</param>
        /// <param name="subCode">subCode</param>
        /// <param name="subMsg">subMsg</param>
        /// <param name="body">body</param>
        /// <param name="isError">isError</param>
        /// <param name="buyerLogonId">buyerLogonId</param>
        /// <param name="buyerOpenId">buyerOpenId</param>
        /// <param name="buyerUserId">buyerUserId</param>
        /// <param name="fundChange">fundChange</param>
        /// <param name="gmtRefundPay">gmtRefundPay</param>
        /// <param name="hasDepositBack">hasDepositBack</param>
        /// <param name="openId">openId</param>
        /// <param name="outTradeNo">outTradeNo</param>
        /// <param name="preAuthCancelFee">preAuthCancelFee</param>
        /// <param name="presentRefundBuyerAmount">presentRefundBuyerAmount</param>
        /// <param name="presentRefundDiscountAmount">presentRefundDiscountAmount</param>
        /// <param name="presentRefundMdiscountAmount">presentRefundMdiscountAmount</param>
        /// <param name="refundChargeAmount">refundChargeAmount</param>
        /// <param name="refundChargeInfoList">refundChargeInfoList</param>
        /// <param name="refundCurrency">refundCurrency</param>
        /// <param name="refundDetailItemList">refundDetailItemList</param>
        /// <param name="refundFee">refundFee</param>
        /// <param name="refundHybAmount">refundHybAmount</param>
        /// <param name="refundPresetPaytoolList">refundPresetPaytoolList</param>
        /// <param name="refundSettlementId">refundSettlementId</param>
        /// <param name="refundVoucherDetailList">refundVoucherDetailList</param>
        /// <param name="sendBackFee">sendBackFee</param>
        /// <param name="storeName">storeName</param>
        /// <param name="tradeNo">tradeNo</param>
        [JsonConstructor]
        public AlipayTradeRefundResponse(Option<string> code = default, Option<string> msg = default, Option<string> subCode = default, Option<string> subMsg = default, Option<string> body = default, Option<bool?> isError = default, Option<string> buyerLogonId = default, Option<string> buyerOpenId = default, Option<string> buyerUserId = default, Option<string> fundChange = default, Option<string> gmtRefundPay = default, Option<string> hasDepositBack = default, Option<string> openId = default, Option<string> outTradeNo = default, Option<string> preAuthCancelFee = default, Option<string> presentRefundBuyerAmount = default, Option<string> presentRefundDiscountAmount = default, Option<string> presentRefundMdiscountAmount = default, Option<string> refundChargeAmount = default, Option<List<RefundChargeInfo>> refundChargeInfoList = default, Option<string> refundCurrency = default, Option<List<TradeFundBill>> refundDetailItemList = default, Option<string> refundFee = default, Option<string> refundHybAmount = default, Option<PresetPayToolInfo> refundPresetPaytoolList = default, Option<string> refundSettlementId = default, Option<List<VoucherDetail>> refundVoucherDetailList = default, Option<string> sendBackFee = default, Option<string> storeName = default, Option<string> tradeNo = default)
        {
            CodeOption = code;
            MsgOption = msg;
            SubCodeOption = subCode;
            SubMsgOption = subMsg;
            BodyOption = body;
            IsErrorOption = isError;
            BuyerLogonIdOption = buyerLogonId;
            BuyerOpenIdOption = buyerOpenId;
            BuyerUserIdOption = buyerUserId;
            FundChangeOption = fundChange;
            GmtRefundPayOption = gmtRefundPay;
            HasDepositBackOption = hasDepositBack;
            OpenIdOption = openId;
            OutTradeNoOption = outTradeNo;
            PreAuthCancelFeeOption = preAuthCancelFee;
            PresentRefundBuyerAmountOption = presentRefundBuyerAmount;
            PresentRefundDiscountAmountOption = presentRefundDiscountAmount;
            PresentRefundMdiscountAmountOption = presentRefundMdiscountAmount;
            RefundChargeAmountOption = refundChargeAmount;
            RefundChargeInfoListOption = refundChargeInfoList;
            RefundCurrencyOption = refundCurrency;
            RefundDetailItemListOption = refundDetailItemList;
            RefundFeeOption = refundFee;
            RefundHybAmountOption = refundHybAmount;
            RefundPresetPaytoolListOption = refundPresetPaytoolList;
            RefundSettlementIdOption = refundSettlementId;
            RefundVoucherDetailListOption = refundVoucherDetailList;
            SendBackFeeOption = sendBackFee;
            StoreNameOption = storeName;
            TradeNoOption = tradeNo;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [JsonPropertyName("code")]
        public string Code { get { return this.CodeOption; } set { this.CodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Msg
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MsgOption { get; private set; }

        /// <summary>
        /// Gets or Sets Msg
        /// </summary>
        [JsonPropertyName("msg")]
        public string Msg { get { return this.MsgOption; } set { this.MsgOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SubCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubCodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets SubCode
        /// </summary>
        [JsonPropertyName("subCode")]
        public string SubCode { get { return this.SubCodeOption; } set { this.SubCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SubMsg
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubMsgOption { get; private set; }

        /// <summary>
        /// Gets or Sets SubMsg
        /// </summary>
        [JsonPropertyName("subMsg")]
        public string SubMsg { get { return this.SubMsgOption; } set { this.SubMsgOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Body
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BodyOption { get; private set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [JsonPropertyName("body")]
        public string Body { get { return this.BodyOption; } set { this.BodyOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of IsError
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsErrorOption { get; }

        /// <summary>
        /// Gets or Sets IsError
        /// </summary>
        [JsonPropertyName("isError")]
        public bool? IsError { get { return this.IsErrorOption; } }

        /// <summary>
        /// Used to track the state of BuyerLogonId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BuyerLogonIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets BuyerLogonId
        /// </summary>
        [JsonPropertyName("buyerLogonId")]
        public string BuyerLogonId { get { return this.BuyerLogonIdOption; } set { this.BuyerLogonIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of BuyerOpenId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BuyerOpenIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets BuyerOpenId
        /// </summary>
        [JsonPropertyName("buyerOpenId")]
        public string BuyerOpenId { get { return this.BuyerOpenIdOption; } set { this.BuyerOpenIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of BuyerUserId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BuyerUserIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets BuyerUserId
        /// </summary>
        [JsonPropertyName("buyerUserId")]
        public string BuyerUserId { get { return this.BuyerUserIdOption; } set { this.BuyerUserIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of FundChange
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> FundChangeOption { get; private set; }

        /// <summary>
        /// Gets or Sets FundChange
        /// </summary>
        [JsonPropertyName("fundChange")]
        public string FundChange { get { return this.FundChangeOption; } set { this.FundChangeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of GmtRefundPay
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> GmtRefundPayOption { get; private set; }

        /// <summary>
        /// Gets or Sets GmtRefundPay
        /// </summary>
        [JsonPropertyName("gmtRefundPay")]
        public string GmtRefundPay { get { return this.GmtRefundPayOption; } set { this.GmtRefundPayOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of HasDepositBack
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> HasDepositBackOption { get; private set; }

        /// <summary>
        /// Gets or Sets HasDepositBack
        /// </summary>
        [JsonPropertyName("hasDepositBack")]
        public string HasDepositBack { get { return this.HasDepositBackOption; } set { this.HasDepositBackOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OpenId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OpenIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets OpenId
        /// </summary>
        [JsonPropertyName("openId")]
        public string OpenId { get { return this.OpenIdOption; } set { this.OpenIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OutTradeNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OutTradeNoOption { get; private set; }

        /// <summary>
        /// Gets or Sets OutTradeNo
        /// </summary>
        [JsonPropertyName("outTradeNo")]
        public string OutTradeNo { get { return this.OutTradeNoOption; } set { this.OutTradeNoOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PreAuthCancelFee
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PreAuthCancelFeeOption { get; private set; }

        /// <summary>
        /// Gets or Sets PreAuthCancelFee
        /// </summary>
        [JsonPropertyName("preAuthCancelFee")]
        public string PreAuthCancelFee { get { return this.PreAuthCancelFeeOption; } set { this.PreAuthCancelFeeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PresentRefundBuyerAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PresentRefundBuyerAmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets PresentRefundBuyerAmount
        /// </summary>
        [JsonPropertyName("presentRefundBuyerAmount")]
        public string PresentRefundBuyerAmount { get { return this.PresentRefundBuyerAmountOption; } set { this.PresentRefundBuyerAmountOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PresentRefundDiscountAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PresentRefundDiscountAmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets PresentRefundDiscountAmount
        /// </summary>
        [JsonPropertyName("presentRefundDiscountAmount")]
        public string PresentRefundDiscountAmount { get { return this.PresentRefundDiscountAmountOption; } set { this.PresentRefundDiscountAmountOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PresentRefundMdiscountAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PresentRefundMdiscountAmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets PresentRefundMdiscountAmount
        /// </summary>
        [JsonPropertyName("presentRefundMdiscountAmount")]
        public string PresentRefundMdiscountAmount { get { return this.PresentRefundMdiscountAmountOption; } set { this.PresentRefundMdiscountAmountOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RefundChargeAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RefundChargeAmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets RefundChargeAmount
        /// </summary>
        [JsonPropertyName("refundChargeAmount")]
        public string RefundChargeAmount { get { return this.RefundChargeAmountOption; } set { this.RefundChargeAmountOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RefundChargeInfoList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<RefundChargeInfo>> RefundChargeInfoListOption { get; private set; }

        /// <summary>
        /// Gets or Sets RefundChargeInfoList
        /// </summary>
        [JsonPropertyName("refundChargeInfoList")]
        public List<RefundChargeInfo> RefundChargeInfoList { get { return this.RefundChargeInfoListOption; } set { this.RefundChargeInfoListOption = new Option<List<RefundChargeInfo>>(value); } }

        /// <summary>
        /// Used to track the state of RefundCurrency
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RefundCurrencyOption { get; private set; }

        /// <summary>
        /// Gets or Sets RefundCurrency
        /// </summary>
        [JsonPropertyName("refundCurrency")]
        public string RefundCurrency { get { return this.RefundCurrencyOption; } set { this.RefundCurrencyOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RefundDetailItemList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<TradeFundBill>> RefundDetailItemListOption { get; private set; }

        /// <summary>
        /// Gets or Sets RefundDetailItemList
        /// </summary>
        [JsonPropertyName("refundDetailItemList")]
        public List<TradeFundBill> RefundDetailItemList { get { return this.RefundDetailItemListOption; } set { this.RefundDetailItemListOption = new Option<List<TradeFundBill>>(value); } }

        /// <summary>
        /// Used to track the state of RefundFee
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RefundFeeOption { get; private set; }

        /// <summary>
        /// Gets or Sets RefundFee
        /// </summary>
        [JsonPropertyName("refundFee")]
        public string RefundFee { get { return this.RefundFeeOption; } set { this.RefundFeeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RefundHybAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RefundHybAmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets RefundHybAmount
        /// </summary>
        [JsonPropertyName("refundHybAmount")]
        public string RefundHybAmount { get { return this.RefundHybAmountOption; } set { this.RefundHybAmountOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RefundPresetPaytoolList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PresetPayToolInfo> RefundPresetPaytoolListOption { get; private set; }

        /// <summary>
        /// Gets or Sets RefundPresetPaytoolList
        /// </summary>
        [JsonPropertyName("refundPresetPaytoolList")]
        public PresetPayToolInfo RefundPresetPaytoolList { get { return this.RefundPresetPaytoolListOption; } set { this.RefundPresetPaytoolListOption = new Option<PresetPayToolInfo>(value); } }

        /// <summary>
        /// Used to track the state of RefundSettlementId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RefundSettlementIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets RefundSettlementId
        /// </summary>
        [JsonPropertyName("refundSettlementId")]
        public string RefundSettlementId { get { return this.RefundSettlementIdOption; } set { this.RefundSettlementIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RefundVoucherDetailList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<VoucherDetail>> RefundVoucherDetailListOption { get; private set; }

        /// <summary>
        /// Gets or Sets RefundVoucherDetailList
        /// </summary>
        [JsonPropertyName("refundVoucherDetailList")]
        public List<VoucherDetail> RefundVoucherDetailList { get { return this.RefundVoucherDetailListOption; } set { this.RefundVoucherDetailListOption = new Option<List<VoucherDetail>>(value); } }

        /// <summary>
        /// Used to track the state of SendBackFee
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SendBackFeeOption { get; private set; }

        /// <summary>
        /// Gets or Sets SendBackFee
        /// </summary>
        [JsonPropertyName("sendBackFee")]
        public string SendBackFee { get { return this.SendBackFeeOption; } set { this.SendBackFeeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of StoreName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> StoreNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets StoreName
        /// </summary>
        [JsonPropertyName("storeName")]
        public string StoreName { get { return this.StoreNameOption; } set { this.StoreNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TradeNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TradeNoOption { get; private set; }

        /// <summary>
        /// Gets or Sets TradeNo
        /// </summary>
        [JsonPropertyName("tradeNo")]
        public string TradeNo { get { return this.TradeNoOption; } set { this.TradeNoOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AlipayTradeRefundResponse {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Msg: ").Append(Msg).Append("\n");
            sb.Append("  SubCode: ").Append(SubCode).Append("\n");
            sb.Append("  SubMsg: ").Append(SubMsg).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  IsError: ").Append(IsError).Append("\n");
            sb.Append("  BuyerLogonId: ").Append(BuyerLogonId).Append("\n");
            sb.Append("  BuyerOpenId: ").Append(BuyerOpenId).Append("\n");
            sb.Append("  BuyerUserId: ").Append(BuyerUserId).Append("\n");
            sb.Append("  FundChange: ").Append(FundChange).Append("\n");
            sb.Append("  GmtRefundPay: ").Append(GmtRefundPay).Append("\n");
            sb.Append("  HasDepositBack: ").Append(HasDepositBack).Append("\n");
            sb.Append("  OpenId: ").Append(OpenId).Append("\n");
            sb.Append("  OutTradeNo: ").Append(OutTradeNo).Append("\n");
            sb.Append("  PreAuthCancelFee: ").Append(PreAuthCancelFee).Append("\n");
            sb.Append("  PresentRefundBuyerAmount: ").Append(PresentRefundBuyerAmount).Append("\n");
            sb.Append("  PresentRefundDiscountAmount: ").Append(PresentRefundDiscountAmount).Append("\n");
            sb.Append("  PresentRefundMdiscountAmount: ").Append(PresentRefundMdiscountAmount).Append("\n");
            sb.Append("  RefundChargeAmount: ").Append(RefundChargeAmount).Append("\n");
            sb.Append("  RefundChargeInfoList: ").Append(RefundChargeInfoList).Append("\n");
            sb.Append("  RefundCurrency: ").Append(RefundCurrency).Append("\n");
            sb.Append("  RefundDetailItemList: ").Append(RefundDetailItemList).Append("\n");
            sb.Append("  RefundFee: ").Append(RefundFee).Append("\n");
            sb.Append("  RefundHybAmount: ").Append(RefundHybAmount).Append("\n");
            sb.Append("  RefundPresetPaytoolList: ").Append(RefundPresetPaytoolList).Append("\n");
            sb.Append("  RefundSettlementId: ").Append(RefundSettlementId).Append("\n");
            sb.Append("  RefundVoucherDetailList: ").Append(RefundVoucherDetailList).Append("\n");
            sb.Append("  SendBackFee: ").Append(SendBackFee).Append("\n");
            sb.Append("  StoreName: ").Append(StoreName).Append("\n");
            sb.Append("  TradeNo: ").Append(TradeNo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AlipayTradeRefundResponse" />
    /// </summary>
    public class AlipayTradeRefundResponseJsonConverter : JsonConverter<AlipayTradeRefundResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="AlipayTradeRefundResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AlipayTradeRefundResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> code = default;
            Option<string> msg = default;
            Option<string> subCode = default;
            Option<string> subMsg = default;
            Option<string> body = default;
            Option<bool?> isError = default;
            Option<string> buyerLogonId = default;
            Option<string> buyerOpenId = default;
            Option<string> buyerUserId = default;
            Option<string> fundChange = default;
            Option<string> gmtRefundPay = default;
            Option<string> hasDepositBack = default;
            Option<string> openId = default;
            Option<string> outTradeNo = default;
            Option<string> preAuthCancelFee = default;
            Option<string> presentRefundBuyerAmount = default;
            Option<string> presentRefundDiscountAmount = default;
            Option<string> presentRefundMdiscountAmount = default;
            Option<string> refundChargeAmount = default;
            Option<List<RefundChargeInfo>> refundChargeInfoList = default;
            Option<string> refundCurrency = default;
            Option<List<TradeFundBill>> refundDetailItemList = default;
            Option<string> refundFee = default;
            Option<string> refundHybAmount = default;
            Option<PresetPayToolInfo> refundPresetPaytoolList = default;
            Option<string> refundSettlementId = default;
            Option<List<VoucherDetail>> refundVoucherDetailList = default;
            Option<string> sendBackFee = default;
            Option<string> storeName = default;
            Option<string> tradeNo = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "code":
                            code = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "msg":
                            msg = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "subCode":
                            subCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "subMsg":
                            subMsg = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "body":
                            body = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "isError":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isError = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "buyerLogonId":
                            buyerLogonId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "buyerOpenId":
                            buyerOpenId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "buyerUserId":
                            buyerUserId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "fundChange":
                            fundChange = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "gmtRefundPay":
                            gmtRefundPay = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "hasDepositBack":
                            hasDepositBack = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "openId":
                            openId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "outTradeNo":
                            outTradeNo = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "preAuthCancelFee":
                            preAuthCancelFee = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "presentRefundBuyerAmount":
                            presentRefundBuyerAmount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "presentRefundDiscountAmount":
                            presentRefundDiscountAmount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "presentRefundMdiscountAmount":
                            presentRefundMdiscountAmount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "refundChargeAmount":
                            refundChargeAmount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "refundChargeInfoList":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                refundChargeInfoList = new Option<List<RefundChargeInfo>>(JsonSerializer.Deserialize<List<RefundChargeInfo>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "refundCurrency":
                            refundCurrency = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "refundDetailItemList":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                refundDetailItemList = new Option<List<TradeFundBill>>(JsonSerializer.Deserialize<List<TradeFundBill>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "refundFee":
                            refundFee = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "refundHybAmount":
                            refundHybAmount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "refundPresetPaytoolList":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                refundPresetPaytoolList = new Option<PresetPayToolInfo>(JsonSerializer.Deserialize<PresetPayToolInfo>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "refundSettlementId":
                            refundSettlementId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "refundVoucherDetailList":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                refundVoucherDetailList = new Option<List<VoucherDetail>>(JsonSerializer.Deserialize<List<VoucherDetail>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "sendBackFee":
                            sendBackFee = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "storeName":
                            storeName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "tradeNo":
                            tradeNo = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (isError.IsSet && isError.Value == null)
                throw new ArgumentNullException(nameof(isError), "Property is not nullable for class AlipayTradeRefundResponse.");

            if (refundPresetPaytoolList.IsSet && refundPresetPaytoolList.Value == null)
                throw new ArgumentNullException(nameof(refundPresetPaytoolList), "Property is not nullable for class AlipayTradeRefundResponse.");

            return new AlipayTradeRefundResponse(code, msg, subCode, subMsg, body, isError, buyerLogonId, buyerOpenId, buyerUserId, fundChange, gmtRefundPay, hasDepositBack, openId, outTradeNo, preAuthCancelFee, presentRefundBuyerAmount, presentRefundDiscountAmount, presentRefundMdiscountAmount, refundChargeAmount, refundChargeInfoList, refundCurrency, refundDetailItemList, refundFee, refundHybAmount, refundPresetPaytoolList, refundSettlementId, refundVoucherDetailList, sendBackFee, storeName, tradeNo);
        }

        /// <summary>
        /// Serializes a <see cref="AlipayTradeRefundResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="alipayTradeRefundResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AlipayTradeRefundResponse alipayTradeRefundResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, alipayTradeRefundResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AlipayTradeRefundResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="alipayTradeRefundResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AlipayTradeRefundResponse alipayTradeRefundResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (alipayTradeRefundResponse.RefundPresetPaytoolListOption.IsSet && alipayTradeRefundResponse.RefundPresetPaytoolList == null)
                throw new ArgumentNullException(nameof(alipayTradeRefundResponse.RefundPresetPaytoolList), "Property is required for class AlipayTradeRefundResponse.");

            if (alipayTradeRefundResponse.CodeOption.IsSet)
                if (alipayTradeRefundResponse.CodeOption.Value != null)
                    writer.WriteString("code", alipayTradeRefundResponse.Code);
                else
                    writer.WriteNull("code");

            if (alipayTradeRefundResponse.MsgOption.IsSet)
                if (alipayTradeRefundResponse.MsgOption.Value != null)
                    writer.WriteString("msg", alipayTradeRefundResponse.Msg);
                else
                    writer.WriteNull("msg");

            if (alipayTradeRefundResponse.SubCodeOption.IsSet)
                if (alipayTradeRefundResponse.SubCodeOption.Value != null)
                    writer.WriteString("subCode", alipayTradeRefundResponse.SubCode);
                else
                    writer.WriteNull("subCode");

            if (alipayTradeRefundResponse.SubMsgOption.IsSet)
                if (alipayTradeRefundResponse.SubMsgOption.Value != null)
                    writer.WriteString("subMsg", alipayTradeRefundResponse.SubMsg);
                else
                    writer.WriteNull("subMsg");

            if (alipayTradeRefundResponse.BodyOption.IsSet)
                if (alipayTradeRefundResponse.BodyOption.Value != null)
                    writer.WriteString("body", alipayTradeRefundResponse.Body);
                else
                    writer.WriteNull("body");

            if (alipayTradeRefundResponse.IsErrorOption.IsSet)
                writer.WriteBoolean("isError", alipayTradeRefundResponse.IsErrorOption.Value.Value);

            if (alipayTradeRefundResponse.BuyerLogonIdOption.IsSet)
                if (alipayTradeRefundResponse.BuyerLogonIdOption.Value != null)
                    writer.WriteString("buyerLogonId", alipayTradeRefundResponse.BuyerLogonId);
                else
                    writer.WriteNull("buyerLogonId");

            if (alipayTradeRefundResponse.BuyerOpenIdOption.IsSet)
                if (alipayTradeRefundResponse.BuyerOpenIdOption.Value != null)
                    writer.WriteString("buyerOpenId", alipayTradeRefundResponse.BuyerOpenId);
                else
                    writer.WriteNull("buyerOpenId");

            if (alipayTradeRefundResponse.BuyerUserIdOption.IsSet)
                if (alipayTradeRefundResponse.BuyerUserIdOption.Value != null)
                    writer.WriteString("buyerUserId", alipayTradeRefundResponse.BuyerUserId);
                else
                    writer.WriteNull("buyerUserId");

            if (alipayTradeRefundResponse.FundChangeOption.IsSet)
                if (alipayTradeRefundResponse.FundChangeOption.Value != null)
                    writer.WriteString("fundChange", alipayTradeRefundResponse.FundChange);
                else
                    writer.WriteNull("fundChange");

            if (alipayTradeRefundResponse.GmtRefundPayOption.IsSet)
                if (alipayTradeRefundResponse.GmtRefundPayOption.Value != null)
                    writer.WriteString("gmtRefundPay", alipayTradeRefundResponse.GmtRefundPay);
                else
                    writer.WriteNull("gmtRefundPay");

            if (alipayTradeRefundResponse.HasDepositBackOption.IsSet)
                if (alipayTradeRefundResponse.HasDepositBackOption.Value != null)
                    writer.WriteString("hasDepositBack", alipayTradeRefundResponse.HasDepositBack);
                else
                    writer.WriteNull("hasDepositBack");

            if (alipayTradeRefundResponse.OpenIdOption.IsSet)
                if (alipayTradeRefundResponse.OpenIdOption.Value != null)
                    writer.WriteString("openId", alipayTradeRefundResponse.OpenId);
                else
                    writer.WriteNull("openId");

            if (alipayTradeRefundResponse.OutTradeNoOption.IsSet)
                if (alipayTradeRefundResponse.OutTradeNoOption.Value != null)
                    writer.WriteString("outTradeNo", alipayTradeRefundResponse.OutTradeNo);
                else
                    writer.WriteNull("outTradeNo");

            if (alipayTradeRefundResponse.PreAuthCancelFeeOption.IsSet)
                if (alipayTradeRefundResponse.PreAuthCancelFeeOption.Value != null)
                    writer.WriteString("preAuthCancelFee", alipayTradeRefundResponse.PreAuthCancelFee);
                else
                    writer.WriteNull("preAuthCancelFee");

            if (alipayTradeRefundResponse.PresentRefundBuyerAmountOption.IsSet)
                if (alipayTradeRefundResponse.PresentRefundBuyerAmountOption.Value != null)
                    writer.WriteString("presentRefundBuyerAmount", alipayTradeRefundResponse.PresentRefundBuyerAmount);
                else
                    writer.WriteNull("presentRefundBuyerAmount");

            if (alipayTradeRefundResponse.PresentRefundDiscountAmountOption.IsSet)
                if (alipayTradeRefundResponse.PresentRefundDiscountAmountOption.Value != null)
                    writer.WriteString("presentRefundDiscountAmount", alipayTradeRefundResponse.PresentRefundDiscountAmount);
                else
                    writer.WriteNull("presentRefundDiscountAmount");

            if (alipayTradeRefundResponse.PresentRefundMdiscountAmountOption.IsSet)
                if (alipayTradeRefundResponse.PresentRefundMdiscountAmountOption.Value != null)
                    writer.WriteString("presentRefundMdiscountAmount", alipayTradeRefundResponse.PresentRefundMdiscountAmount);
                else
                    writer.WriteNull("presentRefundMdiscountAmount");

            if (alipayTradeRefundResponse.RefundChargeAmountOption.IsSet)
                if (alipayTradeRefundResponse.RefundChargeAmountOption.Value != null)
                    writer.WriteString("refundChargeAmount", alipayTradeRefundResponse.RefundChargeAmount);
                else
                    writer.WriteNull("refundChargeAmount");

            if (alipayTradeRefundResponse.RefundChargeInfoListOption.IsSet)
                if (alipayTradeRefundResponse.RefundChargeInfoListOption.Value != null)
                {
                    writer.WritePropertyName("refundChargeInfoList");
                    JsonSerializer.Serialize(writer, alipayTradeRefundResponse.RefundChargeInfoList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("refundChargeInfoList");
            if (alipayTradeRefundResponse.RefundCurrencyOption.IsSet)
                if (alipayTradeRefundResponse.RefundCurrencyOption.Value != null)
                    writer.WriteString("refundCurrency", alipayTradeRefundResponse.RefundCurrency);
                else
                    writer.WriteNull("refundCurrency");

            if (alipayTradeRefundResponse.RefundDetailItemListOption.IsSet)
                if (alipayTradeRefundResponse.RefundDetailItemListOption.Value != null)
                {
                    writer.WritePropertyName("refundDetailItemList");
                    JsonSerializer.Serialize(writer, alipayTradeRefundResponse.RefundDetailItemList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("refundDetailItemList");
            if (alipayTradeRefundResponse.RefundFeeOption.IsSet)
                if (alipayTradeRefundResponse.RefundFeeOption.Value != null)
                    writer.WriteString("refundFee", alipayTradeRefundResponse.RefundFee);
                else
                    writer.WriteNull("refundFee");

            if (alipayTradeRefundResponse.RefundHybAmountOption.IsSet)
                if (alipayTradeRefundResponse.RefundHybAmountOption.Value != null)
                    writer.WriteString("refundHybAmount", alipayTradeRefundResponse.RefundHybAmount);
                else
                    writer.WriteNull("refundHybAmount");

            if (alipayTradeRefundResponse.RefundPresetPaytoolListOption.IsSet)
            {
                writer.WritePropertyName("refundPresetPaytoolList");
                JsonSerializer.Serialize(writer, alipayTradeRefundResponse.RefundPresetPaytoolList, jsonSerializerOptions);
            }
            if (alipayTradeRefundResponse.RefundSettlementIdOption.IsSet)
                if (alipayTradeRefundResponse.RefundSettlementIdOption.Value != null)
                    writer.WriteString("refundSettlementId", alipayTradeRefundResponse.RefundSettlementId);
                else
                    writer.WriteNull("refundSettlementId");

            if (alipayTradeRefundResponse.RefundVoucherDetailListOption.IsSet)
                if (alipayTradeRefundResponse.RefundVoucherDetailListOption.Value != null)
                {
                    writer.WritePropertyName("refundVoucherDetailList");
                    JsonSerializer.Serialize(writer, alipayTradeRefundResponse.RefundVoucherDetailList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("refundVoucherDetailList");
            if (alipayTradeRefundResponse.SendBackFeeOption.IsSet)
                if (alipayTradeRefundResponse.SendBackFeeOption.Value != null)
                    writer.WriteString("sendBackFee", alipayTradeRefundResponse.SendBackFee);
                else
                    writer.WriteNull("sendBackFee");

            if (alipayTradeRefundResponse.StoreNameOption.IsSet)
                if (alipayTradeRefundResponse.StoreNameOption.Value != null)
                    writer.WriteString("storeName", alipayTradeRefundResponse.StoreName);
                else
                    writer.WriteNull("storeName");

            if (alipayTradeRefundResponse.TradeNoOption.IsSet)
                if (alipayTradeRefundResponse.TradeNoOption.Value != null)
                    writer.WriteString("tradeNo", alipayTradeRefundResponse.TradeNo);
                else
                    writer.WriteNull("tradeNo");
        }
    }
}
