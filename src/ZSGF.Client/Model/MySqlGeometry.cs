// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using ZSGF.Client.Client;

namespace ZSGF.Client.Model
{
    /// <summary>
    /// MySqlGeometry
    /// </summary>
    public partial class MySqlGeometry : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MySqlGeometry" /> class.
        /// </summary>
        /// <param name="xCoordinate">xCoordinate</param>
        /// <param name="yCoordinate">yCoordinate</param>
        /// <param name="srid">srid</param>
        /// <param name="isNull">isNull</param>
        /// <param name="value">value</param>
        [JsonConstructor]
        public MySqlGeometry(Option<double?> xCoordinate = default, Option<double?> yCoordinate = default, Option<int?> srid = default, Option<bool?> isNull = default, Option<byte[]> value = default)
        {
            XCoordinateOption = xCoordinate;
            YCoordinateOption = yCoordinate;
            SridOption = srid;
            IsNullOption = isNull;
            ValueOption = value;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of XCoordinate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> XCoordinateOption { get; }

        /// <summary>
        /// Gets or Sets XCoordinate
        /// </summary>
        [JsonPropertyName("xCoordinate")]
        public double? XCoordinate { get { return this.XCoordinateOption; } }

        /// <summary>
        /// Used to track the state of YCoordinate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> YCoordinateOption { get; }

        /// <summary>
        /// Gets or Sets YCoordinate
        /// </summary>
        [JsonPropertyName("yCoordinate")]
        public double? YCoordinate { get { return this.YCoordinateOption; } }

        /// <summary>
        /// Used to track the state of Srid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SridOption { get; }

        /// <summary>
        /// Gets or Sets Srid
        /// </summary>
        [JsonPropertyName("srid")]
        public int? Srid { get { return this.SridOption; } }

        /// <summary>
        /// Used to track the state of IsNull
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsNullOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsNull
        /// </summary>
        [JsonPropertyName("isNull")]
        public bool? IsNull { get { return this.IsNullOption; } set { this.IsNullOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Value
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<byte[]> ValueOption { get; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [JsonPropertyName("value")]
        public byte[] Value { get { return this.ValueOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MySqlGeometry {\n");
            sb.Append("  XCoordinate: ").Append(XCoordinate).Append("\n");
            sb.Append("  YCoordinate: ").Append(YCoordinate).Append("\n");
            sb.Append("  Srid: ").Append(Srid).Append("\n");
            sb.Append("  IsNull: ").Append(IsNull).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MySqlGeometry" />
    /// </summary>
    public class MySqlGeometryJsonConverter : JsonConverter<MySqlGeometry>
    {
        /// <summary>
        /// Deserializes json to <see cref="MySqlGeometry" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MySqlGeometry Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<double?> xCoordinate = default;
            Option<double?> yCoordinate = default;
            Option<int?> srid = default;
            Option<bool?> isNull = default;
            Option<byte[]> value = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "xCoordinate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                xCoordinate = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "yCoordinate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                yCoordinate = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "srid":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                srid = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "isNull":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isNull = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "value":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                value = new Option<byte[]>(JsonSerializer.Deserialize<byte[]>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (isNull.IsSet && isNull.Value == null)
                throw new ArgumentNullException(nameof(isNull), "Property is not nullable for class MySqlGeometry.");

            return new MySqlGeometry(xCoordinate, yCoordinate, srid, isNull, value);
        }

        /// <summary>
        /// Serializes a <see cref="MySqlGeometry" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="mySqlGeometry"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MySqlGeometry mySqlGeometry, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, mySqlGeometry, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="MySqlGeometry" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="mySqlGeometry"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, MySqlGeometry mySqlGeometry, JsonSerializerOptions jsonSerializerOptions)
        {
            if (mySqlGeometry.XCoordinateOption.IsSet)
                if (mySqlGeometry.XCoordinateOption.Value != null)
                    writer.WriteNumber("xCoordinate", mySqlGeometry.XCoordinateOption.Value.Value);
                else
                    writer.WriteNull("xCoordinate");

            if (mySqlGeometry.YCoordinateOption.IsSet)
                if (mySqlGeometry.YCoordinateOption.Value != null)
                    writer.WriteNumber("yCoordinate", mySqlGeometry.YCoordinateOption.Value.Value);
                else
                    writer.WriteNull("yCoordinate");

            if (mySqlGeometry.SridOption.IsSet)
                if (mySqlGeometry.SridOption.Value != null)
                    writer.WriteNumber("srid", mySqlGeometry.SridOption.Value.Value);
                else
                    writer.WriteNull("srid");

            if (mySqlGeometry.IsNullOption.IsSet)
                writer.WriteBoolean("isNull", mySqlGeometry.IsNullOption.Value.Value);

            if (mySqlGeometry.ValueOption.IsSet)
                if (mySqlGeometry.ValueOption.Value != null)
                {
                    writer.WritePropertyName("value");
                    JsonSerializer.Serialize(writer, mySqlGeometry.Value, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("value");
        }
    }
}
