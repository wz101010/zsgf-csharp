// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using ZSGF.Client.Client;

namespace ZSGF.Client.Model
{
    /// <summary>
    /// AlipayTradeQueryResponse
    /// </summary>
    public partial class AlipayTradeQueryResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlipayTradeQueryResponse" /> class.
        /// </summary>
        /// <param name="code">code</param>
        /// <param name="msg">msg</param>
        /// <param name="subCode">subCode</param>
        /// <param name="subMsg">subMsg</param>
        /// <param name="isError">isError</param>
        /// <param name="additionalStatus">additionalStatus</param>
        /// <param name="alipayStoreId">alipayStoreId</param>
        /// <param name="alipaySubMerchantId">alipaySubMerchantId</param>
        /// <param name="asyncPayApplyStatus">asyncPayApplyStatus</param>
        /// <param name="authTradePayMode">authTradePayMode</param>
        /// <param name="bizSettleMode">bizSettleMode</param>
        /// <param name="bkagentRespInfo">bkagentRespInfo</param>
        /// <param name="body">body</param>
        /// <param name="buyerLogonId">buyerLogonId</param>
        /// <param name="buyerOpenId">buyerOpenId</param>
        /// <param name="buyerPayAmount">buyerPayAmount</param>
        /// <param name="buyerUserId">buyerUserId</param>
        /// <param name="buyerUserName">buyerUserName</param>
        /// <param name="buyerUserType">buyerUserType</param>
        /// <param name="cashierType">cashierType</param>
        /// <param name="chargeAmount">chargeAmount</param>
        /// <param name="chargeFlags">chargeFlags</param>
        /// <param name="chargeInfoList">chargeInfoList</param>
        /// <param name="creditBizOrderId">creditBizOrderId</param>
        /// <param name="creditPayMode">creditPayMode</param>
        /// <param name="discountAmount">discountAmount</param>
        /// <param name="discountGoodsDetail">discountGoodsDetail</param>
        /// <param name="enterprisePayInfo">enterprisePayInfo</param>
        /// <param name="extInfos">extInfos</param>
        /// <param name="fulfillmentDetailList">fulfillmentDetailList</param>
        /// <param name="fundBillList">fundBillList</param>
        /// <param name="hbFqPayInfo">hbFqPayInfo</param>
        /// <param name="hybAmount">hybAmount</param>
        /// <param name="industrySepcDetail">industrySepcDetail</param>
        /// <param name="industrySepcDetailAcc">industrySepcDetailAcc</param>
        /// <param name="industrySepcDetailGov">industrySepcDetailGov</param>
        /// <param name="intactChargeInfoList">intactChargeInfoList</param>
        /// <param name="invoiceAmount">invoiceAmount</param>
        /// <param name="mdiscountAmount">mdiscountAmount</param>
        /// <param name="medicalInsuranceInfo">medicalInsuranceInfo</param>
        /// <param name="openId">openId</param>
        /// <param name="outTradeNo">outTradeNo</param>
        /// <param name="passbackParams">passbackParams</param>
        /// <param name="payAmount">payAmount</param>
        /// <param name="payCurrency">payCurrency</param>
        /// <param name="paymentInfoWithIdList">paymentInfoWithIdList</param>
        /// <param name="periodScene">periodScene</param>
        /// <param name="pointAmount">pointAmount</param>
        /// <param name="preAuthPayAmount">preAuthPayAmount</param>
        /// <param name="receiptAmount">receiptAmount</param>
        /// <param name="receiptCurrencyType">receiptCurrencyType</param>
        /// <param name="reqGoodsDetail">reqGoodsDetail</param>
        /// <param name="sendPayDate">sendPayDate</param>
        /// <param name="settleAmount">settleAmount</param>
        /// <param name="settleCurrency">settleCurrency</param>
        /// <param name="settleTransRate">settleTransRate</param>
        /// <param name="settlementId">settlementId</param>
        /// <param name="storeId">storeId</param>
        /// <param name="storeName">storeName</param>
        /// <param name="subject">subject</param>
        /// <param name="tapPayInfo">tapPayInfo</param>
        /// <param name="terminalId">terminalId</param>
        /// <param name="totalAmount">totalAmount</param>
        /// <param name="tradeNo">tradeNo</param>
        /// <param name="tradeSettleInfo">tradeSettleInfo</param>
        /// <param name="tradeStatus">tradeStatus</param>
        /// <param name="transCurrency">transCurrency</param>
        /// <param name="transPayRate">transPayRate</param>
        /// <param name="voucherDetailList">voucherDetailList</param>
        [JsonConstructor]
        public AlipayTradeQueryResponse(Option<string> code = default, Option<string> msg = default, Option<string> subCode = default, Option<string> subMsg = default, Option<bool?> isError = default, Option<string> additionalStatus = default, Option<string> alipayStoreId = default, Option<string> alipaySubMerchantId = default, Option<string> asyncPayApplyStatus = default, Option<string> authTradePayMode = default, Option<string> bizSettleMode = default, Option<BkAgentRespInfo> bkagentRespInfo = default, Option<string> body = default, Option<string> buyerLogonId = default, Option<string> buyerOpenId = default, Option<string> buyerPayAmount = default, Option<string> buyerUserId = default, Option<string> buyerUserName = default, Option<string> buyerUserType = default, Option<string> cashierType = default, Option<string> chargeAmount = default, Option<string> chargeFlags = default, Option<List<ChargeInfo>> chargeInfoList = default, Option<string> creditBizOrderId = default, Option<string> creditPayMode = default, Option<string> discountAmount = default, Option<string> discountGoodsDetail = default, Option<EnterprisePayInfo> enterprisePayInfo = default, Option<string> extInfos = default, Option<List<FulfillmentDetail>> fulfillmentDetailList = default, Option<List<TradeFundBill>> fundBillList = default, Option<HbFqPayInfo> hbFqPayInfo = default, Option<string> hybAmount = default, Option<string> industrySepcDetail = default, Option<string> industrySepcDetailAcc = default, Option<string> industrySepcDetailGov = default, Option<List<IntactChargeInfo>> intactChargeInfoList = default, Option<string> invoiceAmount = default, Option<string> mdiscountAmount = default, Option<string> medicalInsuranceInfo = default, Option<string> openId = default, Option<string> outTradeNo = default, Option<string> passbackParams = default, Option<string> payAmount = default, Option<string> payCurrency = default, Option<List<PaymentInfoWithId>> paymentInfoWithIdList = default, Option<string> periodScene = default, Option<string> pointAmount = default, Option<string> preAuthPayAmount = default, Option<string> receiptAmount = default, Option<string> receiptCurrencyType = default, Option<List<GoodsDetail>> reqGoodsDetail = default, Option<string> sendPayDate = default, Option<string> settleAmount = default, Option<string> settleCurrency = default, Option<string> settleTransRate = default, Option<string> settlementId = default, Option<string> storeId = default, Option<string> storeName = default, Option<string> subject = default, Option<TapPayInfo> tapPayInfo = default, Option<string> terminalId = default, Option<string> totalAmount = default, Option<string> tradeNo = default, Option<TradeSettleInfo> tradeSettleInfo = default, Option<string> tradeStatus = default, Option<string> transCurrency = default, Option<string> transPayRate = default, Option<List<VoucherDetail>> voucherDetailList = default)
        {
            CodeOption = code;
            MsgOption = msg;
            SubCodeOption = subCode;
            SubMsgOption = subMsg;
            IsErrorOption = isError;
            AdditionalStatusOption = additionalStatus;
            AlipayStoreIdOption = alipayStoreId;
            AlipaySubMerchantIdOption = alipaySubMerchantId;
            AsyncPayApplyStatusOption = asyncPayApplyStatus;
            AuthTradePayModeOption = authTradePayMode;
            BizSettleModeOption = bizSettleMode;
            BkagentRespInfoOption = bkagentRespInfo;
            BodyOption = body;
            BuyerLogonIdOption = buyerLogonId;
            BuyerOpenIdOption = buyerOpenId;
            BuyerPayAmountOption = buyerPayAmount;
            BuyerUserIdOption = buyerUserId;
            BuyerUserNameOption = buyerUserName;
            BuyerUserTypeOption = buyerUserType;
            CashierTypeOption = cashierType;
            ChargeAmountOption = chargeAmount;
            ChargeFlagsOption = chargeFlags;
            ChargeInfoListOption = chargeInfoList;
            CreditBizOrderIdOption = creditBizOrderId;
            CreditPayModeOption = creditPayMode;
            DiscountAmountOption = discountAmount;
            DiscountGoodsDetailOption = discountGoodsDetail;
            EnterprisePayInfoOption = enterprisePayInfo;
            ExtInfosOption = extInfos;
            FulfillmentDetailListOption = fulfillmentDetailList;
            FundBillListOption = fundBillList;
            HbFqPayInfoOption = hbFqPayInfo;
            HybAmountOption = hybAmount;
            IndustrySepcDetailOption = industrySepcDetail;
            IndustrySepcDetailAccOption = industrySepcDetailAcc;
            IndustrySepcDetailGovOption = industrySepcDetailGov;
            IntactChargeInfoListOption = intactChargeInfoList;
            InvoiceAmountOption = invoiceAmount;
            MdiscountAmountOption = mdiscountAmount;
            MedicalInsuranceInfoOption = medicalInsuranceInfo;
            OpenIdOption = openId;
            OutTradeNoOption = outTradeNo;
            PassbackParamsOption = passbackParams;
            PayAmountOption = payAmount;
            PayCurrencyOption = payCurrency;
            PaymentInfoWithIdListOption = paymentInfoWithIdList;
            PeriodSceneOption = periodScene;
            PointAmountOption = pointAmount;
            PreAuthPayAmountOption = preAuthPayAmount;
            ReceiptAmountOption = receiptAmount;
            ReceiptCurrencyTypeOption = receiptCurrencyType;
            ReqGoodsDetailOption = reqGoodsDetail;
            SendPayDateOption = sendPayDate;
            SettleAmountOption = settleAmount;
            SettleCurrencyOption = settleCurrency;
            SettleTransRateOption = settleTransRate;
            SettlementIdOption = settlementId;
            StoreIdOption = storeId;
            StoreNameOption = storeName;
            SubjectOption = subject;
            TapPayInfoOption = tapPayInfo;
            TerminalIdOption = terminalId;
            TotalAmountOption = totalAmount;
            TradeNoOption = tradeNo;
            TradeSettleInfoOption = tradeSettleInfo;
            TradeStatusOption = tradeStatus;
            TransCurrencyOption = transCurrency;
            TransPayRateOption = transPayRate;
            VoucherDetailListOption = voucherDetailList;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [JsonPropertyName("code")]
        public string Code { get { return this.CodeOption; } set { this.CodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Msg
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MsgOption { get; private set; }

        /// <summary>
        /// Gets or Sets Msg
        /// </summary>
        [JsonPropertyName("msg")]
        public string Msg { get { return this.MsgOption; } set { this.MsgOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SubCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubCodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets SubCode
        /// </summary>
        [JsonPropertyName("subCode")]
        public string SubCode { get { return this.SubCodeOption; } set { this.SubCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SubMsg
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubMsgOption { get; private set; }

        /// <summary>
        /// Gets or Sets SubMsg
        /// </summary>
        [JsonPropertyName("subMsg")]
        public string SubMsg { get { return this.SubMsgOption; } set { this.SubMsgOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of IsError
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsErrorOption { get; }

        /// <summary>
        /// Gets or Sets IsError
        /// </summary>
        [JsonPropertyName("isError")]
        public bool? IsError { get { return this.IsErrorOption; } }

        /// <summary>
        /// Used to track the state of AdditionalStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AdditionalStatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets AdditionalStatus
        /// </summary>
        [JsonPropertyName("additionalStatus")]
        public string AdditionalStatus { get { return this.AdditionalStatusOption; } set { this.AdditionalStatusOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AlipayStoreId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AlipayStoreIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets AlipayStoreId
        /// </summary>
        [JsonPropertyName("alipayStoreId")]
        public string AlipayStoreId { get { return this.AlipayStoreIdOption; } set { this.AlipayStoreIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AlipaySubMerchantId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AlipaySubMerchantIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets AlipaySubMerchantId
        /// </summary>
        [JsonPropertyName("alipaySubMerchantId")]
        public string AlipaySubMerchantId { get { return this.AlipaySubMerchantIdOption; } set { this.AlipaySubMerchantIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AsyncPayApplyStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AsyncPayApplyStatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets AsyncPayApplyStatus
        /// </summary>
        [JsonPropertyName("asyncPayApplyStatus")]
        public string AsyncPayApplyStatus { get { return this.AsyncPayApplyStatusOption; } set { this.AsyncPayApplyStatusOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AuthTradePayMode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AuthTradePayModeOption { get; private set; }

        /// <summary>
        /// Gets or Sets AuthTradePayMode
        /// </summary>
        [JsonPropertyName("authTradePayMode")]
        public string AuthTradePayMode { get { return this.AuthTradePayModeOption; } set { this.AuthTradePayModeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of BizSettleMode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BizSettleModeOption { get; private set; }

        /// <summary>
        /// Gets or Sets BizSettleMode
        /// </summary>
        [JsonPropertyName("bizSettleMode")]
        public string BizSettleMode { get { return this.BizSettleModeOption; } set { this.BizSettleModeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of BkagentRespInfo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<BkAgentRespInfo> BkagentRespInfoOption { get; private set; }

        /// <summary>
        /// Gets or Sets BkagentRespInfo
        /// </summary>
        [JsonPropertyName("bkagentRespInfo")]
        public BkAgentRespInfo BkagentRespInfo { get { return this.BkagentRespInfoOption; } set { this.BkagentRespInfoOption = new Option<BkAgentRespInfo>(value); } }

        /// <summary>
        /// Used to track the state of Body
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BodyOption { get; private set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [JsonPropertyName("body")]
        public string Body { get { return this.BodyOption; } set { this.BodyOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of BuyerLogonId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BuyerLogonIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets BuyerLogonId
        /// </summary>
        [JsonPropertyName("buyerLogonId")]
        public string BuyerLogonId { get { return this.BuyerLogonIdOption; } set { this.BuyerLogonIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of BuyerOpenId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BuyerOpenIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets BuyerOpenId
        /// </summary>
        [JsonPropertyName("buyerOpenId")]
        public string BuyerOpenId { get { return this.BuyerOpenIdOption; } set { this.BuyerOpenIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of BuyerPayAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BuyerPayAmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets BuyerPayAmount
        /// </summary>
        [JsonPropertyName("buyerPayAmount")]
        public string BuyerPayAmount { get { return this.BuyerPayAmountOption; } set { this.BuyerPayAmountOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of BuyerUserId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BuyerUserIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets BuyerUserId
        /// </summary>
        [JsonPropertyName("buyerUserId")]
        public string BuyerUserId { get { return this.BuyerUserIdOption; } set { this.BuyerUserIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of BuyerUserName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BuyerUserNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets BuyerUserName
        /// </summary>
        [JsonPropertyName("buyerUserName")]
        public string BuyerUserName { get { return this.BuyerUserNameOption; } set { this.BuyerUserNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of BuyerUserType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BuyerUserTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets BuyerUserType
        /// </summary>
        [JsonPropertyName("buyerUserType")]
        public string BuyerUserType { get { return this.BuyerUserTypeOption; } set { this.BuyerUserTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CashierType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CashierTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets CashierType
        /// </summary>
        [JsonPropertyName("cashierType")]
        public string CashierType { get { return this.CashierTypeOption; } set { this.CashierTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ChargeAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ChargeAmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets ChargeAmount
        /// </summary>
        [JsonPropertyName("chargeAmount")]
        public string ChargeAmount { get { return this.ChargeAmountOption; } set { this.ChargeAmountOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ChargeFlags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ChargeFlagsOption { get; private set; }

        /// <summary>
        /// Gets or Sets ChargeFlags
        /// </summary>
        [JsonPropertyName("chargeFlags")]
        public string ChargeFlags { get { return this.ChargeFlagsOption; } set { this.ChargeFlagsOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ChargeInfoList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ChargeInfo>> ChargeInfoListOption { get; private set; }

        /// <summary>
        /// Gets or Sets ChargeInfoList
        /// </summary>
        [JsonPropertyName("chargeInfoList")]
        public List<ChargeInfo> ChargeInfoList { get { return this.ChargeInfoListOption; } set { this.ChargeInfoListOption = new Option<List<ChargeInfo>>(value); } }

        /// <summary>
        /// Used to track the state of CreditBizOrderId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CreditBizOrderIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreditBizOrderId
        /// </summary>
        [JsonPropertyName("creditBizOrderId")]
        public string CreditBizOrderId { get { return this.CreditBizOrderIdOption; } set { this.CreditBizOrderIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CreditPayMode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CreditPayModeOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreditPayMode
        /// </summary>
        [JsonPropertyName("creditPayMode")]
        public string CreditPayMode { get { return this.CreditPayModeOption; } set { this.CreditPayModeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DiscountAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DiscountAmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets DiscountAmount
        /// </summary>
        [JsonPropertyName("discountAmount")]
        public string DiscountAmount { get { return this.DiscountAmountOption; } set { this.DiscountAmountOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DiscountGoodsDetail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DiscountGoodsDetailOption { get; private set; }

        /// <summary>
        /// Gets or Sets DiscountGoodsDetail
        /// </summary>
        [JsonPropertyName("discountGoodsDetail")]
        public string DiscountGoodsDetail { get { return this.DiscountGoodsDetailOption; } set { this.DiscountGoodsDetailOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EnterprisePayInfo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EnterprisePayInfo> EnterprisePayInfoOption { get; private set; }

        /// <summary>
        /// Gets or Sets EnterprisePayInfo
        /// </summary>
        [JsonPropertyName("enterprisePayInfo")]
        public EnterprisePayInfo EnterprisePayInfo { get { return this.EnterprisePayInfoOption; } set { this.EnterprisePayInfoOption = new Option<EnterprisePayInfo>(value); } }

        /// <summary>
        /// Used to track the state of ExtInfos
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ExtInfosOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExtInfos
        /// </summary>
        [JsonPropertyName("extInfos")]
        public string ExtInfos { get { return this.ExtInfosOption; } set { this.ExtInfosOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of FulfillmentDetailList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<FulfillmentDetail>> FulfillmentDetailListOption { get; private set; }

        /// <summary>
        /// Gets or Sets FulfillmentDetailList
        /// </summary>
        [JsonPropertyName("fulfillmentDetailList")]
        public List<FulfillmentDetail> FulfillmentDetailList { get { return this.FulfillmentDetailListOption; } set { this.FulfillmentDetailListOption = new Option<List<FulfillmentDetail>>(value); } }

        /// <summary>
        /// Used to track the state of FundBillList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<TradeFundBill>> FundBillListOption { get; private set; }

        /// <summary>
        /// Gets or Sets FundBillList
        /// </summary>
        [JsonPropertyName("fundBillList")]
        public List<TradeFundBill> FundBillList { get { return this.FundBillListOption; } set { this.FundBillListOption = new Option<List<TradeFundBill>>(value); } }

        /// <summary>
        /// Used to track the state of HbFqPayInfo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<HbFqPayInfo> HbFqPayInfoOption { get; private set; }

        /// <summary>
        /// Gets or Sets HbFqPayInfo
        /// </summary>
        [JsonPropertyName("hbFqPayInfo")]
        public HbFqPayInfo HbFqPayInfo { get { return this.HbFqPayInfoOption; } set { this.HbFqPayInfoOption = new Option<HbFqPayInfo>(value); } }

        /// <summary>
        /// Used to track the state of HybAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> HybAmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets HybAmount
        /// </summary>
        [JsonPropertyName("hybAmount")]
        public string HybAmount { get { return this.HybAmountOption; } set { this.HybAmountOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of IndustrySepcDetail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> IndustrySepcDetailOption { get; private set; }

        /// <summary>
        /// Gets or Sets IndustrySepcDetail
        /// </summary>
        [JsonPropertyName("industrySepcDetail")]
        public string IndustrySepcDetail { get { return this.IndustrySepcDetailOption; } set { this.IndustrySepcDetailOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of IndustrySepcDetailAcc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> IndustrySepcDetailAccOption { get; private set; }

        /// <summary>
        /// Gets or Sets IndustrySepcDetailAcc
        /// </summary>
        [JsonPropertyName("industrySepcDetailAcc")]
        public string IndustrySepcDetailAcc { get { return this.IndustrySepcDetailAccOption; } set { this.IndustrySepcDetailAccOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of IndustrySepcDetailGov
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> IndustrySepcDetailGovOption { get; private set; }

        /// <summary>
        /// Gets or Sets IndustrySepcDetailGov
        /// </summary>
        [JsonPropertyName("industrySepcDetailGov")]
        public string IndustrySepcDetailGov { get { return this.IndustrySepcDetailGovOption; } set { this.IndustrySepcDetailGovOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of IntactChargeInfoList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<IntactChargeInfo>> IntactChargeInfoListOption { get; private set; }

        /// <summary>
        /// Gets or Sets IntactChargeInfoList
        /// </summary>
        [JsonPropertyName("intactChargeInfoList")]
        public List<IntactChargeInfo> IntactChargeInfoList { get { return this.IntactChargeInfoListOption; } set { this.IntactChargeInfoListOption = new Option<List<IntactChargeInfo>>(value); } }

        /// <summary>
        /// Used to track the state of InvoiceAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> InvoiceAmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets InvoiceAmount
        /// </summary>
        [JsonPropertyName("invoiceAmount")]
        public string InvoiceAmount { get { return this.InvoiceAmountOption; } set { this.InvoiceAmountOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of MdiscountAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MdiscountAmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets MdiscountAmount
        /// </summary>
        [JsonPropertyName("mdiscountAmount")]
        public string MdiscountAmount { get { return this.MdiscountAmountOption; } set { this.MdiscountAmountOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of MedicalInsuranceInfo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MedicalInsuranceInfoOption { get; private set; }

        /// <summary>
        /// Gets or Sets MedicalInsuranceInfo
        /// </summary>
        [JsonPropertyName("medicalInsuranceInfo")]
        public string MedicalInsuranceInfo { get { return this.MedicalInsuranceInfoOption; } set { this.MedicalInsuranceInfoOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OpenId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OpenIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets OpenId
        /// </summary>
        [JsonPropertyName("openId")]
        public string OpenId { get { return this.OpenIdOption; } set { this.OpenIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OutTradeNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OutTradeNoOption { get; private set; }

        /// <summary>
        /// Gets or Sets OutTradeNo
        /// </summary>
        [JsonPropertyName("outTradeNo")]
        public string OutTradeNo { get { return this.OutTradeNoOption; } set { this.OutTradeNoOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PassbackParams
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PassbackParamsOption { get; private set; }

        /// <summary>
        /// Gets or Sets PassbackParams
        /// </summary>
        [JsonPropertyName("passbackParams")]
        public string PassbackParams { get { return this.PassbackParamsOption; } set { this.PassbackParamsOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PayAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PayAmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets PayAmount
        /// </summary>
        [JsonPropertyName("payAmount")]
        public string PayAmount { get { return this.PayAmountOption; } set { this.PayAmountOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PayCurrency
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PayCurrencyOption { get; private set; }

        /// <summary>
        /// Gets or Sets PayCurrency
        /// </summary>
        [JsonPropertyName("payCurrency")]
        public string PayCurrency { get { return this.PayCurrencyOption; } set { this.PayCurrencyOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PaymentInfoWithIdList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<PaymentInfoWithId>> PaymentInfoWithIdListOption { get; private set; }

        /// <summary>
        /// Gets or Sets PaymentInfoWithIdList
        /// </summary>
        [JsonPropertyName("paymentInfoWithIdList")]
        public List<PaymentInfoWithId> PaymentInfoWithIdList { get { return this.PaymentInfoWithIdListOption; } set { this.PaymentInfoWithIdListOption = new Option<List<PaymentInfoWithId>>(value); } }

        /// <summary>
        /// Used to track the state of PeriodScene
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PeriodSceneOption { get; private set; }

        /// <summary>
        /// Gets or Sets PeriodScene
        /// </summary>
        [JsonPropertyName("periodScene")]
        public string PeriodScene { get { return this.PeriodSceneOption; } set { this.PeriodSceneOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PointAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PointAmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets PointAmount
        /// </summary>
        [JsonPropertyName("pointAmount")]
        public string PointAmount { get { return this.PointAmountOption; } set { this.PointAmountOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PreAuthPayAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PreAuthPayAmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets PreAuthPayAmount
        /// </summary>
        [JsonPropertyName("preAuthPayAmount")]
        public string PreAuthPayAmount { get { return this.PreAuthPayAmountOption; } set { this.PreAuthPayAmountOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ReceiptAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ReceiptAmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReceiptAmount
        /// </summary>
        [JsonPropertyName("receiptAmount")]
        public string ReceiptAmount { get { return this.ReceiptAmountOption; } set { this.ReceiptAmountOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ReceiptCurrencyType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ReceiptCurrencyTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReceiptCurrencyType
        /// </summary>
        [JsonPropertyName("receiptCurrencyType")]
        public string ReceiptCurrencyType { get { return this.ReceiptCurrencyTypeOption; } set { this.ReceiptCurrencyTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ReqGoodsDetail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<GoodsDetail>> ReqGoodsDetailOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReqGoodsDetail
        /// </summary>
        [JsonPropertyName("reqGoodsDetail")]
        public List<GoodsDetail> ReqGoodsDetail { get { return this.ReqGoodsDetailOption; } set { this.ReqGoodsDetailOption = new Option<List<GoodsDetail>>(value); } }

        /// <summary>
        /// Used to track the state of SendPayDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SendPayDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets SendPayDate
        /// </summary>
        [JsonPropertyName("sendPayDate")]
        public string SendPayDate { get { return this.SendPayDateOption; } set { this.SendPayDateOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SettleAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SettleAmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets SettleAmount
        /// </summary>
        [JsonPropertyName("settleAmount")]
        public string SettleAmount { get { return this.SettleAmountOption; } set { this.SettleAmountOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SettleCurrency
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SettleCurrencyOption { get; private set; }

        /// <summary>
        /// Gets or Sets SettleCurrency
        /// </summary>
        [JsonPropertyName("settleCurrency")]
        public string SettleCurrency { get { return this.SettleCurrencyOption; } set { this.SettleCurrencyOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SettleTransRate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SettleTransRateOption { get; private set; }

        /// <summary>
        /// Gets or Sets SettleTransRate
        /// </summary>
        [JsonPropertyName("settleTransRate")]
        public string SettleTransRate { get { return this.SettleTransRateOption; } set { this.SettleTransRateOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SettlementId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SettlementIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets SettlementId
        /// </summary>
        [JsonPropertyName("settlementId")]
        public string SettlementId { get { return this.SettlementIdOption; } set { this.SettlementIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of StoreId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> StoreIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets StoreId
        /// </summary>
        [JsonPropertyName("storeId")]
        public string StoreId { get { return this.StoreIdOption; } set { this.StoreIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of StoreName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> StoreNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets StoreName
        /// </summary>
        [JsonPropertyName("storeName")]
        public string StoreName { get { return this.StoreNameOption; } set { this.StoreNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Subject
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubjectOption { get; private set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [JsonPropertyName("subject")]
        public string Subject { get { return this.SubjectOption; } set { this.SubjectOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TapPayInfo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TapPayInfo> TapPayInfoOption { get; private set; }

        /// <summary>
        /// Gets or Sets TapPayInfo
        /// </summary>
        [JsonPropertyName("tapPayInfo")]
        public TapPayInfo TapPayInfo { get { return this.TapPayInfoOption; } set { this.TapPayInfoOption = new Option<TapPayInfo>(value); } }

        /// <summary>
        /// Used to track the state of TerminalId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TerminalIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets TerminalId
        /// </summary>
        [JsonPropertyName("terminalId")]
        public string TerminalId { get { return this.TerminalIdOption; } set { this.TerminalIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TotalAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TotalAmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets TotalAmount
        /// </summary>
        [JsonPropertyName("totalAmount")]
        public string TotalAmount { get { return this.TotalAmountOption; } set { this.TotalAmountOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TradeNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TradeNoOption { get; private set; }

        /// <summary>
        /// Gets or Sets TradeNo
        /// </summary>
        [JsonPropertyName("tradeNo")]
        public string TradeNo { get { return this.TradeNoOption; } set { this.TradeNoOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TradeSettleInfo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TradeSettleInfo> TradeSettleInfoOption { get; private set; }

        /// <summary>
        /// Gets or Sets TradeSettleInfo
        /// </summary>
        [JsonPropertyName("tradeSettleInfo")]
        public TradeSettleInfo TradeSettleInfo { get { return this.TradeSettleInfoOption; } set { this.TradeSettleInfoOption = new Option<TradeSettleInfo>(value); } }

        /// <summary>
        /// Used to track the state of TradeStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TradeStatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets TradeStatus
        /// </summary>
        [JsonPropertyName("tradeStatus")]
        public string TradeStatus { get { return this.TradeStatusOption; } set { this.TradeStatusOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TransCurrency
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TransCurrencyOption { get; private set; }

        /// <summary>
        /// Gets or Sets TransCurrency
        /// </summary>
        [JsonPropertyName("transCurrency")]
        public string TransCurrency { get { return this.TransCurrencyOption; } set { this.TransCurrencyOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TransPayRate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TransPayRateOption { get; private set; }

        /// <summary>
        /// Gets or Sets TransPayRate
        /// </summary>
        [JsonPropertyName("transPayRate")]
        public string TransPayRate { get { return this.TransPayRateOption; } set { this.TransPayRateOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of VoucherDetailList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<VoucherDetail>> VoucherDetailListOption { get; private set; }

        /// <summary>
        /// Gets or Sets VoucherDetailList
        /// </summary>
        [JsonPropertyName("voucherDetailList")]
        public List<VoucherDetail> VoucherDetailList { get { return this.VoucherDetailListOption; } set { this.VoucherDetailListOption = new Option<List<VoucherDetail>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AlipayTradeQueryResponse {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Msg: ").Append(Msg).Append("\n");
            sb.Append("  SubCode: ").Append(SubCode).Append("\n");
            sb.Append("  SubMsg: ").Append(SubMsg).Append("\n");
            sb.Append("  IsError: ").Append(IsError).Append("\n");
            sb.Append("  AdditionalStatus: ").Append(AdditionalStatus).Append("\n");
            sb.Append("  AlipayStoreId: ").Append(AlipayStoreId).Append("\n");
            sb.Append("  AlipaySubMerchantId: ").Append(AlipaySubMerchantId).Append("\n");
            sb.Append("  AsyncPayApplyStatus: ").Append(AsyncPayApplyStatus).Append("\n");
            sb.Append("  AuthTradePayMode: ").Append(AuthTradePayMode).Append("\n");
            sb.Append("  BizSettleMode: ").Append(BizSettleMode).Append("\n");
            sb.Append("  BkagentRespInfo: ").Append(BkagentRespInfo).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  BuyerLogonId: ").Append(BuyerLogonId).Append("\n");
            sb.Append("  BuyerOpenId: ").Append(BuyerOpenId).Append("\n");
            sb.Append("  BuyerPayAmount: ").Append(BuyerPayAmount).Append("\n");
            sb.Append("  BuyerUserId: ").Append(BuyerUserId).Append("\n");
            sb.Append("  BuyerUserName: ").Append(BuyerUserName).Append("\n");
            sb.Append("  BuyerUserType: ").Append(BuyerUserType).Append("\n");
            sb.Append("  CashierType: ").Append(CashierType).Append("\n");
            sb.Append("  ChargeAmount: ").Append(ChargeAmount).Append("\n");
            sb.Append("  ChargeFlags: ").Append(ChargeFlags).Append("\n");
            sb.Append("  ChargeInfoList: ").Append(ChargeInfoList).Append("\n");
            sb.Append("  CreditBizOrderId: ").Append(CreditBizOrderId).Append("\n");
            sb.Append("  CreditPayMode: ").Append(CreditPayMode).Append("\n");
            sb.Append("  DiscountAmount: ").Append(DiscountAmount).Append("\n");
            sb.Append("  DiscountGoodsDetail: ").Append(DiscountGoodsDetail).Append("\n");
            sb.Append("  EnterprisePayInfo: ").Append(EnterprisePayInfo).Append("\n");
            sb.Append("  ExtInfos: ").Append(ExtInfos).Append("\n");
            sb.Append("  FulfillmentDetailList: ").Append(FulfillmentDetailList).Append("\n");
            sb.Append("  FundBillList: ").Append(FundBillList).Append("\n");
            sb.Append("  HbFqPayInfo: ").Append(HbFqPayInfo).Append("\n");
            sb.Append("  HybAmount: ").Append(HybAmount).Append("\n");
            sb.Append("  IndustrySepcDetail: ").Append(IndustrySepcDetail).Append("\n");
            sb.Append("  IndustrySepcDetailAcc: ").Append(IndustrySepcDetailAcc).Append("\n");
            sb.Append("  IndustrySepcDetailGov: ").Append(IndustrySepcDetailGov).Append("\n");
            sb.Append("  IntactChargeInfoList: ").Append(IntactChargeInfoList).Append("\n");
            sb.Append("  InvoiceAmount: ").Append(InvoiceAmount).Append("\n");
            sb.Append("  MdiscountAmount: ").Append(MdiscountAmount).Append("\n");
            sb.Append("  MedicalInsuranceInfo: ").Append(MedicalInsuranceInfo).Append("\n");
            sb.Append("  OpenId: ").Append(OpenId).Append("\n");
            sb.Append("  OutTradeNo: ").Append(OutTradeNo).Append("\n");
            sb.Append("  PassbackParams: ").Append(PassbackParams).Append("\n");
            sb.Append("  PayAmount: ").Append(PayAmount).Append("\n");
            sb.Append("  PayCurrency: ").Append(PayCurrency).Append("\n");
            sb.Append("  PaymentInfoWithIdList: ").Append(PaymentInfoWithIdList).Append("\n");
            sb.Append("  PeriodScene: ").Append(PeriodScene).Append("\n");
            sb.Append("  PointAmount: ").Append(PointAmount).Append("\n");
            sb.Append("  PreAuthPayAmount: ").Append(PreAuthPayAmount).Append("\n");
            sb.Append("  ReceiptAmount: ").Append(ReceiptAmount).Append("\n");
            sb.Append("  ReceiptCurrencyType: ").Append(ReceiptCurrencyType).Append("\n");
            sb.Append("  ReqGoodsDetail: ").Append(ReqGoodsDetail).Append("\n");
            sb.Append("  SendPayDate: ").Append(SendPayDate).Append("\n");
            sb.Append("  SettleAmount: ").Append(SettleAmount).Append("\n");
            sb.Append("  SettleCurrency: ").Append(SettleCurrency).Append("\n");
            sb.Append("  SettleTransRate: ").Append(SettleTransRate).Append("\n");
            sb.Append("  SettlementId: ").Append(SettlementId).Append("\n");
            sb.Append("  StoreId: ").Append(StoreId).Append("\n");
            sb.Append("  StoreName: ").Append(StoreName).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  TapPayInfo: ").Append(TapPayInfo).Append("\n");
            sb.Append("  TerminalId: ").Append(TerminalId).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  TradeNo: ").Append(TradeNo).Append("\n");
            sb.Append("  TradeSettleInfo: ").Append(TradeSettleInfo).Append("\n");
            sb.Append("  TradeStatus: ").Append(TradeStatus).Append("\n");
            sb.Append("  TransCurrency: ").Append(TransCurrency).Append("\n");
            sb.Append("  TransPayRate: ").Append(TransPayRate).Append("\n");
            sb.Append("  VoucherDetailList: ").Append(VoucherDetailList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AlipayTradeQueryResponse" />
    /// </summary>
    public class AlipayTradeQueryResponseJsonConverter : JsonConverter<AlipayTradeQueryResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="AlipayTradeQueryResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AlipayTradeQueryResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> code = default;
            Option<string> msg = default;
            Option<string> subCode = default;
            Option<string> subMsg = default;
            Option<bool?> isError = default;
            Option<string> additionalStatus = default;
            Option<string> alipayStoreId = default;
            Option<string> alipaySubMerchantId = default;
            Option<string> asyncPayApplyStatus = default;
            Option<string> authTradePayMode = default;
            Option<string> bizSettleMode = default;
            Option<BkAgentRespInfo> bkagentRespInfo = default;
            Option<string> body = default;
            Option<string> buyerLogonId = default;
            Option<string> buyerOpenId = default;
            Option<string> buyerPayAmount = default;
            Option<string> buyerUserId = default;
            Option<string> buyerUserName = default;
            Option<string> buyerUserType = default;
            Option<string> cashierType = default;
            Option<string> chargeAmount = default;
            Option<string> chargeFlags = default;
            Option<List<ChargeInfo>> chargeInfoList = default;
            Option<string> creditBizOrderId = default;
            Option<string> creditPayMode = default;
            Option<string> discountAmount = default;
            Option<string> discountGoodsDetail = default;
            Option<EnterprisePayInfo> enterprisePayInfo = default;
            Option<string> extInfos = default;
            Option<List<FulfillmentDetail>> fulfillmentDetailList = default;
            Option<List<TradeFundBill>> fundBillList = default;
            Option<HbFqPayInfo> hbFqPayInfo = default;
            Option<string> hybAmount = default;
            Option<string> industrySepcDetail = default;
            Option<string> industrySepcDetailAcc = default;
            Option<string> industrySepcDetailGov = default;
            Option<List<IntactChargeInfo>> intactChargeInfoList = default;
            Option<string> invoiceAmount = default;
            Option<string> mdiscountAmount = default;
            Option<string> medicalInsuranceInfo = default;
            Option<string> openId = default;
            Option<string> outTradeNo = default;
            Option<string> passbackParams = default;
            Option<string> payAmount = default;
            Option<string> payCurrency = default;
            Option<List<PaymentInfoWithId>> paymentInfoWithIdList = default;
            Option<string> periodScene = default;
            Option<string> pointAmount = default;
            Option<string> preAuthPayAmount = default;
            Option<string> receiptAmount = default;
            Option<string> receiptCurrencyType = default;
            Option<List<GoodsDetail>> reqGoodsDetail = default;
            Option<string> sendPayDate = default;
            Option<string> settleAmount = default;
            Option<string> settleCurrency = default;
            Option<string> settleTransRate = default;
            Option<string> settlementId = default;
            Option<string> storeId = default;
            Option<string> storeName = default;
            Option<string> subject = default;
            Option<TapPayInfo> tapPayInfo = default;
            Option<string> terminalId = default;
            Option<string> totalAmount = default;
            Option<string> tradeNo = default;
            Option<TradeSettleInfo> tradeSettleInfo = default;
            Option<string> tradeStatus = default;
            Option<string> transCurrency = default;
            Option<string> transPayRate = default;
            Option<List<VoucherDetail>> voucherDetailList = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "code":
                            code = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "msg":
                            msg = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "subCode":
                            subCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "subMsg":
                            subMsg = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "isError":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isError = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "additionalStatus":
                            additionalStatus = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "alipayStoreId":
                            alipayStoreId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "alipaySubMerchantId":
                            alipaySubMerchantId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "asyncPayApplyStatus":
                            asyncPayApplyStatus = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "authTradePayMode":
                            authTradePayMode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "bizSettleMode":
                            bizSettleMode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "bkagentRespInfo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                bkagentRespInfo = new Option<BkAgentRespInfo>(JsonSerializer.Deserialize<BkAgentRespInfo>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "body":
                            body = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "buyerLogonId":
                            buyerLogonId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "buyerOpenId":
                            buyerOpenId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "buyerPayAmount":
                            buyerPayAmount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "buyerUserId":
                            buyerUserId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "buyerUserName":
                            buyerUserName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "buyerUserType":
                            buyerUserType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "cashierType":
                            cashierType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "chargeAmount":
                            chargeAmount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "chargeFlags":
                            chargeFlags = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "chargeInfoList":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                chargeInfoList = new Option<List<ChargeInfo>>(JsonSerializer.Deserialize<List<ChargeInfo>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "creditBizOrderId":
                            creditBizOrderId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "creditPayMode":
                            creditPayMode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "discountAmount":
                            discountAmount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "discountGoodsDetail":
                            discountGoodsDetail = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "enterprisePayInfo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                enterprisePayInfo = new Option<EnterprisePayInfo>(JsonSerializer.Deserialize<EnterprisePayInfo>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "extInfos":
                            extInfos = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "fulfillmentDetailList":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fulfillmentDetailList = new Option<List<FulfillmentDetail>>(JsonSerializer.Deserialize<List<FulfillmentDetail>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "fundBillList":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fundBillList = new Option<List<TradeFundBill>>(JsonSerializer.Deserialize<List<TradeFundBill>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "hbFqPayInfo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                hbFqPayInfo = new Option<HbFqPayInfo>(JsonSerializer.Deserialize<HbFqPayInfo>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "hybAmount":
                            hybAmount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "industrySepcDetail":
                            industrySepcDetail = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "industrySepcDetailAcc":
                            industrySepcDetailAcc = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "industrySepcDetailGov":
                            industrySepcDetailGov = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "intactChargeInfoList":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                intactChargeInfoList = new Option<List<IntactChargeInfo>>(JsonSerializer.Deserialize<List<IntactChargeInfo>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "invoiceAmount":
                            invoiceAmount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "mdiscountAmount":
                            mdiscountAmount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "medicalInsuranceInfo":
                            medicalInsuranceInfo = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "openId":
                            openId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "outTradeNo":
                            outTradeNo = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "passbackParams":
                            passbackParams = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "payAmount":
                            payAmount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "payCurrency":
                            payCurrency = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "paymentInfoWithIdList":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                paymentInfoWithIdList = new Option<List<PaymentInfoWithId>>(JsonSerializer.Deserialize<List<PaymentInfoWithId>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "periodScene":
                            periodScene = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "pointAmount":
                            pointAmount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "preAuthPayAmount":
                            preAuthPayAmount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "receiptAmount":
                            receiptAmount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "receiptCurrencyType":
                            receiptCurrencyType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "reqGoodsDetail":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                reqGoodsDetail = new Option<List<GoodsDetail>>(JsonSerializer.Deserialize<List<GoodsDetail>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "sendPayDate":
                            sendPayDate = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "settleAmount":
                            settleAmount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "settleCurrency":
                            settleCurrency = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "settleTransRate":
                            settleTransRate = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "settlementId":
                            settlementId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "storeId":
                            storeId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "storeName":
                            storeName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "subject":
                            subject = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "tapPayInfo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                tapPayInfo = new Option<TapPayInfo>(JsonSerializer.Deserialize<TapPayInfo>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "terminalId":
                            terminalId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "totalAmount":
                            totalAmount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "tradeNo":
                            tradeNo = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "tradeSettleInfo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                tradeSettleInfo = new Option<TradeSettleInfo>(JsonSerializer.Deserialize<TradeSettleInfo>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "tradeStatus":
                            tradeStatus = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "transCurrency":
                            transCurrency = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "transPayRate":
                            transPayRate = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "voucherDetailList":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                voucherDetailList = new Option<List<VoucherDetail>>(JsonSerializer.Deserialize<List<VoucherDetail>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (isError.IsSet && isError.Value == null)
                throw new ArgumentNullException(nameof(isError), "Property is not nullable for class AlipayTradeQueryResponse.");

            if (bkagentRespInfo.IsSet && bkagentRespInfo.Value == null)
                throw new ArgumentNullException(nameof(bkagentRespInfo), "Property is not nullable for class AlipayTradeQueryResponse.");

            if (enterprisePayInfo.IsSet && enterprisePayInfo.Value == null)
                throw new ArgumentNullException(nameof(enterprisePayInfo), "Property is not nullable for class AlipayTradeQueryResponse.");

            if (hbFqPayInfo.IsSet && hbFqPayInfo.Value == null)
                throw new ArgumentNullException(nameof(hbFqPayInfo), "Property is not nullable for class AlipayTradeQueryResponse.");

            if (tapPayInfo.IsSet && tapPayInfo.Value == null)
                throw new ArgumentNullException(nameof(tapPayInfo), "Property is not nullable for class AlipayTradeQueryResponse.");

            if (tradeSettleInfo.IsSet && tradeSettleInfo.Value == null)
                throw new ArgumentNullException(nameof(tradeSettleInfo), "Property is not nullable for class AlipayTradeQueryResponse.");

            return new AlipayTradeQueryResponse(code, msg, subCode, subMsg, isError, additionalStatus, alipayStoreId, alipaySubMerchantId, asyncPayApplyStatus, authTradePayMode, bizSettleMode, bkagentRespInfo, body, buyerLogonId, buyerOpenId, buyerPayAmount, buyerUserId, buyerUserName, buyerUserType, cashierType, chargeAmount, chargeFlags, chargeInfoList, creditBizOrderId, creditPayMode, discountAmount, discountGoodsDetail, enterprisePayInfo, extInfos, fulfillmentDetailList, fundBillList, hbFqPayInfo, hybAmount, industrySepcDetail, industrySepcDetailAcc, industrySepcDetailGov, intactChargeInfoList, invoiceAmount, mdiscountAmount, medicalInsuranceInfo, openId, outTradeNo, passbackParams, payAmount, payCurrency, paymentInfoWithIdList, periodScene, pointAmount, preAuthPayAmount, receiptAmount, receiptCurrencyType, reqGoodsDetail, sendPayDate, settleAmount, settleCurrency, settleTransRate, settlementId, storeId, storeName, subject, tapPayInfo, terminalId, totalAmount, tradeNo, tradeSettleInfo, tradeStatus, transCurrency, transPayRate, voucherDetailList);
        }

        /// <summary>
        /// Serializes a <see cref="AlipayTradeQueryResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="alipayTradeQueryResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AlipayTradeQueryResponse alipayTradeQueryResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, alipayTradeQueryResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AlipayTradeQueryResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="alipayTradeQueryResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AlipayTradeQueryResponse alipayTradeQueryResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (alipayTradeQueryResponse.BkagentRespInfoOption.IsSet && alipayTradeQueryResponse.BkagentRespInfo == null)
                throw new ArgumentNullException(nameof(alipayTradeQueryResponse.BkagentRespInfo), "Property is required for class AlipayTradeQueryResponse.");

            if (alipayTradeQueryResponse.EnterprisePayInfoOption.IsSet && alipayTradeQueryResponse.EnterprisePayInfo == null)
                throw new ArgumentNullException(nameof(alipayTradeQueryResponse.EnterprisePayInfo), "Property is required for class AlipayTradeQueryResponse.");

            if (alipayTradeQueryResponse.HbFqPayInfoOption.IsSet && alipayTradeQueryResponse.HbFqPayInfo == null)
                throw new ArgumentNullException(nameof(alipayTradeQueryResponse.HbFqPayInfo), "Property is required for class AlipayTradeQueryResponse.");

            if (alipayTradeQueryResponse.TapPayInfoOption.IsSet && alipayTradeQueryResponse.TapPayInfo == null)
                throw new ArgumentNullException(nameof(alipayTradeQueryResponse.TapPayInfo), "Property is required for class AlipayTradeQueryResponse.");

            if (alipayTradeQueryResponse.TradeSettleInfoOption.IsSet && alipayTradeQueryResponse.TradeSettleInfo == null)
                throw new ArgumentNullException(nameof(alipayTradeQueryResponse.TradeSettleInfo), "Property is required for class AlipayTradeQueryResponse.");

            if (alipayTradeQueryResponse.CodeOption.IsSet)
                if (alipayTradeQueryResponse.CodeOption.Value != null)
                    writer.WriteString("code", alipayTradeQueryResponse.Code);
                else
                    writer.WriteNull("code");

            if (alipayTradeQueryResponse.MsgOption.IsSet)
                if (alipayTradeQueryResponse.MsgOption.Value != null)
                    writer.WriteString("msg", alipayTradeQueryResponse.Msg);
                else
                    writer.WriteNull("msg");

            if (alipayTradeQueryResponse.SubCodeOption.IsSet)
                if (alipayTradeQueryResponse.SubCodeOption.Value != null)
                    writer.WriteString("subCode", alipayTradeQueryResponse.SubCode);
                else
                    writer.WriteNull("subCode");

            if (alipayTradeQueryResponse.SubMsgOption.IsSet)
                if (alipayTradeQueryResponse.SubMsgOption.Value != null)
                    writer.WriteString("subMsg", alipayTradeQueryResponse.SubMsg);
                else
                    writer.WriteNull("subMsg");

            if (alipayTradeQueryResponse.IsErrorOption.IsSet)
                writer.WriteBoolean("isError", alipayTradeQueryResponse.IsErrorOption.Value.Value);

            if (alipayTradeQueryResponse.AdditionalStatusOption.IsSet)
                if (alipayTradeQueryResponse.AdditionalStatusOption.Value != null)
                    writer.WriteString("additionalStatus", alipayTradeQueryResponse.AdditionalStatus);
                else
                    writer.WriteNull("additionalStatus");

            if (alipayTradeQueryResponse.AlipayStoreIdOption.IsSet)
                if (alipayTradeQueryResponse.AlipayStoreIdOption.Value != null)
                    writer.WriteString("alipayStoreId", alipayTradeQueryResponse.AlipayStoreId);
                else
                    writer.WriteNull("alipayStoreId");

            if (alipayTradeQueryResponse.AlipaySubMerchantIdOption.IsSet)
                if (alipayTradeQueryResponse.AlipaySubMerchantIdOption.Value != null)
                    writer.WriteString("alipaySubMerchantId", alipayTradeQueryResponse.AlipaySubMerchantId);
                else
                    writer.WriteNull("alipaySubMerchantId");

            if (alipayTradeQueryResponse.AsyncPayApplyStatusOption.IsSet)
                if (alipayTradeQueryResponse.AsyncPayApplyStatusOption.Value != null)
                    writer.WriteString("asyncPayApplyStatus", alipayTradeQueryResponse.AsyncPayApplyStatus);
                else
                    writer.WriteNull("asyncPayApplyStatus");

            if (alipayTradeQueryResponse.AuthTradePayModeOption.IsSet)
                if (alipayTradeQueryResponse.AuthTradePayModeOption.Value != null)
                    writer.WriteString("authTradePayMode", alipayTradeQueryResponse.AuthTradePayMode);
                else
                    writer.WriteNull("authTradePayMode");

            if (alipayTradeQueryResponse.BizSettleModeOption.IsSet)
                if (alipayTradeQueryResponse.BizSettleModeOption.Value != null)
                    writer.WriteString("bizSettleMode", alipayTradeQueryResponse.BizSettleMode);
                else
                    writer.WriteNull("bizSettleMode");

            if (alipayTradeQueryResponse.BkagentRespInfoOption.IsSet)
            {
                writer.WritePropertyName("bkagentRespInfo");
                JsonSerializer.Serialize(writer, alipayTradeQueryResponse.BkagentRespInfo, jsonSerializerOptions);
            }
            if (alipayTradeQueryResponse.BodyOption.IsSet)
                if (alipayTradeQueryResponse.BodyOption.Value != null)
                    writer.WriteString("body", alipayTradeQueryResponse.Body);
                else
                    writer.WriteNull("body");

            if (alipayTradeQueryResponse.BuyerLogonIdOption.IsSet)
                if (alipayTradeQueryResponse.BuyerLogonIdOption.Value != null)
                    writer.WriteString("buyerLogonId", alipayTradeQueryResponse.BuyerLogonId);
                else
                    writer.WriteNull("buyerLogonId");

            if (alipayTradeQueryResponse.BuyerOpenIdOption.IsSet)
                if (alipayTradeQueryResponse.BuyerOpenIdOption.Value != null)
                    writer.WriteString("buyerOpenId", alipayTradeQueryResponse.BuyerOpenId);
                else
                    writer.WriteNull("buyerOpenId");

            if (alipayTradeQueryResponse.BuyerPayAmountOption.IsSet)
                if (alipayTradeQueryResponse.BuyerPayAmountOption.Value != null)
                    writer.WriteString("buyerPayAmount", alipayTradeQueryResponse.BuyerPayAmount);
                else
                    writer.WriteNull("buyerPayAmount");

            if (alipayTradeQueryResponse.BuyerUserIdOption.IsSet)
                if (alipayTradeQueryResponse.BuyerUserIdOption.Value != null)
                    writer.WriteString("buyerUserId", alipayTradeQueryResponse.BuyerUserId);
                else
                    writer.WriteNull("buyerUserId");

            if (alipayTradeQueryResponse.BuyerUserNameOption.IsSet)
                if (alipayTradeQueryResponse.BuyerUserNameOption.Value != null)
                    writer.WriteString("buyerUserName", alipayTradeQueryResponse.BuyerUserName);
                else
                    writer.WriteNull("buyerUserName");

            if (alipayTradeQueryResponse.BuyerUserTypeOption.IsSet)
                if (alipayTradeQueryResponse.BuyerUserTypeOption.Value != null)
                    writer.WriteString("buyerUserType", alipayTradeQueryResponse.BuyerUserType);
                else
                    writer.WriteNull("buyerUserType");

            if (alipayTradeQueryResponse.CashierTypeOption.IsSet)
                if (alipayTradeQueryResponse.CashierTypeOption.Value != null)
                    writer.WriteString("cashierType", alipayTradeQueryResponse.CashierType);
                else
                    writer.WriteNull("cashierType");

            if (alipayTradeQueryResponse.ChargeAmountOption.IsSet)
                if (alipayTradeQueryResponse.ChargeAmountOption.Value != null)
                    writer.WriteString("chargeAmount", alipayTradeQueryResponse.ChargeAmount);
                else
                    writer.WriteNull("chargeAmount");

            if (alipayTradeQueryResponse.ChargeFlagsOption.IsSet)
                if (alipayTradeQueryResponse.ChargeFlagsOption.Value != null)
                    writer.WriteString("chargeFlags", alipayTradeQueryResponse.ChargeFlags);
                else
                    writer.WriteNull("chargeFlags");

            if (alipayTradeQueryResponse.ChargeInfoListOption.IsSet)
                if (alipayTradeQueryResponse.ChargeInfoListOption.Value != null)
                {
                    writer.WritePropertyName("chargeInfoList");
                    JsonSerializer.Serialize(writer, alipayTradeQueryResponse.ChargeInfoList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("chargeInfoList");
            if (alipayTradeQueryResponse.CreditBizOrderIdOption.IsSet)
                if (alipayTradeQueryResponse.CreditBizOrderIdOption.Value != null)
                    writer.WriteString("creditBizOrderId", alipayTradeQueryResponse.CreditBizOrderId);
                else
                    writer.WriteNull("creditBizOrderId");

            if (alipayTradeQueryResponse.CreditPayModeOption.IsSet)
                if (alipayTradeQueryResponse.CreditPayModeOption.Value != null)
                    writer.WriteString("creditPayMode", alipayTradeQueryResponse.CreditPayMode);
                else
                    writer.WriteNull("creditPayMode");

            if (alipayTradeQueryResponse.DiscountAmountOption.IsSet)
                if (alipayTradeQueryResponse.DiscountAmountOption.Value != null)
                    writer.WriteString("discountAmount", alipayTradeQueryResponse.DiscountAmount);
                else
                    writer.WriteNull("discountAmount");

            if (alipayTradeQueryResponse.DiscountGoodsDetailOption.IsSet)
                if (alipayTradeQueryResponse.DiscountGoodsDetailOption.Value != null)
                    writer.WriteString("discountGoodsDetail", alipayTradeQueryResponse.DiscountGoodsDetail);
                else
                    writer.WriteNull("discountGoodsDetail");

            if (alipayTradeQueryResponse.EnterprisePayInfoOption.IsSet)
            {
                writer.WritePropertyName("enterprisePayInfo");
                JsonSerializer.Serialize(writer, alipayTradeQueryResponse.EnterprisePayInfo, jsonSerializerOptions);
            }
            if (alipayTradeQueryResponse.ExtInfosOption.IsSet)
                if (alipayTradeQueryResponse.ExtInfosOption.Value != null)
                    writer.WriteString("extInfos", alipayTradeQueryResponse.ExtInfos);
                else
                    writer.WriteNull("extInfos");

            if (alipayTradeQueryResponse.FulfillmentDetailListOption.IsSet)
                if (alipayTradeQueryResponse.FulfillmentDetailListOption.Value != null)
                {
                    writer.WritePropertyName("fulfillmentDetailList");
                    JsonSerializer.Serialize(writer, alipayTradeQueryResponse.FulfillmentDetailList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("fulfillmentDetailList");
            if (alipayTradeQueryResponse.FundBillListOption.IsSet)
                if (alipayTradeQueryResponse.FundBillListOption.Value != null)
                {
                    writer.WritePropertyName("fundBillList");
                    JsonSerializer.Serialize(writer, alipayTradeQueryResponse.FundBillList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("fundBillList");
            if (alipayTradeQueryResponse.HbFqPayInfoOption.IsSet)
            {
                writer.WritePropertyName("hbFqPayInfo");
                JsonSerializer.Serialize(writer, alipayTradeQueryResponse.HbFqPayInfo, jsonSerializerOptions);
            }
            if (alipayTradeQueryResponse.HybAmountOption.IsSet)
                if (alipayTradeQueryResponse.HybAmountOption.Value != null)
                    writer.WriteString("hybAmount", alipayTradeQueryResponse.HybAmount);
                else
                    writer.WriteNull("hybAmount");

            if (alipayTradeQueryResponse.IndustrySepcDetailOption.IsSet)
                if (alipayTradeQueryResponse.IndustrySepcDetailOption.Value != null)
                    writer.WriteString("industrySepcDetail", alipayTradeQueryResponse.IndustrySepcDetail);
                else
                    writer.WriteNull("industrySepcDetail");

            if (alipayTradeQueryResponse.IndustrySepcDetailAccOption.IsSet)
                if (alipayTradeQueryResponse.IndustrySepcDetailAccOption.Value != null)
                    writer.WriteString("industrySepcDetailAcc", alipayTradeQueryResponse.IndustrySepcDetailAcc);
                else
                    writer.WriteNull("industrySepcDetailAcc");

            if (alipayTradeQueryResponse.IndustrySepcDetailGovOption.IsSet)
                if (alipayTradeQueryResponse.IndustrySepcDetailGovOption.Value != null)
                    writer.WriteString("industrySepcDetailGov", alipayTradeQueryResponse.IndustrySepcDetailGov);
                else
                    writer.WriteNull("industrySepcDetailGov");

            if (alipayTradeQueryResponse.IntactChargeInfoListOption.IsSet)
                if (alipayTradeQueryResponse.IntactChargeInfoListOption.Value != null)
                {
                    writer.WritePropertyName("intactChargeInfoList");
                    JsonSerializer.Serialize(writer, alipayTradeQueryResponse.IntactChargeInfoList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("intactChargeInfoList");
            if (alipayTradeQueryResponse.InvoiceAmountOption.IsSet)
                if (alipayTradeQueryResponse.InvoiceAmountOption.Value != null)
                    writer.WriteString("invoiceAmount", alipayTradeQueryResponse.InvoiceAmount);
                else
                    writer.WriteNull("invoiceAmount");

            if (alipayTradeQueryResponse.MdiscountAmountOption.IsSet)
                if (alipayTradeQueryResponse.MdiscountAmountOption.Value != null)
                    writer.WriteString("mdiscountAmount", alipayTradeQueryResponse.MdiscountAmount);
                else
                    writer.WriteNull("mdiscountAmount");

            if (alipayTradeQueryResponse.MedicalInsuranceInfoOption.IsSet)
                if (alipayTradeQueryResponse.MedicalInsuranceInfoOption.Value != null)
                    writer.WriteString("medicalInsuranceInfo", alipayTradeQueryResponse.MedicalInsuranceInfo);
                else
                    writer.WriteNull("medicalInsuranceInfo");

            if (alipayTradeQueryResponse.OpenIdOption.IsSet)
                if (alipayTradeQueryResponse.OpenIdOption.Value != null)
                    writer.WriteString("openId", alipayTradeQueryResponse.OpenId);
                else
                    writer.WriteNull("openId");

            if (alipayTradeQueryResponse.OutTradeNoOption.IsSet)
                if (alipayTradeQueryResponse.OutTradeNoOption.Value != null)
                    writer.WriteString("outTradeNo", alipayTradeQueryResponse.OutTradeNo);
                else
                    writer.WriteNull("outTradeNo");

            if (alipayTradeQueryResponse.PassbackParamsOption.IsSet)
                if (alipayTradeQueryResponse.PassbackParamsOption.Value != null)
                    writer.WriteString("passbackParams", alipayTradeQueryResponse.PassbackParams);
                else
                    writer.WriteNull("passbackParams");

            if (alipayTradeQueryResponse.PayAmountOption.IsSet)
                if (alipayTradeQueryResponse.PayAmountOption.Value != null)
                    writer.WriteString("payAmount", alipayTradeQueryResponse.PayAmount);
                else
                    writer.WriteNull("payAmount");

            if (alipayTradeQueryResponse.PayCurrencyOption.IsSet)
                if (alipayTradeQueryResponse.PayCurrencyOption.Value != null)
                    writer.WriteString("payCurrency", alipayTradeQueryResponse.PayCurrency);
                else
                    writer.WriteNull("payCurrency");

            if (alipayTradeQueryResponse.PaymentInfoWithIdListOption.IsSet)
                if (alipayTradeQueryResponse.PaymentInfoWithIdListOption.Value != null)
                {
                    writer.WritePropertyName("paymentInfoWithIdList");
                    JsonSerializer.Serialize(writer, alipayTradeQueryResponse.PaymentInfoWithIdList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("paymentInfoWithIdList");
            if (alipayTradeQueryResponse.PeriodSceneOption.IsSet)
                if (alipayTradeQueryResponse.PeriodSceneOption.Value != null)
                    writer.WriteString("periodScene", alipayTradeQueryResponse.PeriodScene);
                else
                    writer.WriteNull("periodScene");

            if (alipayTradeQueryResponse.PointAmountOption.IsSet)
                if (alipayTradeQueryResponse.PointAmountOption.Value != null)
                    writer.WriteString("pointAmount", alipayTradeQueryResponse.PointAmount);
                else
                    writer.WriteNull("pointAmount");

            if (alipayTradeQueryResponse.PreAuthPayAmountOption.IsSet)
                if (alipayTradeQueryResponse.PreAuthPayAmountOption.Value != null)
                    writer.WriteString("preAuthPayAmount", alipayTradeQueryResponse.PreAuthPayAmount);
                else
                    writer.WriteNull("preAuthPayAmount");

            if (alipayTradeQueryResponse.ReceiptAmountOption.IsSet)
                if (alipayTradeQueryResponse.ReceiptAmountOption.Value != null)
                    writer.WriteString("receiptAmount", alipayTradeQueryResponse.ReceiptAmount);
                else
                    writer.WriteNull("receiptAmount");

            if (alipayTradeQueryResponse.ReceiptCurrencyTypeOption.IsSet)
                if (alipayTradeQueryResponse.ReceiptCurrencyTypeOption.Value != null)
                    writer.WriteString("receiptCurrencyType", alipayTradeQueryResponse.ReceiptCurrencyType);
                else
                    writer.WriteNull("receiptCurrencyType");

            if (alipayTradeQueryResponse.ReqGoodsDetailOption.IsSet)
                if (alipayTradeQueryResponse.ReqGoodsDetailOption.Value != null)
                {
                    writer.WritePropertyName("reqGoodsDetail");
                    JsonSerializer.Serialize(writer, alipayTradeQueryResponse.ReqGoodsDetail, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("reqGoodsDetail");
            if (alipayTradeQueryResponse.SendPayDateOption.IsSet)
                if (alipayTradeQueryResponse.SendPayDateOption.Value != null)
                    writer.WriteString("sendPayDate", alipayTradeQueryResponse.SendPayDate);
                else
                    writer.WriteNull("sendPayDate");

            if (alipayTradeQueryResponse.SettleAmountOption.IsSet)
                if (alipayTradeQueryResponse.SettleAmountOption.Value != null)
                    writer.WriteString("settleAmount", alipayTradeQueryResponse.SettleAmount);
                else
                    writer.WriteNull("settleAmount");

            if (alipayTradeQueryResponse.SettleCurrencyOption.IsSet)
                if (alipayTradeQueryResponse.SettleCurrencyOption.Value != null)
                    writer.WriteString("settleCurrency", alipayTradeQueryResponse.SettleCurrency);
                else
                    writer.WriteNull("settleCurrency");

            if (alipayTradeQueryResponse.SettleTransRateOption.IsSet)
                if (alipayTradeQueryResponse.SettleTransRateOption.Value != null)
                    writer.WriteString("settleTransRate", alipayTradeQueryResponse.SettleTransRate);
                else
                    writer.WriteNull("settleTransRate");

            if (alipayTradeQueryResponse.SettlementIdOption.IsSet)
                if (alipayTradeQueryResponse.SettlementIdOption.Value != null)
                    writer.WriteString("settlementId", alipayTradeQueryResponse.SettlementId);
                else
                    writer.WriteNull("settlementId");

            if (alipayTradeQueryResponse.StoreIdOption.IsSet)
                if (alipayTradeQueryResponse.StoreIdOption.Value != null)
                    writer.WriteString("storeId", alipayTradeQueryResponse.StoreId);
                else
                    writer.WriteNull("storeId");

            if (alipayTradeQueryResponse.StoreNameOption.IsSet)
                if (alipayTradeQueryResponse.StoreNameOption.Value != null)
                    writer.WriteString("storeName", alipayTradeQueryResponse.StoreName);
                else
                    writer.WriteNull("storeName");

            if (alipayTradeQueryResponse.SubjectOption.IsSet)
                if (alipayTradeQueryResponse.SubjectOption.Value != null)
                    writer.WriteString("subject", alipayTradeQueryResponse.Subject);
                else
                    writer.WriteNull("subject");

            if (alipayTradeQueryResponse.TapPayInfoOption.IsSet)
            {
                writer.WritePropertyName("tapPayInfo");
                JsonSerializer.Serialize(writer, alipayTradeQueryResponse.TapPayInfo, jsonSerializerOptions);
            }
            if (alipayTradeQueryResponse.TerminalIdOption.IsSet)
                if (alipayTradeQueryResponse.TerminalIdOption.Value != null)
                    writer.WriteString("terminalId", alipayTradeQueryResponse.TerminalId);
                else
                    writer.WriteNull("terminalId");

            if (alipayTradeQueryResponse.TotalAmountOption.IsSet)
                if (alipayTradeQueryResponse.TotalAmountOption.Value != null)
                    writer.WriteString("totalAmount", alipayTradeQueryResponse.TotalAmount);
                else
                    writer.WriteNull("totalAmount");

            if (alipayTradeQueryResponse.TradeNoOption.IsSet)
                if (alipayTradeQueryResponse.TradeNoOption.Value != null)
                    writer.WriteString("tradeNo", alipayTradeQueryResponse.TradeNo);
                else
                    writer.WriteNull("tradeNo");

            if (alipayTradeQueryResponse.TradeSettleInfoOption.IsSet)
            {
                writer.WritePropertyName("tradeSettleInfo");
                JsonSerializer.Serialize(writer, alipayTradeQueryResponse.TradeSettleInfo, jsonSerializerOptions);
            }
            if (alipayTradeQueryResponse.TradeStatusOption.IsSet)
                if (alipayTradeQueryResponse.TradeStatusOption.Value != null)
                    writer.WriteString("tradeStatus", alipayTradeQueryResponse.TradeStatus);
                else
                    writer.WriteNull("tradeStatus");

            if (alipayTradeQueryResponse.TransCurrencyOption.IsSet)
                if (alipayTradeQueryResponse.TransCurrencyOption.Value != null)
                    writer.WriteString("transCurrency", alipayTradeQueryResponse.TransCurrency);
                else
                    writer.WriteNull("transCurrency");

            if (alipayTradeQueryResponse.TransPayRateOption.IsSet)
                if (alipayTradeQueryResponse.TransPayRateOption.Value != null)
                    writer.WriteString("transPayRate", alipayTradeQueryResponse.TransPayRate);
                else
                    writer.WriteNull("transPayRate");

            if (alipayTradeQueryResponse.VoucherDetailListOption.IsSet)
                if (alipayTradeQueryResponse.VoucherDetailListOption.Value != null)
                {
                    writer.WritePropertyName("voucherDetailList");
                    JsonSerializer.Serialize(writer, alipayTradeQueryResponse.VoucherDetailList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("voucherDetailList");
        }
    }
}
