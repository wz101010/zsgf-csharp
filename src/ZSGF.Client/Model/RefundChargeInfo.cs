// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using ZSGF.Client.Client;

namespace ZSGF.Client.Model
{
    /// <summary>
    /// RefundChargeInfo
    /// </summary>
    public partial class RefundChargeInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RefundChargeInfo" /> class.
        /// </summary>
        /// <param name="chargeType">chargeType</param>
        /// <param name="refundChargeFee">refundChargeFee</param>
        /// <param name="refundSubFeeDetailList">refundSubFeeDetailList</param>
        /// <param name="switchFeeRate">switchFeeRate</param>
        [JsonConstructor]
        public RefundChargeInfo(Option<string> chargeType = default, Option<string> refundChargeFee = default, Option<List<RefundSubFee>> refundSubFeeDetailList = default, Option<string> switchFeeRate = default)
        {
            ChargeTypeOption = chargeType;
            RefundChargeFeeOption = refundChargeFee;
            RefundSubFeeDetailListOption = refundSubFeeDetailList;
            SwitchFeeRateOption = switchFeeRate;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ChargeType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ChargeTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets ChargeType
        /// </summary>
        [JsonPropertyName("chargeType")]
        public string ChargeType { get { return this.ChargeTypeOption; } set { this.ChargeTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RefundChargeFee
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RefundChargeFeeOption { get; private set; }

        /// <summary>
        /// Gets or Sets RefundChargeFee
        /// </summary>
        [JsonPropertyName("refundChargeFee")]
        public string RefundChargeFee { get { return this.RefundChargeFeeOption; } set { this.RefundChargeFeeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RefundSubFeeDetailList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<RefundSubFee>> RefundSubFeeDetailListOption { get; private set; }

        /// <summary>
        /// Gets or Sets RefundSubFeeDetailList
        /// </summary>
        [JsonPropertyName("refundSubFeeDetailList")]
        public List<RefundSubFee> RefundSubFeeDetailList { get { return this.RefundSubFeeDetailListOption; } set { this.RefundSubFeeDetailListOption = new Option<List<RefundSubFee>>(value); } }

        /// <summary>
        /// Used to track the state of SwitchFeeRate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SwitchFeeRateOption { get; private set; }

        /// <summary>
        /// Gets or Sets SwitchFeeRate
        /// </summary>
        [JsonPropertyName("switchFeeRate")]
        public string SwitchFeeRate { get { return this.SwitchFeeRateOption; } set { this.SwitchFeeRateOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RefundChargeInfo {\n");
            sb.Append("  ChargeType: ").Append(ChargeType).Append("\n");
            sb.Append("  RefundChargeFee: ").Append(RefundChargeFee).Append("\n");
            sb.Append("  RefundSubFeeDetailList: ").Append(RefundSubFeeDetailList).Append("\n");
            sb.Append("  SwitchFeeRate: ").Append(SwitchFeeRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RefundChargeInfo" />
    /// </summary>
    public class RefundChargeInfoJsonConverter : JsonConverter<RefundChargeInfo>
    {
        /// <summary>
        /// Deserializes json to <see cref="RefundChargeInfo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RefundChargeInfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> chargeType = default;
            Option<string> refundChargeFee = default;
            Option<List<RefundSubFee>> refundSubFeeDetailList = default;
            Option<string> switchFeeRate = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "chargeType":
                            chargeType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "refundChargeFee":
                            refundChargeFee = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "refundSubFeeDetailList":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                refundSubFeeDetailList = new Option<List<RefundSubFee>>(JsonSerializer.Deserialize<List<RefundSubFee>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "switchFeeRate":
                            switchFeeRate = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new RefundChargeInfo(chargeType, refundChargeFee, refundSubFeeDetailList, switchFeeRate);
        }

        /// <summary>
        /// Serializes a <see cref="RefundChargeInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="refundChargeInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RefundChargeInfo refundChargeInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, refundChargeInfo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RefundChargeInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="refundChargeInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RefundChargeInfo refundChargeInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (refundChargeInfo.ChargeTypeOption.IsSet)
                if (refundChargeInfo.ChargeTypeOption.Value != null)
                    writer.WriteString("chargeType", refundChargeInfo.ChargeType);
                else
                    writer.WriteNull("chargeType");

            if (refundChargeInfo.RefundChargeFeeOption.IsSet)
                if (refundChargeInfo.RefundChargeFeeOption.Value != null)
                    writer.WriteString("refundChargeFee", refundChargeInfo.RefundChargeFee);
                else
                    writer.WriteNull("refundChargeFee");

            if (refundChargeInfo.RefundSubFeeDetailListOption.IsSet)
                if (refundChargeInfo.RefundSubFeeDetailListOption.Value != null)
                {
                    writer.WritePropertyName("refundSubFeeDetailList");
                    JsonSerializer.Serialize(writer, refundChargeInfo.RefundSubFeeDetailList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("refundSubFeeDetailList");
            if (refundChargeInfo.SwitchFeeRateOption.IsSet)
                if (refundChargeInfo.SwitchFeeRateOption.Value != null)
                    writer.WriteString("switchFeeRate", refundChargeInfo.SwitchFeeRate);
                else
                    writer.WriteNull("switchFeeRate");
        }
    }
}
