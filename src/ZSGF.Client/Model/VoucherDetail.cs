// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using ZSGF.Client.Client;

namespace ZSGF.Client.Model
{
    /// <summary>
    /// VoucherDetail
    /// </summary>
    public partial class VoucherDetail : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VoucherDetail" /> class.
        /// </summary>
        /// <param name="amount">amount</param>
        /// <param name="id">id</param>
        /// <param name="memo">memo</param>
        /// <param name="merchantContribute">merchantContribute</param>
        /// <param name="name">name</param>
        /// <param name="otherContribute">otherContribute</param>
        /// <param name="otherContributeDetail">otherContributeDetail</param>
        /// <param name="purchaseAntContribute">purchaseAntContribute</param>
        /// <param name="purchaseBuyerContribute">purchaseBuyerContribute</param>
        /// <param name="purchaseMerchantContribute">purchaseMerchantContribute</param>
        /// <param name="templateId">templateId</param>
        /// <param name="type">type</param>
        [JsonConstructor]
        public VoucherDetail(Option<string> amount = default, Option<string> id = default, Option<string> memo = default, Option<string> merchantContribute = default, Option<string> name = default, Option<string> otherContribute = default, Option<List<ContributeDetail>> otherContributeDetail = default, Option<string> purchaseAntContribute = default, Option<string> purchaseBuyerContribute = default, Option<string> purchaseMerchantContribute = default, Option<string> templateId = default, Option<string> type = default)
        {
            AmountOption = amount;
            IdOption = id;
            MemoOption = memo;
            MerchantContributeOption = merchantContribute;
            NameOption = name;
            OtherContributeOption = otherContribute;
            OtherContributeDetailOption = otherContributeDetail;
            PurchaseAntContributeOption = purchaseAntContribute;
            PurchaseBuyerContributeOption = purchaseBuyerContribute;
            PurchaseMerchantContributeOption = purchaseMerchantContribute;
            TemplateIdOption = templateId;
            TypeOption = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Amount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [JsonPropertyName("amount")]
        public string Amount { get { return this.AmountOption; } set { this.AmountOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get { return this.IdOption; } set { this.IdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Memo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MemoOption { get; private set; }

        /// <summary>
        /// Gets or Sets Memo
        /// </summary>
        [JsonPropertyName("memo")]
        public string Memo { get { return this.MemoOption; } set { this.MemoOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of MerchantContribute
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MerchantContributeOption { get; private set; }

        /// <summary>
        /// Gets or Sets MerchantContribute
        /// </summary>
        [JsonPropertyName("merchantContribute")]
        public string MerchantContribute { get { return this.MerchantContributeOption; } set { this.MerchantContributeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OtherContribute
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OtherContributeOption { get; private set; }

        /// <summary>
        /// Gets or Sets OtherContribute
        /// </summary>
        [JsonPropertyName("otherContribute")]
        public string OtherContribute { get { return this.OtherContributeOption; } set { this.OtherContributeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OtherContributeDetail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ContributeDetail>> OtherContributeDetailOption { get; private set; }

        /// <summary>
        /// Gets or Sets OtherContributeDetail
        /// </summary>
        [JsonPropertyName("otherContributeDetail")]
        public List<ContributeDetail> OtherContributeDetail { get { return this.OtherContributeDetailOption; } set { this.OtherContributeDetailOption = new Option<List<ContributeDetail>>(value); } }

        /// <summary>
        /// Used to track the state of PurchaseAntContribute
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PurchaseAntContributeOption { get; private set; }

        /// <summary>
        /// Gets or Sets PurchaseAntContribute
        /// </summary>
        [JsonPropertyName("purchaseAntContribute")]
        public string PurchaseAntContribute { get { return this.PurchaseAntContributeOption; } set { this.PurchaseAntContributeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PurchaseBuyerContribute
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PurchaseBuyerContributeOption { get; private set; }

        /// <summary>
        /// Gets or Sets PurchaseBuyerContribute
        /// </summary>
        [JsonPropertyName("purchaseBuyerContribute")]
        public string PurchaseBuyerContribute { get { return this.PurchaseBuyerContributeOption; } set { this.PurchaseBuyerContributeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PurchaseMerchantContribute
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PurchaseMerchantContributeOption { get; private set; }

        /// <summary>
        /// Gets or Sets PurchaseMerchantContribute
        /// </summary>
        [JsonPropertyName("purchaseMerchantContribute")]
        public string PurchaseMerchantContribute { get { return this.PurchaseMerchantContributeOption; } set { this.PurchaseMerchantContributeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TemplateId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TemplateIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets TemplateId
        /// </summary>
        [JsonPropertyName("templateId")]
        public string TemplateId { get { return this.TemplateIdOption; } set { this.TemplateIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public string Type { get { return this.TypeOption; } set { this.TypeOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VoucherDetail {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Memo: ").Append(Memo).Append("\n");
            sb.Append("  MerchantContribute: ").Append(MerchantContribute).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OtherContribute: ").Append(OtherContribute).Append("\n");
            sb.Append("  OtherContributeDetail: ").Append(OtherContributeDetail).Append("\n");
            sb.Append("  PurchaseAntContribute: ").Append(PurchaseAntContribute).Append("\n");
            sb.Append("  PurchaseBuyerContribute: ").Append(PurchaseBuyerContribute).Append("\n");
            sb.Append("  PurchaseMerchantContribute: ").Append(PurchaseMerchantContribute).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="VoucherDetail" />
    /// </summary>
    public class VoucherDetailJsonConverter : JsonConverter<VoucherDetail>
    {
        /// <summary>
        /// Deserializes json to <see cref="VoucherDetail" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override VoucherDetail Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> amount = default;
            Option<string> id = default;
            Option<string> memo = default;
            Option<string> merchantContribute = default;
            Option<string> name = default;
            Option<string> otherContribute = default;
            Option<List<ContributeDetail>> otherContributeDetail = default;
            Option<string> purchaseAntContribute = default;
            Option<string> purchaseBuyerContribute = default;
            Option<string> purchaseMerchantContribute = default;
            Option<string> templateId = default;
            Option<string> type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "amount":
                            amount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "id":
                            id = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "memo":
                            memo = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "merchantContribute":
                            merchantContribute = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "otherContribute":
                            otherContribute = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "otherContributeDetail":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                otherContributeDetail = new Option<List<ContributeDetail>>(JsonSerializer.Deserialize<List<ContributeDetail>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "purchaseAntContribute":
                            purchaseAntContribute = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "purchaseBuyerContribute":
                            purchaseBuyerContribute = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "purchaseMerchantContribute":
                            purchaseMerchantContribute = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "templateId":
                            templateId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "type":
                            type = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new VoucherDetail(amount, id, memo, merchantContribute, name, otherContribute, otherContributeDetail, purchaseAntContribute, purchaseBuyerContribute, purchaseMerchantContribute, templateId, type);
        }

        /// <summary>
        /// Serializes a <see cref="VoucherDetail" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="voucherDetail"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, VoucherDetail voucherDetail, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, voucherDetail, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="VoucherDetail" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="voucherDetail"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, VoucherDetail voucherDetail, JsonSerializerOptions jsonSerializerOptions)
        {
            if (voucherDetail.AmountOption.IsSet)
                if (voucherDetail.AmountOption.Value != null)
                    writer.WriteString("amount", voucherDetail.Amount);
                else
                    writer.WriteNull("amount");

            if (voucherDetail.IdOption.IsSet)
                if (voucherDetail.IdOption.Value != null)
                    writer.WriteString("id", voucherDetail.Id);
                else
                    writer.WriteNull("id");

            if (voucherDetail.MemoOption.IsSet)
                if (voucherDetail.MemoOption.Value != null)
                    writer.WriteString("memo", voucherDetail.Memo);
                else
                    writer.WriteNull("memo");

            if (voucherDetail.MerchantContributeOption.IsSet)
                if (voucherDetail.MerchantContributeOption.Value != null)
                    writer.WriteString("merchantContribute", voucherDetail.MerchantContribute);
                else
                    writer.WriteNull("merchantContribute");

            if (voucherDetail.NameOption.IsSet)
                if (voucherDetail.NameOption.Value != null)
                    writer.WriteString("name", voucherDetail.Name);
                else
                    writer.WriteNull("name");

            if (voucherDetail.OtherContributeOption.IsSet)
                if (voucherDetail.OtherContributeOption.Value != null)
                    writer.WriteString("otherContribute", voucherDetail.OtherContribute);
                else
                    writer.WriteNull("otherContribute");

            if (voucherDetail.OtherContributeDetailOption.IsSet)
                if (voucherDetail.OtherContributeDetailOption.Value != null)
                {
                    writer.WritePropertyName("otherContributeDetail");
                    JsonSerializer.Serialize(writer, voucherDetail.OtherContributeDetail, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("otherContributeDetail");
            if (voucherDetail.PurchaseAntContributeOption.IsSet)
                if (voucherDetail.PurchaseAntContributeOption.Value != null)
                    writer.WriteString("purchaseAntContribute", voucherDetail.PurchaseAntContribute);
                else
                    writer.WriteNull("purchaseAntContribute");

            if (voucherDetail.PurchaseBuyerContributeOption.IsSet)
                if (voucherDetail.PurchaseBuyerContributeOption.Value != null)
                    writer.WriteString("purchaseBuyerContribute", voucherDetail.PurchaseBuyerContribute);
                else
                    writer.WriteNull("purchaseBuyerContribute");

            if (voucherDetail.PurchaseMerchantContributeOption.IsSet)
                if (voucherDetail.PurchaseMerchantContributeOption.Value != null)
                    writer.WriteString("purchaseMerchantContribute", voucherDetail.PurchaseMerchantContribute);
                else
                    writer.WriteNull("purchaseMerchantContribute");

            if (voucherDetail.TemplateIdOption.IsSet)
                if (voucherDetail.TemplateIdOption.Value != null)
                    writer.WriteString("templateId", voucherDetail.TemplateId);
                else
                    writer.WriteNull("templateId");

            if (voucherDetail.TypeOption.IsSet)
                if (voucherDetail.TypeOption.Value != null)
                    writer.WriteString("type", voucherDetail.Type);
                else
                    writer.WriteNull("type");
        }
    }
}
