// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using ZSGF.Client.Client;

namespace ZSGF.Client.Model
{
    /// <summary>
    /// GeoLocationModel
    /// </summary>
    public partial class GeoLocationModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GeoLocationModel" /> class.
        /// </summary>
        /// <param name="latitude">纬度</param>
        /// <param name="longitude">经度</param>
        /// <param name="locationType">地点的类型，如家庭、工作、学校等</param>
        /// <param name="locationName">地点的名称</param>
        /// <param name="recipientName">收货人姓名</param>
        /// <param name="phoneNumber">收货人联系电话</param>
        /// <param name="email">收货人电子邮件</param>
        /// <param name="country">国家</param>
        /// <param name="state">州/省</param>
        /// <param name="city">城市</param>
        /// <param name="district">区/县</param>
        /// <param name="street">街道</param>
        /// <param name="zipCode">邮政编码</param>
        /// <param name="address">详细的地址信息</param>
        /// <param name="mapType">地址类型，百度、高德、谷歌</param>
        /// <param name="remark">备注</param>
        /// <param name="tags">标签</param>
        /// <param name="enable">启用</param>
        /// <param name="showIndex">排序</param>
        /// <param name="createDate">创建时间</param>
        /// <param name="lastUpdate">最后更新的时间</param>
        [JsonConstructor]
        public GeoLocationModel(double latitude, double longitude, string locationType, Option<string> locationName = default, Option<string> recipientName = default, Option<string> phoneNumber = default, Option<string> email = default, Option<string> country = default, Option<string> state = default, Option<string> city = default, Option<string> district = default, Option<string> street = default, Option<string> zipCode = default, Option<string> address = default, Option<string> mapType = default, Option<string> remark = default, Option<string> tags = default, Option<bool?> enable = default, Option<int?> showIndex = default, Option<DateTime?> createDate = default, Option<DateTime?> lastUpdate = default)
        {
            Latitude = latitude;
            Longitude = longitude;
            LocationType = locationType;
            LocationNameOption = locationName;
            RecipientNameOption = recipientName;
            PhoneNumberOption = phoneNumber;
            EmailOption = email;
            CountryOption = country;
            StateOption = state;
            CityOption = city;
            DistrictOption = district;
            StreetOption = street;
            ZipCodeOption = zipCode;
            AddressOption = address;
            MapTypeOption = mapType;
            RemarkOption = remark;
            TagsOption = tags;
            EnableOption = enable;
            ShowIndexOption = showIndex;
            CreateDateOption = createDate;
            LastUpdateOption = lastUpdate;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// 纬度
        /// </summary>
        /// <value>纬度</value>
        [JsonPropertyName("latitude")]
        public double Latitude { get; set; }

        /// <summary>
        /// 经度
        /// </summary>
        /// <value>经度</value>
        [JsonPropertyName("longitude")]
        public double Longitude { get; set; }

        /// <summary>
        /// 地点的类型，如家庭、工作、学校等
        /// </summary>
        /// <value>地点的类型，如家庭、工作、学校等</value>
        [JsonPropertyName("locationType")]
        public string LocationType { get; set; }

        /// <summary>
        /// Used to track the state of LocationName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LocationNameOption { get; private set; }

        /// <summary>
        /// 地点的名称
        /// </summary>
        /// <value>地点的名称</value>
        [JsonPropertyName("locationName")]
        public string LocationName { get { return this.LocationNameOption; } set { this.LocationNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RecipientName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RecipientNameOption { get; private set; }

        /// <summary>
        /// 收货人姓名
        /// </summary>
        /// <value>收货人姓名</value>
        [JsonPropertyName("recipientName")]
        public string RecipientName { get { return this.RecipientNameOption; } set { this.RecipientNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PhoneNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PhoneNumberOption { get; private set; }

        /// <summary>
        /// 收货人联系电话
        /// </summary>
        /// <value>收货人联系电话</value>
        [JsonPropertyName("phoneNumber")]
        public string PhoneNumber { get { return this.PhoneNumberOption; } set { this.PhoneNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Email
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EmailOption { get; private set; }

        /// <summary>
        /// 收货人电子邮件
        /// </summary>
        /// <value>收货人电子邮件</value>
        [JsonPropertyName("email")]
        public string Email { get { return this.EmailOption; } set { this.EmailOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Country
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CountryOption { get; private set; }

        /// <summary>
        /// 国家
        /// </summary>
        /// <value>国家</value>
        [JsonPropertyName("country")]
        public string Country { get { return this.CountryOption; } set { this.CountryOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of State
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> StateOption { get; private set; }

        /// <summary>
        /// 州/省
        /// </summary>
        /// <value>州/省</value>
        [JsonPropertyName("state")]
        public string State { get { return this.StateOption; } set { this.StateOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of City
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CityOption { get; private set; }

        /// <summary>
        /// 城市
        /// </summary>
        /// <value>城市</value>
        [JsonPropertyName("city")]
        public string City { get { return this.CityOption; } set { this.CityOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of District
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DistrictOption { get; private set; }

        /// <summary>
        /// 区/县
        /// </summary>
        /// <value>区/县</value>
        [JsonPropertyName("district")]
        public string District { get { return this.DistrictOption; } set { this.DistrictOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Street
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> StreetOption { get; private set; }

        /// <summary>
        /// 街道
        /// </summary>
        /// <value>街道</value>
        [JsonPropertyName("street")]
        public string Street { get { return this.StreetOption; } set { this.StreetOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ZipCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ZipCodeOption { get; private set; }

        /// <summary>
        /// 邮政编码
        /// </summary>
        /// <value>邮政编码</value>
        [JsonPropertyName("zipCode")]
        public string ZipCode { get { return this.ZipCodeOption; } set { this.ZipCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Address
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AddressOption { get; private set; }

        /// <summary>
        /// 详细的地址信息
        /// </summary>
        /// <value>详细的地址信息</value>
        [JsonPropertyName("address")]
        public string Address { get { return this.AddressOption; } set { this.AddressOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of MapType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MapTypeOption { get; private set; }

        /// <summary>
        /// 地址类型，百度、高德、谷歌
        /// </summary>
        /// <value>地址类型，百度、高德、谷歌</value>
        [JsonPropertyName("mapType")]
        public string MapType { get { return this.MapTypeOption; } set { this.MapTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Remark
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RemarkOption { get; private set; }

        /// <summary>
        /// 备注
        /// </summary>
        /// <value>备注</value>
        [JsonPropertyName("remark")]
        public string Remark { get { return this.RemarkOption; } set { this.RemarkOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Tags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TagsOption { get; private set; }

        /// <summary>
        /// 标签
        /// </summary>
        /// <value>标签</value>
        [JsonPropertyName("tags")]
        public string Tags { get { return this.TagsOption; } set { this.TagsOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Enable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EnableOption { get; private set; }

        /// <summary>
        /// 启用
        /// </summary>
        /// <value>启用</value>
        [JsonPropertyName("enable")]
        public bool? Enable { get { return this.EnableOption; } set { this.EnableOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of ShowIndex
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ShowIndexOption { get; private set; }

        /// <summary>
        /// 排序
        /// </summary>
        /// <value>排序</value>
        [JsonPropertyName("showIndex")]
        public int? ShowIndex { get { return this.ShowIndexOption; } set { this.ShowIndexOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of CreateDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreateDateOption { get; private set; }

        /// <summary>
        /// 创建时间
        /// </summary>
        /// <value>创建时间</value>
        [JsonPropertyName("createDate")]
        public DateTime? CreateDate { get { return this.CreateDateOption; } set { this.CreateDateOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of LastUpdate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastUpdateOption { get; private set; }

        /// <summary>
        /// 最后更新的时间
        /// </summary>
        /// <value>最后更新的时间</value>
        [JsonPropertyName("lastUpdate")]
        public DateTime? LastUpdate { get { return this.LastUpdateOption; } set { this.LastUpdateOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GeoLocationModel {\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  LocationType: ").Append(LocationType).Append("\n");
            sb.Append("  LocationName: ").Append(LocationName).Append("\n");
            sb.Append("  RecipientName: ").Append(RecipientName).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  District: ").Append(District).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  ZipCode: ").Append(ZipCode).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  MapType: ").Append(MapType).Append("\n");
            sb.Append("  Remark: ").Append(Remark).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  ShowIndex: ").Append(ShowIndex).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  LastUpdate: ").Append(LastUpdate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // LocationType (string) maxLength
            if (this.LocationType != null && this.LocationType.Length > 20)
            {
                yield return new ValidationResult("Invalid value for LocationType, length must be less than 20.", new [] { "LocationType" });
            }

            // LocationType (string) minLength
            if (this.LocationType != null && this.LocationType.Length < 1)
            {
                yield return new ValidationResult("Invalid value for LocationType, length must be greater than 1.", new [] { "LocationType" });
            }

            // LocationName (string) maxLength
            if (this.LocationName != null && this.LocationName.Length > 50)
            {
                yield return new ValidationResult("Invalid value for LocationName, length must be less than 50.", new [] { "LocationName" });
            }

            // RecipientName (string) maxLength
            if (this.RecipientName != null && this.RecipientName.Length > 50)
            {
                yield return new ValidationResult("Invalid value for RecipientName, length must be less than 50.", new [] { "RecipientName" });
            }

            // Country (string) maxLength
            if (this.Country != null && this.Country.Length > 20)
            {
                yield return new ValidationResult("Invalid value for Country, length must be less than 20.", new [] { "Country" });
            }

            // State (string) maxLength
            if (this.State != null && this.State.Length > 20)
            {
                yield return new ValidationResult("Invalid value for State, length must be less than 20.", new [] { "State" });
            }

            // City (string) maxLength
            if (this.City != null && this.City.Length > 20)
            {
                yield return new ValidationResult("Invalid value for City, length must be less than 20.", new [] { "City" });
            }

            // District (string) maxLength
            if (this.District != null && this.District.Length > 50)
            {
                yield return new ValidationResult("Invalid value for District, length must be less than 50.", new [] { "District" });
            }

            // Street (string) maxLength
            if (this.Street != null && this.Street.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Street, length must be less than 255.", new [] { "Street" });
            }

            // ZipCode (string) maxLength
            if (this.ZipCode != null && this.ZipCode.Length > 20)
            {
                yield return new ValidationResult("Invalid value for ZipCode, length must be less than 20.", new [] { "ZipCode" });
            }

            // Address (string) maxLength
            if (this.Address != null && this.Address.Length > 1000)
            {
                yield return new ValidationResult("Invalid value for Address, length must be less than 1000.", new [] { "Address" });
            }

            // MapType (string) maxLength
            if (this.MapType != null && this.MapType.Length > 20)
            {
                yield return new ValidationResult("Invalid value for MapType, length must be less than 20.", new [] { "MapType" });
            }

            // Remark (string) maxLength
            if (this.Remark != null && this.Remark.Length > 5000)
            {
                yield return new ValidationResult("Invalid value for Remark, length must be less than 5000.", new [] { "Remark" });
            }

            // Tags (string) maxLength
            if (this.Tags != null && this.Tags.Length > 1000)
            {
                yield return new ValidationResult("Invalid value for Tags, length must be less than 1000.", new [] { "Tags" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GeoLocationModel" />
    /// </summary>
    public class GeoLocationModelJsonConverter : JsonConverter<GeoLocationModel>
    {
        /// <summary>
        /// The format to use to serialize CreateDate
        /// </summary>
        public static string CreateDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize LastUpdate
        /// </summary>
        public static string LastUpdateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="GeoLocationModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GeoLocationModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<double?> latitude = default;
            Option<double?> longitude = default;
            Option<string> locationType = default;
            Option<string> locationName = default;
            Option<string> recipientName = default;
            Option<string> phoneNumber = default;
            Option<string> email = default;
            Option<string> country = default;
            Option<string> state = default;
            Option<string> city = default;
            Option<string> district = default;
            Option<string> street = default;
            Option<string> zipCode = default;
            Option<string> address = default;
            Option<string> mapType = default;
            Option<string> remark = default;
            Option<string> tags = default;
            Option<bool?> enable = default;
            Option<int?> showIndex = default;
            Option<DateTime?> createDate = default;
            Option<DateTime?> lastUpdate = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "latitude":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                latitude = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "longitude":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                longitude = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "locationType":
                            locationType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "locationName":
                            locationName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "recipientName":
                            recipientName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "phoneNumber":
                            phoneNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "email":
                            email = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "country":
                            country = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "state":
                            state = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "city":
                            city = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "district":
                            district = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "street":
                            street = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "zipCode":
                            zipCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "address":
                            address = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "mapType":
                            mapType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "remark":
                            remark = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "tags":
                            tags = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "enable":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                enable = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "showIndex":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                showIndex = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "createDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "lastUpdate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lastUpdate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!latitude.IsSet)
                throw new ArgumentException("Property is required for class GeoLocationModel.", nameof(latitude));

            if (!longitude.IsSet)
                throw new ArgumentException("Property is required for class GeoLocationModel.", nameof(longitude));

            if (!locationType.IsSet)
                throw new ArgumentException("Property is required for class GeoLocationModel.", nameof(locationType));

            if (latitude.IsSet && latitude.Value == null)
                throw new ArgumentNullException(nameof(latitude), "Property is not nullable for class GeoLocationModel.");

            if (longitude.IsSet && longitude.Value == null)
                throw new ArgumentNullException(nameof(longitude), "Property is not nullable for class GeoLocationModel.");

            if (locationType.IsSet && locationType.Value == null)
                throw new ArgumentNullException(nameof(locationType), "Property is not nullable for class GeoLocationModel.");

            if (createDate.IsSet && createDate.Value == null)
                throw new ArgumentNullException(nameof(createDate), "Property is not nullable for class GeoLocationModel.");

            if (lastUpdate.IsSet && lastUpdate.Value == null)
                throw new ArgumentNullException(nameof(lastUpdate), "Property is not nullable for class GeoLocationModel.");

            return new GeoLocationModel(latitude.Value.Value, longitude.Value.Value, locationType.Value, locationName, recipientName, phoneNumber, email, country, state, city, district, street, zipCode, address, mapType, remark, tags, enable, showIndex, createDate, lastUpdate);
        }

        /// <summary>
        /// Serializes a <see cref="GeoLocationModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="geoLocationModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GeoLocationModel geoLocationModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, geoLocationModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GeoLocationModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="geoLocationModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GeoLocationModel geoLocationModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (geoLocationModel.LocationType == null)
                throw new ArgumentNullException(nameof(geoLocationModel.LocationType), "Property is required for class GeoLocationModel.");

            writer.WriteNumber("latitude", geoLocationModel.Latitude);

            writer.WriteNumber("longitude", geoLocationModel.Longitude);

            writer.WriteString("locationType", geoLocationModel.LocationType);

            if (geoLocationModel.LocationNameOption.IsSet)
                if (geoLocationModel.LocationNameOption.Value != null)
                    writer.WriteString("locationName", geoLocationModel.LocationName);
                else
                    writer.WriteNull("locationName");

            if (geoLocationModel.RecipientNameOption.IsSet)
                if (geoLocationModel.RecipientNameOption.Value != null)
                    writer.WriteString("recipientName", geoLocationModel.RecipientName);
                else
                    writer.WriteNull("recipientName");

            if (geoLocationModel.PhoneNumberOption.IsSet)
                if (geoLocationModel.PhoneNumberOption.Value != null)
                    writer.WriteString("phoneNumber", geoLocationModel.PhoneNumber);
                else
                    writer.WriteNull("phoneNumber");

            if (geoLocationModel.EmailOption.IsSet)
                if (geoLocationModel.EmailOption.Value != null)
                    writer.WriteString("email", geoLocationModel.Email);
                else
                    writer.WriteNull("email");

            if (geoLocationModel.CountryOption.IsSet)
                if (geoLocationModel.CountryOption.Value != null)
                    writer.WriteString("country", geoLocationModel.Country);
                else
                    writer.WriteNull("country");

            if (geoLocationModel.StateOption.IsSet)
                if (geoLocationModel.StateOption.Value != null)
                    writer.WriteString("state", geoLocationModel.State);
                else
                    writer.WriteNull("state");

            if (geoLocationModel.CityOption.IsSet)
                if (geoLocationModel.CityOption.Value != null)
                    writer.WriteString("city", geoLocationModel.City);
                else
                    writer.WriteNull("city");

            if (geoLocationModel.DistrictOption.IsSet)
                if (geoLocationModel.DistrictOption.Value != null)
                    writer.WriteString("district", geoLocationModel.District);
                else
                    writer.WriteNull("district");

            if (geoLocationModel.StreetOption.IsSet)
                if (geoLocationModel.StreetOption.Value != null)
                    writer.WriteString("street", geoLocationModel.Street);
                else
                    writer.WriteNull("street");

            if (geoLocationModel.ZipCodeOption.IsSet)
                if (geoLocationModel.ZipCodeOption.Value != null)
                    writer.WriteString("zipCode", geoLocationModel.ZipCode);
                else
                    writer.WriteNull("zipCode");

            if (geoLocationModel.AddressOption.IsSet)
                if (geoLocationModel.AddressOption.Value != null)
                    writer.WriteString("address", geoLocationModel.Address);
                else
                    writer.WriteNull("address");

            if (geoLocationModel.MapTypeOption.IsSet)
                if (geoLocationModel.MapTypeOption.Value != null)
                    writer.WriteString("mapType", geoLocationModel.MapType);
                else
                    writer.WriteNull("mapType");

            if (geoLocationModel.RemarkOption.IsSet)
                if (geoLocationModel.RemarkOption.Value != null)
                    writer.WriteString("remark", geoLocationModel.Remark);
                else
                    writer.WriteNull("remark");

            if (geoLocationModel.TagsOption.IsSet)
                if (geoLocationModel.TagsOption.Value != null)
                    writer.WriteString("tags", geoLocationModel.Tags);
                else
                    writer.WriteNull("tags");

            if (geoLocationModel.EnableOption.IsSet)
                if (geoLocationModel.EnableOption.Value != null)
                    writer.WriteBoolean("enable", geoLocationModel.EnableOption.Value.Value);
                else
                    writer.WriteNull("enable");

            if (geoLocationModel.ShowIndexOption.IsSet)
                if (geoLocationModel.ShowIndexOption.Value != null)
                    writer.WriteNumber("showIndex", geoLocationModel.ShowIndexOption.Value.Value);
                else
                    writer.WriteNull("showIndex");

            if (geoLocationModel.CreateDateOption.IsSet)
                writer.WriteString("createDate", geoLocationModel.CreateDateOption.Value.Value.ToString(CreateDateFormat));

            if (geoLocationModel.LastUpdateOption.IsSet)
                writer.WriteString("lastUpdate", geoLocationModel.LastUpdateOption.Value.Value.ToString(LastUpdateFormat));
        }
    }
}
