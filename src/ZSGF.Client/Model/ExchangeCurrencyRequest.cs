// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using ZSGF.Client.Client;

namespace ZSGF.Client.Model
{
    /// <summary>
    /// ExchangeCurrencyRequest
    /// </summary>
    public partial class ExchangeCurrencyRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangeCurrencyRequest" /> class.
        /// </summary>
        /// <param name="fromCurrency">源虚拟币代码</param>
        /// <param name="currency">目标虚拟币代码</param>
        /// <param name="balance">兑换额</param>
        /// <param name="remark">备注</param>
        /// <param name="description">描述</param>
        /// <param name="tags">标签</param>
        [JsonConstructor]
        public ExchangeCurrencyRequest(string fromCurrency, string currency, int balance, Option<string> remark = default, Option<string> description = default, Option<string> tags = default)
        {
            FromCurrency = fromCurrency;
            Currency = currency;
            Balance = balance;
            RemarkOption = remark;
            DescriptionOption = description;
            TagsOption = tags;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// 源虚拟币代码
        /// </summary>
        /// <value>源虚拟币代码</value>
        [JsonPropertyName("fromCurrency")]
        public string FromCurrency { get; set; }

        /// <summary>
        /// 目标虚拟币代码
        /// </summary>
        /// <value>目标虚拟币代码</value>
        [JsonPropertyName("currency")]
        public string Currency { get; set; }

        /// <summary>
        /// 兑换额
        /// </summary>
        /// <value>兑换额</value>
        [JsonPropertyName("balance")]
        public int Balance { get; set; }

        /// <summary>
        /// Used to track the state of Remark
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RemarkOption { get; private set; }

        /// <summary>
        /// 备注
        /// </summary>
        /// <value>备注</value>
        [JsonPropertyName("remark")]
        public string Remark { get { return this.RemarkOption; } set { this.RemarkOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DescriptionOption { get; private set; }

        /// <summary>
        /// 描述
        /// </summary>
        /// <value>描述</value>
        [JsonPropertyName("description")]
        public string Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Tags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TagsOption { get; private set; }

        /// <summary>
        /// 标签
        /// </summary>
        /// <value>标签</value>
        [JsonPropertyName("tags")]
        public string Tags { get { return this.TagsOption; } set { this.TagsOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExchangeCurrencyRequest {\n");
            sb.Append("  FromCurrency: ").Append(FromCurrency).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  Remark: ").Append(Remark).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // FromCurrency (string) minLength
            if (this.FromCurrency != null && this.FromCurrency.Length < 1)
            {
                yield return new ValidationResult("Invalid value for FromCurrency, length must be greater than 1.", new [] { "FromCurrency" });
            }

            // Currency (string) minLength
            if (this.Currency != null && this.Currency.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Currency, length must be greater than 1.", new [] { "Currency" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ExchangeCurrencyRequest" />
    /// </summary>
    public class ExchangeCurrencyRequestJsonConverter : JsonConverter<ExchangeCurrencyRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="ExchangeCurrencyRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ExchangeCurrencyRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> fromCurrency = default;
            Option<string> currency = default;
            Option<int?> balance = default;
            Option<string> remark = default;
            Option<string> description = default;
            Option<string> tags = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "fromCurrency":
                            fromCurrency = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "currency":
                            currency = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "balance":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                balance = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "remark":
                            remark = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "description":
                            description = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "tags":
                            tags = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!fromCurrency.IsSet)
                throw new ArgumentException("Property is required for class ExchangeCurrencyRequest.", nameof(fromCurrency));

            if (!currency.IsSet)
                throw new ArgumentException("Property is required for class ExchangeCurrencyRequest.", nameof(currency));

            if (!balance.IsSet)
                throw new ArgumentException("Property is required for class ExchangeCurrencyRequest.", nameof(balance));

            if (fromCurrency.IsSet && fromCurrency.Value == null)
                throw new ArgumentNullException(nameof(fromCurrency), "Property is not nullable for class ExchangeCurrencyRequest.");

            if (currency.IsSet && currency.Value == null)
                throw new ArgumentNullException(nameof(currency), "Property is not nullable for class ExchangeCurrencyRequest.");

            if (balance.IsSet && balance.Value == null)
                throw new ArgumentNullException(nameof(balance), "Property is not nullable for class ExchangeCurrencyRequest.");

            return new ExchangeCurrencyRequest(fromCurrency.Value, currency.Value, balance.Value.Value, remark, description, tags);
        }

        /// <summary>
        /// Serializes a <see cref="ExchangeCurrencyRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="exchangeCurrencyRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ExchangeCurrencyRequest exchangeCurrencyRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, exchangeCurrencyRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ExchangeCurrencyRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="exchangeCurrencyRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ExchangeCurrencyRequest exchangeCurrencyRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (exchangeCurrencyRequest.FromCurrency == null)
                throw new ArgumentNullException(nameof(exchangeCurrencyRequest.FromCurrency), "Property is required for class ExchangeCurrencyRequest.");

            if (exchangeCurrencyRequest.Currency == null)
                throw new ArgumentNullException(nameof(exchangeCurrencyRequest.Currency), "Property is required for class ExchangeCurrencyRequest.");

            writer.WriteString("fromCurrency", exchangeCurrencyRequest.FromCurrency);

            writer.WriteString("currency", exchangeCurrencyRequest.Currency);

            writer.WriteNumber("balance", exchangeCurrencyRequest.Balance);

            if (exchangeCurrencyRequest.RemarkOption.IsSet)
                if (exchangeCurrencyRequest.RemarkOption.Value != null)
                    writer.WriteString("remark", exchangeCurrencyRequest.Remark);
                else
                    writer.WriteNull("remark");

            if (exchangeCurrencyRequest.DescriptionOption.IsSet)
                if (exchangeCurrencyRequest.DescriptionOption.Value != null)
                    writer.WriteString("description", exchangeCurrencyRequest.Description);
                else
                    writer.WriteNull("description");

            if (exchangeCurrencyRequest.TagsOption.IsSet)
                if (exchangeCurrencyRequest.TagsOption.Value != null)
                    writer.WriteString("tags", exchangeCurrencyRequest.Tags);
                else
                    writer.WriteNull("tags");
        }
    }
}
