// <auto-generated>
/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using ZSGF.Client.Client;

namespace ZSGF.Client.Model
{
    /// <summary>
    /// AccessTokenPostRequest
    /// </summary>
    public partial class AccessTokenPostRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccessTokenPostRequest" /> class.
        /// </summary>
        /// <param name="title">title</param>
        /// <param name="tags">tags</param>
        /// <param name="userID">userID</param>
        /// <param name="description">description</param>
        /// <param name="permissions">permissions</param>
        /// <param name="expireInDays">expireInDays</param>
        [JsonConstructor]
        public AccessTokenPostRequest(string title, Option<string> tags = default, Option<long?> userID = default, Option<string> description = default, Option<string> permissions = default, Option<int?> expireInDays = default)
        {
            Title = title;
            TagsOption = tags;
            UserIDOption = userID;
            DescriptionOption = description;
            PermissionsOption = permissions;
            ExpireInDaysOption = expireInDays;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// Used to track the state of Tags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TagsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [JsonPropertyName("tags")]
        public string Tags { get { return this.TagsOption; } set { this.TagsOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of UserID
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> UserIDOption { get; private set; }

        /// <summary>
        /// Gets or Sets UserID
        /// </summary>
        [JsonPropertyName("userID")]
        public long? UserID { get { return this.UserIDOption; } set { this.UserIDOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Permissions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PermissionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Permissions
        /// </summary>
        [JsonPropertyName("permissions")]
        public string Permissions { get { return this.PermissionsOption; } set { this.PermissionsOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ExpireInDays
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ExpireInDaysOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExpireInDays
        /// </summary>
        [JsonPropertyName("expireInDays")]
        public int? ExpireInDays { get { return this.ExpireInDaysOption; } set { this.ExpireInDaysOption = new Option<int?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccessTokenPostRequest {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  UserID: ").Append(UserID).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  ExpireInDays: ").Append(ExpireInDays).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Title (string) minLength
            if (this.Title != null && this.Title.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Title, length must be greater than 1.", new [] { "Title" });
            }

            // ExpireInDays (int) maximum
            if (this.ExpireInDaysOption.IsSet && this.ExpireInDaysOption.Value > (int)3650)
            {
                yield return new ValidationResult("Invalid value for ExpireInDays, must be a value less than or equal to 3650.", new [] { "ExpireInDays" });
            }

            // ExpireInDays (int) minimum
            if (this.ExpireInDaysOption.IsSet && this.ExpireInDaysOption.Value < (int)-1)
            {
                yield return new ValidationResult("Invalid value for ExpireInDays, must be a value greater than or equal to -1.", new [] { "ExpireInDays" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AccessTokenPostRequest" />
    /// </summary>
    public class AccessTokenPostRequestJsonConverter : JsonConverter<AccessTokenPostRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="AccessTokenPostRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AccessTokenPostRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> title = default;
            Option<string> tags = default;
            Option<long?> userID = default;
            Option<string> description = default;
            Option<string> permissions = default;
            Option<int?> expireInDays = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "title":
                            title = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "tags":
                            tags = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "userID":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                userID = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "description":
                            description = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "permissions":
                            permissions = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "expireInDays":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                expireInDays = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!title.IsSet)
                throw new ArgumentException("Property is required for class AccessTokenPostRequest.", nameof(title));

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class AccessTokenPostRequest.");

            if (userID.IsSet && userID.Value == null)
                throw new ArgumentNullException(nameof(userID), "Property is not nullable for class AccessTokenPostRequest.");

            if (expireInDays.IsSet && expireInDays.Value == null)
                throw new ArgumentNullException(nameof(expireInDays), "Property is not nullable for class AccessTokenPostRequest.");

            return new AccessTokenPostRequest(title.Value, tags, userID, description, permissions, expireInDays);
        }

        /// <summary>
        /// Serializes a <see cref="AccessTokenPostRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="accessTokenPostRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AccessTokenPostRequest accessTokenPostRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, accessTokenPostRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AccessTokenPostRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="accessTokenPostRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AccessTokenPostRequest accessTokenPostRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (accessTokenPostRequest.Title == null)
                throw new ArgumentNullException(nameof(accessTokenPostRequest.Title), "Property is required for class AccessTokenPostRequest.");

            writer.WriteString("title", accessTokenPostRequest.Title);

            if (accessTokenPostRequest.TagsOption.IsSet)
                if (accessTokenPostRequest.TagsOption.Value != null)
                    writer.WriteString("tags", accessTokenPostRequest.Tags);
                else
                    writer.WriteNull("tags");

            if (accessTokenPostRequest.UserIDOption.IsSet)
                writer.WriteNumber("userID", accessTokenPostRequest.UserIDOption.Value.Value);

            if (accessTokenPostRequest.DescriptionOption.IsSet)
                if (accessTokenPostRequest.DescriptionOption.Value != null)
                    writer.WriteString("description", accessTokenPostRequest.Description);
                else
                    writer.WriteNull("description");

            if (accessTokenPostRequest.PermissionsOption.IsSet)
                if (accessTokenPostRequest.PermissionsOption.Value != null)
                    writer.WriteString("permissions", accessTokenPostRequest.Permissions);
                else
                    writer.WriteNull("permissions");

            if (accessTokenPostRequest.ExpireInDaysOption.IsSet)
                writer.WriteNumber("expireInDays", accessTokenPostRequest.ExpireInDaysOption.Value.Value);
        }
    }
}
