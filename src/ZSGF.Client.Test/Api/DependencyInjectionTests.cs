/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.DependencyInjection;
using System.Collections.Generic;
using System.Security.Cryptography;
using ZSGF.Client.Client;
using ZSGF.Client.Api;
using ZSGF.Client.Extensions;
using Xunit;

namespace ZSGF.Client.Test.Api
{
    /// <summary>
    ///  Tests the dependency injection.
    /// </summary>
    public class DependencyInjectionTest
    {
        private readonly IHost _hostUsingConfigureWithoutAClient =
            Host.CreateDefaultBuilder(Array.Empty<string>()).ConfigureApi((context, services, options) =>
            {
                BearerToken bearerToken1 = new BearerToken("<token>", timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(bearerToken1);
            })
            .Build();

        private readonly IHost _hostUsingConfigureWithAClient =
            Host.CreateDefaultBuilder(Array.Empty<string>()).ConfigureApi((context, services, options) =>
            {
                BearerToken bearerToken1 = new BearerToken("<token>", timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(bearerToken1);
                options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
            })
            .Build();

        private readonly IHost _hostUsingAddWithoutAClient =
            Host.CreateDefaultBuilder(Array.Empty<string>()).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {
                    BearerToken bearerToken1 = new BearerToken("<token>", timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(bearerToken1);
                });
            })
            .Build();

        private readonly IHost _hostUsingAddWithAClient =
            Host.CreateDefaultBuilder(Array.Empty<string>()).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {
                    BearerToken bearerToken1 = new BearerToken("<token>", timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(bearerToken1);
                    options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
                });
            })
            .Build();

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithAClientTest()
        {
            var accessTokenApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IAccessTokenApi>();
            Assert.True(accessTokenApi.HttpClient.BaseAddress != null);

            var alipayApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IAlipayApi>();
            Assert.True(alipayApi.HttpClient.BaseAddress != null);

            var appApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IAppApi>();
            Assert.True(appApi.HttpClient.BaseAddress != null);

            var dingTalkApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IDingTalkApi>();
            Assert.True(dingTalkApi.HttpClient.BaseAddress != null);

            var externalAccountApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IExternalAccountApi>();
            Assert.True(externalAccountApi.HttpClient.BaseAddress != null);

            var fileApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IFileApi>();
            Assert.True(fileApi.HttpClient.BaseAddress != null);

            var oAuthApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IOAuthApi>();
            Assert.True(oAuthApi.HttpClient.BaseAddress != null);

            var orderApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IOrderApi>();
            Assert.True(orderApi.HttpClient.BaseAddress != null);

            var storageApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IStorageApi>();
            Assert.True(storageApi.HttpClient.BaseAddress != null);

            var userApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IUserApi>();
            Assert.True(userApi.HttpClient.BaseAddress != null);

            var userCurrencyApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IUserCurrencyApi>();
            Assert.True(userCurrencyApi.HttpClient.BaseAddress != null);

            var userFriendsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IUserFriendsApi>();
            Assert.True(userFriendsApi.HttpClient.BaseAddress != null);

            var userLocationApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IUserLocationApi>();
            Assert.True(userLocationApi.HttpClient.BaseAddress != null);

            var wechatApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IWechatApi>();
            Assert.True(wechatApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithoutAClientTest()
        {
            var accessTokenApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IAccessTokenApi>();
            Assert.True(accessTokenApi.HttpClient.BaseAddress != null);

            var alipayApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IAlipayApi>();
            Assert.True(alipayApi.HttpClient.BaseAddress != null);

            var appApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IAppApi>();
            Assert.True(appApi.HttpClient.BaseAddress != null);

            var dingTalkApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IDingTalkApi>();
            Assert.True(dingTalkApi.HttpClient.BaseAddress != null);

            var externalAccountApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IExternalAccountApi>();
            Assert.True(externalAccountApi.HttpClient.BaseAddress != null);

            var fileApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IFileApi>();
            Assert.True(fileApi.HttpClient.BaseAddress != null);

            var oAuthApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IOAuthApi>();
            Assert.True(oAuthApi.HttpClient.BaseAddress != null);

            var orderApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IOrderApi>();
            Assert.True(orderApi.HttpClient.BaseAddress != null);

            var storageApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IStorageApi>();
            Assert.True(storageApi.HttpClient.BaseAddress != null);

            var userApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IUserApi>();
            Assert.True(userApi.HttpClient.BaseAddress != null);

            var userCurrencyApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IUserCurrencyApi>();
            Assert.True(userCurrencyApi.HttpClient.BaseAddress != null);

            var userFriendsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IUserFriendsApi>();
            Assert.True(userFriendsApi.HttpClient.BaseAddress != null);

            var userLocationApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IUserLocationApi>();
            Assert.True(userLocationApi.HttpClient.BaseAddress != null);

            var wechatApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IWechatApi>();
            Assert.True(wechatApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithAClientTest()
        {
            var accessTokenApi = _hostUsingAddWithAClient.Services.GetRequiredService<IAccessTokenApi>();
            Assert.True(accessTokenApi.HttpClient.BaseAddress != null);
            
            var alipayApi = _hostUsingAddWithAClient.Services.GetRequiredService<IAlipayApi>();
            Assert.True(alipayApi.HttpClient.BaseAddress != null);
            
            var appApi = _hostUsingAddWithAClient.Services.GetRequiredService<IAppApi>();
            Assert.True(appApi.HttpClient.BaseAddress != null);
            
            var dingTalkApi = _hostUsingAddWithAClient.Services.GetRequiredService<IDingTalkApi>();
            Assert.True(dingTalkApi.HttpClient.BaseAddress != null);
            
            var externalAccountApi = _hostUsingAddWithAClient.Services.GetRequiredService<IExternalAccountApi>();
            Assert.True(externalAccountApi.HttpClient.BaseAddress != null);
            
            var fileApi = _hostUsingAddWithAClient.Services.GetRequiredService<IFileApi>();
            Assert.True(fileApi.HttpClient.BaseAddress != null);
            
            var oAuthApi = _hostUsingAddWithAClient.Services.GetRequiredService<IOAuthApi>();
            Assert.True(oAuthApi.HttpClient.BaseAddress != null);
            
            var orderApi = _hostUsingAddWithAClient.Services.GetRequiredService<IOrderApi>();
            Assert.True(orderApi.HttpClient.BaseAddress != null);
            
            var storageApi = _hostUsingAddWithAClient.Services.GetRequiredService<IStorageApi>();
            Assert.True(storageApi.HttpClient.BaseAddress != null);
            
            var userApi = _hostUsingAddWithAClient.Services.GetRequiredService<IUserApi>();
            Assert.True(userApi.HttpClient.BaseAddress != null);
            
            var userCurrencyApi = _hostUsingAddWithAClient.Services.GetRequiredService<IUserCurrencyApi>();
            Assert.True(userCurrencyApi.HttpClient.BaseAddress != null);
            
            var userFriendsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IUserFriendsApi>();
            Assert.True(userFriendsApi.HttpClient.BaseAddress != null);
            
            var userLocationApi = _hostUsingAddWithAClient.Services.GetRequiredService<IUserLocationApi>();
            Assert.True(userLocationApi.HttpClient.BaseAddress != null);
            
            var wechatApi = _hostUsingAddWithAClient.Services.GetRequiredService<IWechatApi>();
            Assert.True(wechatApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithoutAClientTest()
        {
            var accessTokenApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IAccessTokenApi>();
            Assert.True(accessTokenApi.HttpClient.BaseAddress != null);

            var alipayApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IAlipayApi>();
            Assert.True(alipayApi.HttpClient.BaseAddress != null);

            var appApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IAppApi>();
            Assert.True(appApi.HttpClient.BaseAddress != null);

            var dingTalkApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IDingTalkApi>();
            Assert.True(dingTalkApi.HttpClient.BaseAddress != null);

            var externalAccountApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IExternalAccountApi>();
            Assert.True(externalAccountApi.HttpClient.BaseAddress != null);

            var fileApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IFileApi>();
            Assert.True(fileApi.HttpClient.BaseAddress != null);

            var oAuthApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IOAuthApi>();
            Assert.True(oAuthApi.HttpClient.BaseAddress != null);

            var orderApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IOrderApi>();
            Assert.True(orderApi.HttpClient.BaseAddress != null);

            var storageApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IStorageApi>();
            Assert.True(storageApi.HttpClient.BaseAddress != null);

            var userApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IUserApi>();
            Assert.True(userApi.HttpClient.BaseAddress != null);

            var userCurrencyApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IUserCurrencyApi>();
            Assert.True(userCurrencyApi.HttpClient.BaseAddress != null);

            var userFriendsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IUserFriendsApi>();
            Assert.True(userFriendsApi.HttpClient.BaseAddress != null);

            var userLocationApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IUserLocationApi>();
            Assert.True(userLocationApi.HttpClient.BaseAddress != null);

            var wechatApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IWechatApi>();
            Assert.True(wechatApi.HttpClient.BaseAddress != null);
        }
    }
}
