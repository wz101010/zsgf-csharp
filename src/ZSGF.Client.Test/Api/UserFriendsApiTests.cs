/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using ZSGF.Client.Api;
using ZSGF.Client.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace ZSGF.Client.Test.Api
{
    /// <summary>
    ///  Class for testing UserFriendsApi
    /// </summary>
    public sealed class UserFriendsApiTests : ApiTestsBase
    {
        private readonly IUserFriendsApi _instance;

        public UserFriendsApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IUserFriendsApi>();
        }

        /// <summary>
        /// Test UserCommonInterests
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UserCommonInterestsAsyncTest()
        {
            string appKey = default;
            Client.Option<string> tag = default;
            Client.Option<int> skip = default;
            Client.Option<int> take = default;
            var response = await _instance.UserCommonInterestsAsync(appKey, tag, skip, take);
            var model = response.Ok();
            Assert.IsType<UserCommonInterestsResultApiResponse>(model);
        }

        /// <summary>
        /// Test UserFollowUser
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UserFollowUserAsyncTest()
        {
            long userId = default;
            string appKey = default;
            var response = await _instance.UserFollowUserAsync(userId, appKey);
            var model = response.Ok();
            Assert.IsType<BooleanApiResponse>(model);
        }

        /// <summary>
        /// Test UserFollowerPut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UserFollowerPutAsyncTest()
        {
            long id = default;
            string appKey = default;
            Client.Option<FollowerPutModel> followerPutModel = default;
            var response = await _instance.UserFollowerPutAsync(id, appKey, followerPutModel);
            var model = response.Ok();
            Assert.IsType<BooleanApiResponse>(model);
        }

        /// <summary>
        /// Test UserFollowers
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UserFollowersAsyncTest()
        {
            string appKey = default;
            Client.Option<string> tag = default;
            Client.Option<string> status = default;
            Client.Option<long> targetUserId = default;
            Client.Option<int> skip = default;
            Client.Option<int> take = default;
            var response = await _instance.UserFollowersAsync(appKey, tag, status, targetUserId, skip, take);
            var model = response.Ok();
            Assert.IsType<UserFollowersResultApiResponse>(model);
        }

        /// <summary>
        /// Test UserFollowing
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UserFollowingAsyncTest()
        {
            string appKey = default;
            Client.Option<string> tag = default;
            Client.Option<string> status = default;
            Client.Option<long> targetUserId = default;
            Client.Option<int> skip = default;
            Client.Option<int> take = default;
            Client.Option<long> checkUserId = default;
            Client.Option<bool> onlyIDs = default;
            var response = await _instance.UserFollowingAsync(appKey, tag, status, targetUserId, skip, take, checkUserId, onlyIDs);
            var model = response.Ok();
            Assert.IsType<BooleanApiResponse>(model);
        }

        /// <summary>
        /// Test UserFriendsNearBy
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UserFriendsNearByAsyncTest()
        {
            double longitude = default;
            double latitude = default;
            string appKey = default;
            Client.Option<string> country = default;
            Client.Option<string> state = default;
            Client.Option<string> city = default;
            Client.Option<string> district = default;
            Client.Option<string> gender = default;
            Client.Option<int> ageS = default;
            Client.Option<int> ageE = default;
            Client.Option<string> tag = default;
            Client.Option<long> distance = default;
            Client.Option<int> skip = default;
            Client.Option<int> take = default;
            var response = await _instance.UserFriendsNearByAsync(longitude, latitude, appKey, country, state, city, district, gender, ageS, ageE, tag, distance, skip, take);
            var model = response.Ok();
            Assert.IsType<UserFriendsNearByResultApiResponse>(model);
        }

        /// <summary>
        /// Test UserMutualFollowers
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UserMutualFollowersAsyncTest()
        {
            string appKey = default;
            Client.Option<int> skip = default;
            Client.Option<int> take = default;
            var response = await _instance.UserMutualFollowersAsync(appKey, skip, take);
            var model = response.Ok();
            Assert.IsType<UserMutualFollowersResultApiResponse>(model);
        }

        /// <summary>
        /// Test UserMutualFollowings
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UserMutualFollowingsAsyncTest()
        {
            string appKey = default;
            Client.Option<int> skip = default;
            Client.Option<int> take = default;
            var response = await _instance.UserMutualFollowingsAsync(appKey, skip, take);
            var model = response.Ok();
            Assert.IsType<UserMutualFollowingsResultApiResponse>(model);
        }

        /// <summary>
        /// Test UserProfileById
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UserProfileByIdAsyncTest()
        {
            long userId = default;
            string appKey = default;
            var response = await _instance.UserProfileByIdAsync(userId, appKey);
            var model = response.Ok();
            Assert.IsType<GetUserProfileResultApiResponse>(model);
        }

        /// <summary>
        /// Test UserUnfollowUser
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UserUnfollowUserAsyncTest()
        {
            long userId = default;
            string appKey = default;
            var response = await _instance.UserUnfollowUserAsync(userId, appKey);
            var model = response.Ok();
            Assert.IsType<BooleanApiResponse>(model);
        }
    }
}
