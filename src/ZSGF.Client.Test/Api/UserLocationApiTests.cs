/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using ZSGF.Client.Api;
using ZSGF.Client.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace ZSGF.Client.Test.Api
{
    /// <summary>
    ///  Class for testing UserLocationApi
    /// </summary>
    public sealed class UserLocationApiTests : ApiTestsBase
    {
        private readonly IUserLocationApi _instance;

        public UserLocationApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IUserLocationApi>();
        }

        /// <summary>
        /// Test UserLocation
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UserLocationAsyncTest()
        {
            long id = default;
            string appKey = default;
            var response = await _instance.UserLocationAsync(id, appKey);
            var model = response.Ok();
            Assert.IsType<GeoLocationModelApiResponse>(model);
        }

        /// <summary>
        /// Test UserLocationDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UserLocationDeleteAsyncTest()
        {
            long id = default;
            string appKey = default;
            var response = await _instance.UserLocationDeleteAsync(id, appKey);
            var model = response.Ok();
            Assert.IsType<BooleanApiResponse>(model);
        }

        /// <summary>
        /// Test UserLocationPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UserLocationPostAsyncTest()
        {
            string appKey = default;
            Client.Option<GeoLocationModel> geoLocationModel = default;
            var response = await _instance.UserLocationPostAsync(appKey, geoLocationModel);
            var model = response.Ok();
            Assert.IsType<UserLocationPostResultApiResponse>(model);
        }

        /// <summary>
        /// Test UserLocationPut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UserLocationPutAsyncTest()
        {
            long id = default;
            string appKey = default;
            Client.Option<GeoLocationModel> geoLocationModel = default;
            var response = await _instance.UserLocationPutAsync(id, appKey, geoLocationModel);
            var model = response.Ok();
            Assert.IsType<BooleanApiResponse>(model);
        }

        /// <summary>
        /// Test UserLocations
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UserLocationsAsyncTest()
        {
            string appKey = default;
            Client.Option<string> tag = default;
            Client.Option<string> type = default;
            Client.Option<double> x = default;
            Client.Option<double> y = default;
            Client.Option<long> sphere = default;
            Client.Option<int> skip = default;
            Client.Option<int> take = default;
            var response = await _instance.UserLocationsAsync(appKey, tag, type, x, y, sphere, skip, take);
            var model = response.Ok();
            Assert.IsType<UserLocationsResultApiResponse>(model);
        }
    }
}
