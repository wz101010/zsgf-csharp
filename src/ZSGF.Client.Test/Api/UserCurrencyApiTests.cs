/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using ZSGF.Client.Api;
using ZSGF.Client.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace ZSGF.Client.Test.Api
{
    /// <summary>
    ///  Class for testing UserCurrencyApi
    /// </summary>
    public sealed class UserCurrencyApiTests : ApiTestsBase
    {
        private readonly IUserCurrencyApi _instance;

        public UserCurrencyApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IUserCurrencyApi>();
        }

        /// <summary>
        /// Test UserCurrencies
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UserCurrenciesAsyncTest()
        {
            long id = default;
            string appKey = default;
            var response = await _instance.UserCurrenciesAsync(id, appKey);
            var model = response.Ok();
            Assert.IsType<UserCurrencyListApiResponse>(model);
        }

        /// <summary>
        /// Test UserCurrencyConsume
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UserCurrencyConsumeAsyncTest()
        {
            string nonce = default;
            long timestamp = default;
            string signature = default;
            string appKey = default;
            Client.Option<CurrencyConsumeRequest> currencyConsumeRequest = default;
            var response = await _instance.UserCurrencyConsumeAsync(nonce, timestamp, signature, appKey, currencyConsumeRequest);
            var model = response.Ok();
            Assert.IsType<BooleanApiResponse>(model);
        }

        /// <summary>
        /// Test UserCurrencyExchange
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UserCurrencyExchangeAsyncTest()
        {
            string nonce = default;
            long timestamp = default;
            string signature = default;
            string appKey = default;
            Client.Option<ExchangeCurrencyRequest> exchangeCurrencyRequest = default;
            var response = await _instance.UserCurrencyExchangeAsync(nonce, timestamp, signature, appKey, exchangeCurrencyRequest);
            var model = response.Ok();
            Assert.IsType<BooleanApiResponse>(model);
        }

        /// <summary>
        /// Test UserCurrencyRecharge
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UserCurrencyRechargeAsyncTest()
        {
            string nonce = default;
            long timestamp = default;
            string signature = default;
            string appKey = default;
            Client.Option<RechargePointRequest> rechargePointRequest = default;
            var response = await _instance.UserCurrencyRechargeAsync(nonce, timestamp, signature, appKey, rechargePointRequest);
            var model = response.Ok();
            Assert.IsType<BooleanApiResponse>(model);
        }

        /// <summary>
        /// Test UserCurrencyTransactions
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UserCurrencyTransactionsAsyncTest()
        {
            string appKey = default;
            Client.Option<string> transType = default;
            Client.Option<string> curCode = default;
            Client.Option<DateTime> startTime = default;
            Client.Option<DateTime> endTime = default;
            Client.Option<int> skip = default;
            Client.Option<int> take = default;
            var response = await _instance.UserCurrencyTransactionsAsync(appKey, transType, curCode, startTime, endTime, skip, take);
            var model = response.Ok();
            Assert.IsType<UserCurrencyCurrencyTransResultApiResponse>(model);
        }
    }
}
