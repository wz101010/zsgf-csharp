/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using ZSGF.Client.Api;
using ZSGF.Client.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace ZSGF.Client.Test.Api
{
    /// <summary>
    ///  Class for testing WechatApi
    /// </summary>
    public sealed class WechatApiTests : ApiTestsBase
    {
        private readonly IWechatApi _instance;

        public WechatApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IWechatApi>();
        }

        /// <summary>
        /// Test ConfirmQRCodeLogin
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ConfirmQRCodeLoginAsyncTest()
        {
            string appKey = default;
            Client.Option<QRCodeSignInRequest> qRCodeSignInRequest = default;
            var response = await _instance.ConfirmQRCodeLoginAsync(appKey, qRCodeSignInRequest);
            var model = response.Ok();
            Assert.IsType<TokenModelApiResponse>(model);
        }

        /// <summary>
        /// Test ConfirmQRCodeRegistration
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ConfirmQRCodeRegistrationAsyncTest()
        {
            string appKey = default;
            Client.Option<QRCodeSignUpRequest> qRCodeSignUpRequest = default;
            var response = await _instance.ConfirmQRCodeRegistrationAsync(appKey, qRCodeSignUpRequest);
            var model = response.Ok();
            Assert.IsType<TokenModelApiResponse>(model);
        }

        /// <summary>
        /// Test InitiateQRAuthSession
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task InitiateQRAuthSessionAsyncTest()
        {
            string appKey = default;
            Client.Option<QRCodePreSignInRequest> qRCodePreSignInRequest = default;
            var response = await _instance.InitiateQRAuthSessionAsync(appKey, qRCodePreSignInRequest);
            var model = response.Ok();
            Assert.IsType<Int64ApiResponse>(model);
        }

        /// <summary>
        /// Test ScanQRCodeForAuth
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ScanQRCodeForAuthAsyncTest()
        {
            string appKey = default;
            Client.Option<QRCodeScanRequest> qRCodeScanRequest = default;
            var response = await _instance.ScanQRCodeForAuthAsync(appKey, qRCodeScanRequest);
            var model = response.Ok();
            Assert.IsType<UserQRCodeScanResultApiResponse>(model);
        }

        /// <summary>
        /// Test WechatDecrypt
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task WechatDecryptAsyncTest()
        {
            string appKey = default;
            Client.Option<string> encryptedData = default;
            Client.Option<string> iv = default;
            Client.Option<string> sessionKey = default;
            var response = await _instance.WechatDecryptAsync(appKey, encryptedData, iv, sessionKey);
            var model = response.Ok();
            Assert.IsType<StringApiResponse>(model);
        }

        /// <summary>
        /// Test WechatGenerateScheme
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task WechatGenerateSchemeAsyncTest()
        {
            string appKey = default;
            Client.Option<List<Object>> requestBody = default;
            var response = await _instance.WechatGenerateSchemeAsync(appKey, requestBody);
            var model = response.Ok();
            Assert.IsType<StringApiResponse>(model);
        }

        /// <summary>
        /// Test WechatJSCode2Session
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task WechatJSCode2SessionAsyncTest()
        {
            string appKey = default;
            Client.Option<string> jsCode = default;
            var response = await _instance.WechatJSCode2SessionAsync(appKey, jsCode);
            var model = response.Ok();
            Assert.IsType<StringApiResponse>(model);
        }

        /// <summary>
        /// Test WechatJSConfig
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task WechatJSConfigAsyncTest()
        {
            string appKey = default;
            Client.Option<string> url = default;
            var response = await _instance.WechatJSConfigAsync(appKey, url);
            var model = response.Ok();
            Assert.IsType<WechatJSConfigResultApiResponse>(model);
        }

        /// <summary>
        /// Test WechatMsgSecCheck
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task WechatMsgSecCheckAsyncTest()
        {
            string appKey = default;
            Client.Option<List<Object>> requestBody = default;
            var response = await _instance.WechatMsgSecCheckAsync(appKey, requestBody);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test WechatSubscribeMSG
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task WechatSubscribeMSGAsyncTest()
        {
            string appKey = default;
            Client.Option<List<Object>> requestBody = default;
            var response = await _instance.WechatSubscribeMSGAsync(appKey, requestBody);
            var model = response.Ok();
            Assert.IsType<StringApiResponse>(model);
        }

        /// <summary>
        /// Test WechatSubscribeSend
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task WechatSubscribeSendAsyncTest()
        {
            string appKey = default;
            Client.Option<List<Object>> requestBody = default;
            var response = await _instance.WechatSubscribeSendAsync(appKey, requestBody);
            var model = response.Ok();
            Assert.IsType<StringApiResponse>(model);
        }

        /// <summary>
        /// Test WechatUrlLinkGenerate
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task WechatUrlLinkGenerateAsyncTest()
        {
            string appKey = default;
            Client.Option<List<Object>> requestBody = default;
            var response = await _instance.WechatUrlLinkGenerateAsync(appKey, requestBody);
            var model = response.Ok();
            Assert.IsType<StringApiResponse>(model);
        }

        /// <summary>
        /// Test WechatUserInfo
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task WechatUserInfoAsyncTest()
        {
            string appKey = default;
            Client.Option<string> openid = default;
            var response = await _instance.WechatUserInfoAsync(appKey, openid);
            var model = response.Ok();
            Assert.IsType<StringApiResponse>(model);
        }

        /// <summary>
        /// Test WechatWXACodeGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task WechatWXACodeGetAsyncTest()
        {
            string appKey = default;
            Client.Option<List<Object>> requestBody = default;
            var response = await _instance.WechatWXACodeGetAsync(appKey, requestBody);
            var model = response.Ok();
            Assert.IsType<System.IO.Stream>(model);
        }

        /// <summary>
        /// Test WechatWXACodeGetUnlimited
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task WechatWXACodeGetUnlimitedAsyncTest()
        {
            string appKey = default;
            Client.Option<List<Object>> requestBody = default;
            var response = await _instance.WechatWXACodeGetUnlimitedAsync(appKey, requestBody);
            var model = response.Ok();
            Assert.IsType<System.IO.Stream>(model);
        }
    }
}
